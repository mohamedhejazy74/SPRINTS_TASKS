
led_sequence_V2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000068e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  0000068e  00000722  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800084  00800084  00000746  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000746  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000778  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b35  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aab  00000000  00000000  00002441  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d7c  00000000  00000000  00002eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000344  00000000  00000000  00003c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d1  00000000  00000000  00003fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012bb  00000000  00000000  0000497d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00005c38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 b8 01 	jmp	0x370	; 0x370 <__vector_1>
   8:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__vector_2>
   c:	0c 94 10 02 	jmp	0x420	; 0x420 <__vector_3>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	8f 00       	.word	0x008f	; ????
  56:	95 00       	.word	0x0095	; ????
  58:	9b 00       	.word	0x009b	; ????
  5a:	a1 00       	.word	0x00a1	; ????
  5c:	a7 00       	.word	0x00a7	; ????
  5e:	ad 00       	.word	0x00ad	; ????
  60:	b3 00       	.word	0x00b3	; ????
  62:	b9 00       	.word	0x00b9	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	ee e8       	ldi	r30, 0x8E	; 142
  78:	f6 e0       	ldi	r31, 0x06	; 6
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	a4 e8       	ldi	r26, 0x84	; 132
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	ab 38       	cpi	r26, 0x8B	; 139
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 2e 01 	call	0x25c	; 0x25c <main>
  9a:	0c 94 45 03 	jmp	0x68a	; 0x68a <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <LEDS_SEQ_UPDATE>:

volatile uint8_t g_pressCnt = IDLE_STATE ;

volatile void LEDS_SEQ_UPDATE(void)
{
	g_pressCnt++;
  a2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
  a6:	8f 5f       	subi	r24, 0xFF	; 255
  a8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
  ac:	08 95       	ret

000000ae <APP_init>:
}

Std_ReturnType APP_init(void)
{
  ae:	cf 93       	push	r28
	Std_ReturnType ret = E_OK;
	GLOBAL_InterruptEnable();
  b0:	8f b7       	in	r24, 0x3f	; 63
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	8f bf       	out	0x3f, r24	; 63
	ret  = LED_initialize(&s_led0);
  b6:	8f e6       	ldi	r24, 0x6F	; 111
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 df 00 	call	0x1be	; 0x1be <LED_initialize>
  be:	c8 2f       	mov	r28, r24
	ret |= LED_initialize(&s_led1);
  c0:	8c e6       	ldi	r24, 0x6C	; 108
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 df 00 	call	0x1be	; 0x1be <LED_initialize>
  c8:	c8 2b       	or	r28, r24
	ret |= LED_initialize(&s_led2);
  ca:	89 e6       	ldi	r24, 0x69	; 105
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 df 00 	call	0x1be	; 0x1be <LED_initialize>
  d2:	c8 2b       	or	r28, r24
	ret |= LED_initialize(&s_led3);
  d4:	86 e6       	ldi	r24, 0x66	; 102
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 df 00 	call	0x1be	; 0x1be <LED_initialize>
  dc:	c8 2b       	or	r28, r24
	ret |= BTN_init(&s_btn0);
  de:	82 e6       	ldi	r24, 0x62	; 98
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 c3 00 	call	0x186	; 0x186 <BTN_init>
  e6:	c8 2b       	or	r28, r24
	ret |= EXT_INTx_Init(&s_INT0);
  e8:	80 e6       	ldi	r24, 0x60	; 96
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 d6 02 	call	0x5ac	; 0x5ac <EXT_INTx_Init>
	return ret;
}
  f0:	8c 2b       	or	r24, r28
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <APP_start_program>:

Std_ReturnType APP_start_program(void)
{
  f6:	cf 93       	push	r28
	Std_ReturnType ret = E_OK;
	ret = EXT_INTx_setCallBack(&LEDS_SEQ_UPDATE,INTERRUPT_EXTERNAL_INT0);
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	81 e5       	ldi	r24, 0x51	; 81
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 3c 02 	call	0x478	; 0x478 <EXT_INTx_setCallBack>
 102:	c8 2f       	mov	r28, r24
		switch(g_pressCnt)
 104:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__data_end>
 108:	8e 2f       	mov	r24, r30
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	fc 01       	movw	r30, r24
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	e8 30       	cpi	r30, 0x08	; 8
 112:	f1 05       	cpc	r31, r1
 114:	a8 f5       	brcc	.+106    	; 0x180 <APP_start_program+0x8a>
 116:	e6 5d       	subi	r30, 0xD6	; 214
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__tablejump2__>
		{
			case FIRST_STATE:
				ret |= LED_turn_on(&s_led0);
 11e:	8f e6       	ldi	r24, 0x6F	; 111
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 08 01 	call	0x210	; 0x210 <LED_turn_on>
 126:	c8 2b       	or	r28, r24
				break;
 128:	2b c0       	rjmp	.+86     	; 0x180 <APP_start_program+0x8a>
			case SECOND_STATE:
				ret |= LED_turn_on(&s_led1);
 12a:	8c e6       	ldi	r24, 0x6C	; 108
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 08 01 	call	0x210	; 0x210 <LED_turn_on>
 132:	c8 2b       	or	r28, r24
				break;
 134:	25 c0       	rjmp	.+74     	; 0x180 <APP_start_program+0x8a>
			case THIRD_STATE:
				ret |= LED_turn_on(&s_led2);
 136:	89 e6       	ldi	r24, 0x69	; 105
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 08 01 	call	0x210	; 0x210 <LED_turn_on>
 13e:	c8 2b       	or	r28, r24
				break;
 140:	1f c0       	rjmp	.+62     	; 0x180 <APP_start_program+0x8a>
			case FOURTH_STATE:
				ret |= LED_turn_on(&s_led3);
 142:	86 e6       	ldi	r24, 0x66	; 102
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 08 01 	call	0x210	; 0x210 <LED_turn_on>
 14a:	c8 2b       	or	r28, r24
				break;
 14c:	19 c0       	rjmp	.+50     	; 0x180 <APP_start_program+0x8a>
			case FIFTH_STATE:
				ret |= LED_turn_off(&s_led0);
 14e:	8f e6       	ldi	r24, 0x6F	; 111
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 1b 01 	call	0x236	; 0x236 <LED_turn_off>
 156:	c8 2b       	or	r28, r24
				break;
 158:	13 c0       	rjmp	.+38     	; 0x180 <APP_start_program+0x8a>
			case SIXTH_STATE:
				ret |= LED_turn_off(&s_led1);
 15a:	8c e6       	ldi	r24, 0x6C	; 108
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 1b 01 	call	0x236	; 0x236 <LED_turn_off>
 162:	c8 2b       	or	r28, r24
				break;
 164:	0d c0       	rjmp	.+26     	; 0x180 <APP_start_program+0x8a>
			case SEVENTH_STATE:
				ret |= LED_turn_off(&s_led2);
 166:	89 e6       	ldi	r24, 0x69	; 105
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 1b 01 	call	0x236	; 0x236 <LED_turn_off>
 16e:	c8 2b       	or	r28, r24
				break;
 170:	07 c0       	rjmp	.+14     	; 0x180 <APP_start_program+0x8a>
			case EIGHTH_STATE:
				ret |= LED_turn_off(&s_led3);
 172:	86 e6       	ldi	r24, 0x66	; 102
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 1b 01 	call	0x236	; 0x236 <LED_turn_off>
 17a:	c8 2b       	or	r28, r24
				g_pressCnt = IDLE_STATE;
 17c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__data_end>
				break;
		}
	
	return ret;
}
 180:	8c 2f       	mov	r24, r28
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <BTN_init>:
 *  Author: Mohamed Abdel-Wahab
 */ 
#include "button.h"

Std_ReturnType BTN_init(const button_t *btn_ptr)
{
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
	Std_ReturnType ret = E_OK;
	if(NULL == btn_ptr || (btn_ptr->button_pin.pin > PORT_PIN_MAX_NUMBER-1) || (btn_ptr->button_pin.port > PORT_MAX_NUMBER-1))
 18a:	00 97       	sbiw	r24, 0x00	; 0
 18c:	81 f0       	breq	.+32     	; 0x1ae <BTN_init+0x28>
 18e:	fc 01       	movw	r30, r24
 190:	21 81       	ldd	r18, Z+1	; 0x01
 192:	28 30       	cpi	r18, 0x08	; 8
 194:	70 f4       	brcc	.+28     	; 0x1b2 <BTN_init+0x2c>
 196:	20 81       	ld	r18, Z
 198:	24 30       	cpi	r18, 0x04	; 4
 19a:	68 f4       	brcc	.+26     	; 0x1b6 <BTN_init+0x30>
 19c:	ec 01       	movw	r28, r24
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret = DIO_pin_direction_intialize(&(btn_ptr->button_pin),DIO_DIRECTION_INPUT);
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_pin_direction_intialize>
		ret = DIO_pin_write_logic(&(btn_ptr->button_pin),DIO_LOGIC_LOW);
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	ce 01       	movw	r24, r28
 1a8:	0e 94 77 01 	call	0x2ee	; 0x2ee <DIO_pin_write_logic>
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <BTN_init+0x32>
Std_ReturnType BTN_init(const button_t *btn_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == btn_ptr || (btn_ptr->button_pin.pin > PORT_PIN_MAX_NUMBER-1) || (btn_ptr->button_pin.port > PORT_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <BTN_init+0x32>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <BTN_init+0x32>
 1b6:	80 e0       	ldi	r24, 0x00	; 0
	{
		ret = DIO_pin_direction_intialize(&(btn_ptr->button_pin),DIO_DIRECTION_INPUT);
		ret = DIO_pin_write_logic(&(btn_ptr->button_pin),DIO_LOGIC_LOW);
	}
	return ret;
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <LED_initialize>:
 * Created: 4/5/2023 8:30:02 PM
 *  Author: Mohamed Abdel-Wahab
 */ 
#include "led.h"
Std_ReturnType LED_initialize(const led_t *led_ptr)
{
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
	Std_ReturnType ret = E_OK;
	if(NULL == led_ptr || (led_ptr->led_pin.pin > PORT_PIN_MAX_NUMBER-1) || (led_ptr->led_pin.port > PORT_MAX_NUMBER-1))
 1c2:	00 97       	sbiw	r24, 0x00	; 0
 1c4:	d9 f0       	breq	.+54     	; 0x1fc <LED_initialize+0x3e>
 1c6:	fc 01       	movw	r30, r24
 1c8:	21 81       	ldd	r18, Z+1	; 0x01
 1ca:	28 30       	cpi	r18, 0x08	; 8
 1cc:	c8 f4       	brcc	.+50     	; 0x200 <LED_initialize+0x42>
 1ce:	20 81       	ld	r18, Z
 1d0:	24 30       	cpi	r18, 0x04	; 4
 1d2:	c0 f4       	brcc	.+48     	; 0x204 <LED_initialize+0x46>
 1d4:	ec 01       	movw	r28, r24
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret = DIO_pin_direction_intialize(&(led_ptr->led_pin),DIO_DIRECTION_OUTPUT);
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_pin_direction_intialize>
		switch(led_ptr->led_status)
 1dc:	8a 81       	ldd	r24, Y+2	; 0x02
 1de:	88 23       	and	r24, r24
 1e0:	19 f0       	breq	.+6      	; 0x1e8 <LED_initialize+0x2a>
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	31 f0       	breq	.+12     	; 0x1f2 <LED_initialize+0x34>
 1e6:	10 c0       	rjmp	.+32     	; 0x208 <LED_initialize+0x4a>
		{
			case LED_OFF:
				ret = DIO_pin_write_logic(&(led_ptr->led_pin),DIO_LOGIC_LOW);
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	ce 01       	movw	r24, r28
 1ec:	0e 94 77 01 	call	0x2ee	; 0x2ee <DIO_pin_write_logic>
				break;
 1f0:	0c c0       	rjmp	.+24     	; 0x20a <LED_initialize+0x4c>
			case LED_ON:
				ret = DIO_pin_write_logic(&(led_ptr->led_pin),DIO_LOGIC_HIGH);
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	ce 01       	movw	r24, r28
 1f6:	0e 94 77 01 	call	0x2ee	; 0x2ee <DIO_pin_write_logic>
				break;
 1fa:	07 c0       	rjmp	.+14     	; 0x20a <LED_initialize+0x4c>
Std_ReturnType LED_initialize(const led_t *led_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == led_ptr || (led_ptr->led_pin.pin > PORT_PIN_MAX_NUMBER-1) || (led_ptr->led_pin.port > PORT_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	05 c0       	rjmp	.+10     	; 0x20a <LED_initialize+0x4c>
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	03 c0       	rjmp	.+6      	; 0x20a <LED_initialize+0x4c>
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	01 c0       	rjmp	.+2      	; 0x20a <LED_initialize+0x4c>
				break;
			case LED_ON:
				ret = DIO_pin_write_logic(&(led_ptr->led_pin),DIO_LOGIC_HIGH);
				break;
			default:
				ret = E_NOT_OK;
 208:	80 e0       	ldi	r24, 0x00	; 0
				break;
		}
	}
	return ret;
}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <LED_turn_on>:

Std_ReturnType LED_turn_on(const led_t *led_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == led_ptr || (led_ptr->led_pin.pin > PORT_PIN_MAX_NUMBER-1) || (led_ptr->led_pin.port > PORT_MAX_NUMBER-1))
 210:	00 97       	sbiw	r24, 0x00	; 0
 212:	59 f0       	breq	.+22     	; 0x22a <LED_turn_on+0x1a>
 214:	fc 01       	movw	r30, r24
 216:	21 81       	ldd	r18, Z+1	; 0x01
 218:	28 30       	cpi	r18, 0x08	; 8
 21a:	48 f4       	brcc	.+18     	; 0x22e <LED_turn_on+0x1e>
 21c:	20 81       	ld	r18, Z
 21e:	24 30       	cpi	r18, 0x04	; 4
 220:	40 f4       	brcc	.+16     	; 0x232 <LED_turn_on+0x22>
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret = DIO_pin_write_logic(&(led_ptr->led_pin),DIO_LOGIC_HIGH);
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	0e 94 77 01 	call	0x2ee	; 0x2ee <DIO_pin_write_logic>
 228:	08 95       	ret
Std_ReturnType LED_turn_on(const led_t *led_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == led_ptr || (led_ptr->led_pin.pin > PORT_PIN_MAX_NUMBER-1) || (led_ptr->led_pin.port > PORT_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	08 95       	ret
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	08 95       	ret
 232:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ret = DIO_pin_write_logic(&(led_ptr->led_pin),DIO_LOGIC_HIGH);
	}
	return ret;
}
 234:	08 95       	ret

00000236 <LED_turn_off>:

Std_ReturnType LED_turn_off (const led_t *led_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == led_ptr || (led_ptr->led_pin.pin > PORT_PIN_MAX_NUMBER-1) || (led_ptr->led_pin.port > PORT_MAX_NUMBER-1))
 236:	00 97       	sbiw	r24, 0x00	; 0
 238:	59 f0       	breq	.+22     	; 0x250 <LED_turn_off+0x1a>
 23a:	fc 01       	movw	r30, r24
 23c:	21 81       	ldd	r18, Z+1	; 0x01
 23e:	28 30       	cpi	r18, 0x08	; 8
 240:	48 f4       	brcc	.+18     	; 0x254 <LED_turn_off+0x1e>
 242:	20 81       	ld	r18, Z
 244:	24 30       	cpi	r18, 0x04	; 4
 246:	40 f4       	brcc	.+16     	; 0x258 <LED_turn_off+0x22>
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret = DIO_pin_write_logic(&(led_ptr->led_pin),DIO_LOGIC_LOW);
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	0e 94 77 01 	call	0x2ee	; 0x2ee <DIO_pin_write_logic>
 24e:	08 95       	ret
Std_ReturnType LED_turn_off (const led_t *led_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == led_ptr || (led_ptr->led_pin.pin > PORT_PIN_MAX_NUMBER-1) || (led_ptr->led_pin.port > PORT_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	08 95       	ret
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	08 95       	ret
 258:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ret = DIO_pin_write_logic(&(led_ptr->led_pin),DIO_LOGIC_LOW);
	}
	return ret;
}
 25a:	08 95       	ret

0000025c <main>:

int main(void)
{
	
	#if RUN_MAIN_PROGRAM==ENABLE_FEATURE
	ret = APP_init();
 25c:	0e 94 57 00 	call	0xae	; 0xae <APP_init>
 260:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <ret>
	#endif
	
	while (1)
	{
		#if RUN_MAIN_PROGRAM==ENABLE_FEATURE
		ret = APP_start_program();
 264:	0e 94 7b 00 	call	0xf6	; 0xf6 <APP_start_program>
 268:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <ret>
 26c:	fb cf       	rjmp	.-10     	; 0x264 <main+0x8>

0000026e <DIO_pin_direction_intialize>:
static volatile uint8_t *port_registers[PORT_MAX_NUMBER] = {&PORTA, &PORTB, &PORTC, &PORTD};

Std_ReturnType DIO_pin_direction_intialize(const pin_config_t *pin_config_ptr,direction_t a_direction)
{
	Std_ReturnType ret = E_OK;
	if(NULL == pin_config_ptr || (pin_config_ptr->pin > PORT_PIN_MAX_NUMBER-1) || (pin_config_ptr->port > PORT_MAX_NUMBER-1))
 26e:	00 97       	sbiw	r24, 0x00	; 0
 270:	b1 f1       	breq	.+108    	; 0x2de <DIO_pin_direction_intialize+0x70>
 272:	dc 01       	movw	r26, r24
 274:	11 96       	adiw	r26, 0x01	; 1
 276:	2c 91       	ld	r18, X
 278:	11 97       	sbiw	r26, 0x01	; 1
 27a:	28 30       	cpi	r18, 0x08	; 8
 27c:	90 f5       	brcc	.+100    	; 0x2e2 <DIO_pin_direction_intialize+0x74>
 27e:	ec 91       	ld	r30, X
 280:	e4 30       	cpi	r30, 0x04	; 4
 282:	88 f5       	brcc	.+98     	; 0x2e6 <DIO_pin_direction_intialize+0x78>
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(a_direction)
 284:	66 23       	and	r22, r22
 286:	b1 f0       	breq	.+44     	; 0x2b4 <DIO_pin_direction_intialize+0x46>
 288:	61 30       	cpi	r22, 0x01	; 1
 28a:	79 f5       	brne	.+94     	; 0x2ea <DIO_pin_direction_intialize+0x7c>
		{
			case DIO_DIRECTION_OUTPUT:
				SET_BIT(*(ddr_registers[pin_config_ptr->port]),pin_config_ptr->pin);
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	ee 0f       	add	r30, r30
 290:	ff 1f       	adc	r31, r31
 292:	e5 58       	subi	r30, 0x85	; 133
 294:	ff 4f       	sbci	r31, 0xFF	; 255
 296:	01 90       	ld	r0, Z+
 298:	f0 81       	ld	r31, Z
 29a:	e0 2d       	mov	r30, r0
 29c:	30 81       	ld	r19, Z
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_pin_direction_intialize+0x3a>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	2a 95       	dec	r18
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_pin_direction_intialize+0x36>
 2ac:	83 2b       	or	r24, r19
 2ae:	80 83       	st	Z, r24
/* Reference to the Port Status Register (Write data)  */
static volatile uint8_t *port_registers[PORT_MAX_NUMBER] = {&PORTA, &PORTB, &PORTC, &PORTD};

Std_ReturnType DIO_pin_direction_intialize(const pin_config_t *pin_config_ptr,direction_t a_direction)
{
	Std_ReturnType ret = E_OK;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(a_direction)
		{
			case DIO_DIRECTION_OUTPUT:
				SET_BIT(*(ddr_registers[pin_config_ptr->port]),pin_config_ptr->pin);
				break;
 2b2:	08 95       	ret
			case DIO_DIRECTION_INPUT:
				CLEAR_BIT(*(ddr_registers[pin_config_ptr->port]),pin_config_ptr->pin);
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	ee 0f       	add	r30, r30
 2b8:	ff 1f       	adc	r31, r31
 2ba:	e5 58       	subi	r30, 0x85	; 133
 2bc:	ff 4f       	sbci	r31, 0xFF	; 255
 2be:	01 90       	ld	r0, Z+
 2c0:	f0 81       	ld	r31, Z
 2c2:	e0 2d       	mov	r30, r0
 2c4:	30 81       	ld	r19, Z
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_pin_direction_intialize+0x62>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	2a 95       	dec	r18
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_pin_direction_intialize+0x5e>
 2d4:	80 95       	com	r24
 2d6:	83 23       	and	r24, r19
 2d8:	80 83       	st	Z, r24
/* Reference to the Port Status Register (Write data)  */
static volatile uint8_t *port_registers[PORT_MAX_NUMBER] = {&PORTA, &PORTB, &PORTC, &PORTD};

Std_ReturnType DIO_pin_direction_intialize(const pin_config_t *pin_config_ptr,direction_t a_direction)
{
	Std_ReturnType ret = E_OK;
 2da:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_DIRECTION_OUTPUT:
				SET_BIT(*(ddr_registers[pin_config_ptr->port]),pin_config_ptr->pin);
				break;
			case DIO_DIRECTION_INPUT:
				CLEAR_BIT(*(ddr_registers[pin_config_ptr->port]),pin_config_ptr->pin);
				break;
 2dc:	08 95       	ret
Std_ReturnType DIO_pin_direction_intialize(const pin_config_t *pin_config_ptr,direction_t a_direction)
{
	Std_ReturnType ret = E_OK;
	if(NULL == pin_config_ptr || (pin_config_ptr->pin > PORT_PIN_MAX_NUMBER-1) || (pin_config_ptr->port > PORT_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	08 95       	ret
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	08 95       	ret
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	08 95       	ret
				break;
			case DIO_DIRECTION_INPUT:
				CLEAR_BIT(*(ddr_registers[pin_config_ptr->port]),pin_config_ptr->pin);
				break;
			default:
				ret = E_NOT_OK;
 2ea:	80 e0       	ldi	r24, 0x00	; 0
				break;				
		}
	}
	return ret;
}
 2ec:	08 95       	ret

000002ee <DIO_pin_write_logic>:

Std_ReturnType DIO_pin_write_logic(const pin_config_t *pin_config_ptr, const logic_t a_logic)
{
	Std_ReturnType ret = E_OK;
	if(NULL == pin_config_ptr || (pin_config_ptr->pin > PORT_PIN_MAX_NUMBER-1) || (pin_config_ptr->port > PORT_MAX_NUMBER-1))
 2ee:	00 97       	sbiw	r24, 0x00	; 0
 2f0:	b9 f1       	breq	.+110    	; 0x360 <DIO_pin_write_logic+0x72>
 2f2:	dc 01       	movw	r26, r24
 2f4:	11 96       	adiw	r26, 0x01	; 1
 2f6:	2c 91       	ld	r18, X
 2f8:	11 97       	sbiw	r26, 0x01	; 1
 2fa:	28 30       	cpi	r18, 0x08	; 8
 2fc:	98 f5       	brcc	.+102    	; 0x364 <DIO_pin_write_logic+0x76>
 2fe:	ec 91       	ld	r30, X
 300:	e4 30       	cpi	r30, 0x04	; 4
 302:	90 f5       	brcc	.+100    	; 0x368 <DIO_pin_write_logic+0x7a>
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(a_logic)
 304:	66 23       	and	r22, r22
 306:	19 f0       	breq	.+6      	; 0x30e <DIO_pin_write_logic+0x20>
 308:	61 30       	cpi	r22, 0x01	; 1
 30a:	b1 f0       	breq	.+44     	; 0x338 <DIO_pin_write_logic+0x4a>
 30c:	2f c0       	rjmp	.+94     	; 0x36c <DIO_pin_write_logic+0x7e>
		{
			case DIO_LOGIC_LOW:
				CLEAR_BIT(*(port_registers[pin_config_ptr->port]),pin_config_ptr->pin);
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	ee 0f       	add	r30, r30
 312:	ff 1f       	adc	r31, r31
 314:	ed 58       	subi	r30, 0x8D	; 141
 316:	ff 4f       	sbci	r31, 0xFF	; 255
 318:	01 90       	ld	r0, Z+
 31a:	f0 81       	ld	r31, Z
 31c:	e0 2d       	mov	r30, r0
 31e:	30 81       	ld	r19, Z
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_pin_write_logic+0x3c>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	2a 95       	dec	r18
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_pin_write_logic+0x38>
 32e:	80 95       	com	r24
 330:	83 23       	and	r24, r19
 332:	80 83       	st	Z, r24
	return ret;
}

Std_ReturnType DIO_pin_write_logic(const pin_config_t *pin_config_ptr, const logic_t a_logic)
{
	Std_ReturnType ret = E_OK;
 334:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(a_logic)
		{
			case DIO_LOGIC_LOW:
				CLEAR_BIT(*(port_registers[pin_config_ptr->port]),pin_config_ptr->pin);
				break;
 336:	08 95       	ret
			case DIO_LOGIC_HIGH:
				SET_BIT(*(port_registers[pin_config_ptr->port]),pin_config_ptr->pin);
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	ee 0f       	add	r30, r30
 33c:	ff 1f       	adc	r31, r31
 33e:	ed 58       	subi	r30, 0x8D	; 141
 340:	ff 4f       	sbci	r31, 0xFF	; 255
 342:	01 90       	ld	r0, Z+
 344:	f0 81       	ld	r31, Z
 346:	e0 2d       	mov	r30, r0
 348:	30 81       	ld	r19, Z
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_pin_write_logic+0x66>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	2a 95       	dec	r18
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_pin_write_logic+0x62>
 358:	83 2b       	or	r24, r19
 35a:	80 83       	st	Z, r24
	return ret;
}

Std_ReturnType DIO_pin_write_logic(const pin_config_t *pin_config_ptr, const logic_t a_logic)
{
	Std_ReturnType ret = E_OK;
 35c:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_LOGIC_LOW:
				CLEAR_BIT(*(port_registers[pin_config_ptr->port]),pin_config_ptr->pin);
				break;
			case DIO_LOGIC_HIGH:
				SET_BIT(*(port_registers[pin_config_ptr->port]),pin_config_ptr->pin);
				break;
 35e:	08 95       	ret
Std_ReturnType DIO_pin_write_logic(const pin_config_t *pin_config_ptr, const logic_t a_logic)
{
	Std_ReturnType ret = E_OK;
	if(NULL == pin_config_ptr || (pin_config_ptr->pin > PORT_PIN_MAX_NUMBER-1) || (pin_config_ptr->port > PORT_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	08 95       	ret
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	08 95       	ret
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	08 95       	ret
				break;
			case DIO_LOGIC_HIGH:
				SET_BIT(*(port_registers[pin_config_ptr->port]),pin_config_ptr->pin);
				break;
			default:
				ret = E_NOT_OK;
 36c:	80 e0       	ldi	r24, 0x00	; 0
				break;
		}
	}
	return ret;
}
 36e:	08 95       	ret

00000370 <__vector_1>:
static volatile void(*g_EXT_INT0_fptr)(void) = NULL;
static volatile void(*g_EXT_INT1_fptr)(void) = NULL;
static volatile void(*g_EXT_INT2_fptr)(void) = NULL;

ISR(INT0_vect)
{
 370:	1f 92       	push	r1
 372:	0f 92       	push	r0
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	0f 92       	push	r0
 378:	11 24       	eor	r1, r1
 37a:	2f 93       	push	r18
 37c:	3f 93       	push	r19
 37e:	4f 93       	push	r20
 380:	5f 93       	push	r21
 382:	6f 93       	push	r22
 384:	7f 93       	push	r23
 386:	8f 93       	push	r24
 388:	9f 93       	push	r25
 38a:	af 93       	push	r26
 38c:	bf 93       	push	r27
 38e:	ef 93       	push	r30
 390:	ff 93       	push	r31
	/* The INT0 external interrupt occurred (must be cleared in software) */
	EXT_INT0_InterruptFlagClear();
 392:	8a b7       	in	r24, 0x3a	; 58
 394:	80 64       	ori	r24, 0x40	; 64
 396:	8a bf       	out	0x3a, r24	; 58
	
	if(g_EXT_INT0_fptr)
 398:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <g_EXT_INT0_fptr>
 39c:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <g_EXT_INT0_fptr+0x1>
 3a0:	30 97       	sbiw	r30, 0x00	; 0
 3a2:	09 f0       	breq	.+2      	; 0x3a6 <__vector_1+0x36>
	{
		/* Application Callback function gets called every time this ISR executes */
		(*g_EXT_INT0_fptr)();
 3a4:	09 95       	icall
	}
	else{/*do nothing*/}
}
 3a6:	ff 91       	pop	r31
 3a8:	ef 91       	pop	r30
 3aa:	bf 91       	pop	r27
 3ac:	af 91       	pop	r26
 3ae:	9f 91       	pop	r25
 3b0:	8f 91       	pop	r24
 3b2:	7f 91       	pop	r23
 3b4:	6f 91       	pop	r22
 3b6:	5f 91       	pop	r21
 3b8:	4f 91       	pop	r20
 3ba:	3f 91       	pop	r19
 3bc:	2f 91       	pop	r18
 3be:	0f 90       	pop	r0
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	0f 90       	pop	r0
 3c4:	1f 90       	pop	r1
 3c6:	18 95       	reti

000003c8 <__vector_2>:

ISR(INT1_vect)
{
 3c8:	1f 92       	push	r1
 3ca:	0f 92       	push	r0
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	0f 92       	push	r0
 3d0:	11 24       	eor	r1, r1
 3d2:	2f 93       	push	r18
 3d4:	3f 93       	push	r19
 3d6:	4f 93       	push	r20
 3d8:	5f 93       	push	r21
 3da:	6f 93       	push	r22
 3dc:	7f 93       	push	r23
 3de:	8f 93       	push	r24
 3e0:	9f 93       	push	r25
 3e2:	af 93       	push	r26
 3e4:	bf 93       	push	r27
 3e6:	ef 93       	push	r30
 3e8:	ff 93       	push	r31
	/* The INT1 external interrupt occurred (must be cleared in software) */
	EXT_INT1_InterruptFlagClear();
 3ea:	8a b7       	in	r24, 0x3a	; 58
 3ec:	80 68       	ori	r24, 0x80	; 128
 3ee:	8a bf       	out	0x3a, r24	; 58
	if(g_EXT_INT1_fptr)
 3f0:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <g_EXT_INT1_fptr>
 3f4:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <g_EXT_INT1_fptr+0x1>
 3f8:	30 97       	sbiw	r30, 0x00	; 0
 3fa:	09 f0       	breq	.+2      	; 0x3fe <__vector_2+0x36>
	{
		/* Application Callback function gets called every time this ISR executes */
		(*g_EXT_INT1_fptr)();
 3fc:	09 95       	icall
	}
	else{/*do nothing*/}
}
 3fe:	ff 91       	pop	r31
 400:	ef 91       	pop	r30
 402:	bf 91       	pop	r27
 404:	af 91       	pop	r26
 406:	9f 91       	pop	r25
 408:	8f 91       	pop	r24
 40a:	7f 91       	pop	r23
 40c:	6f 91       	pop	r22
 40e:	5f 91       	pop	r21
 410:	4f 91       	pop	r20
 412:	3f 91       	pop	r19
 414:	2f 91       	pop	r18
 416:	0f 90       	pop	r0
 418:	0f be       	out	0x3f, r0	; 63
 41a:	0f 90       	pop	r0
 41c:	1f 90       	pop	r1
 41e:	18 95       	reti

00000420 <__vector_3>:

ISR(INT2_vect)
{
 420:	1f 92       	push	r1
 422:	0f 92       	push	r0
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	0f 92       	push	r0
 428:	11 24       	eor	r1, r1
 42a:	2f 93       	push	r18
 42c:	3f 93       	push	r19
 42e:	4f 93       	push	r20
 430:	5f 93       	push	r21
 432:	6f 93       	push	r22
 434:	7f 93       	push	r23
 436:	8f 93       	push	r24
 438:	9f 93       	push	r25
 43a:	af 93       	push	r26
 43c:	bf 93       	push	r27
 43e:	ef 93       	push	r30
 440:	ff 93       	push	r31
	/* The INT1 external interrupt occurred (must be cleared in software) */
	EXT_INT1_InterruptFlagClear();
 442:	8a b7       	in	r24, 0x3a	; 58
 444:	80 68       	ori	r24, 0x80	; 128
 446:	8a bf       	out	0x3a, r24	; 58
	if(g_EXT_INT2_fptr)
 448:	e0 91 85 00 	lds	r30, 0x0085	; 0x800085 <g_EXT_INT2_fptr>
 44c:	f0 91 86 00 	lds	r31, 0x0086	; 0x800086 <g_EXT_INT2_fptr+0x1>
 450:	30 97       	sbiw	r30, 0x00	; 0
 452:	09 f0       	breq	.+2      	; 0x456 <__vector_3+0x36>
	{
		/* Application Callback function gets called every time this ISR executes */
		(*g_EXT_INT2_fptr)();
 454:	09 95       	icall
	}
	else{/*do nothing*/}
}
 456:	ff 91       	pop	r31
 458:	ef 91       	pop	r30
 45a:	bf 91       	pop	r27
 45c:	af 91       	pop	r26
 45e:	9f 91       	pop	r25
 460:	8f 91       	pop	r24
 462:	7f 91       	pop	r23
 464:	6f 91       	pop	r22
 466:	5f 91       	pop	r21
 468:	4f 91       	pop	r20
 46a:	3f 91       	pop	r19
 46c:	2f 91       	pop	r18
 46e:	0f 90       	pop	r0
 470:	0f be       	out	0x3f, r0	; 63
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

00000478 <EXT_INTx_setCallBack>:

Std_ReturnType EXT_INTx_setCallBack(volatile void(*a_fptr)(void), const Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
	if(NULL == a_fptr || a_interrupt_number > NUM_OF_EXT_INTx - 1)
 478:	00 97       	sbiw	r24, 0x00	; 0
 47a:	d1 f0       	breq	.+52     	; 0x4b0 <EXT_INTx_setCallBack+0x38>
 47c:	63 30       	cpi	r22, 0x03	; 3
 47e:	d0 f4       	brcc	.+52     	; 0x4b4 <EXT_INTx_setCallBack+0x3c>
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(a_interrupt_number)
 480:	61 30       	cpi	r22, 0x01	; 1
 482:	51 f0       	breq	.+20     	; 0x498 <EXT_INTx_setCallBack+0x20>
 484:	18 f0       	brcs	.+6      	; 0x48c <EXT_INTx_setCallBack+0x14>
 486:	62 30       	cpi	r22, 0x02	; 2
 488:	69 f0       	breq	.+26     	; 0x4a4 <EXT_INTx_setCallBack+0x2c>
 48a:	16 c0       	rjmp	.+44     	; 0x4b8 <EXT_INTx_setCallBack+0x40>
		{
			case INTERRUPT_EXTERNAL_INT0:
				g_EXT_INT0_fptr = a_fptr;
 48c:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <g_EXT_INT0_fptr+0x1>
 490:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <g_EXT_INT0_fptr>
	else{/*do nothing*/}
}

Std_ReturnType EXT_INTx_setCallBack(volatile void(*a_fptr)(void), const Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
 494:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(a_interrupt_number)
		{
			case INTERRUPT_EXTERNAL_INT0:
				g_EXT_INT0_fptr = a_fptr;
				break;
 496:	08 95       	ret
			case INTERRUPT_EXTERNAL_INT1:
				g_EXT_INT1_fptr = a_fptr;
 498:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <g_EXT_INT1_fptr+0x1>
 49c:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <g_EXT_INT1_fptr>
	else{/*do nothing*/}
}

Std_ReturnType EXT_INTx_setCallBack(volatile void(*a_fptr)(void), const Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
 4a0:	81 e0       	ldi	r24, 0x01	; 1
			case INTERRUPT_EXTERNAL_INT0:
				g_EXT_INT0_fptr = a_fptr;
				break;
			case INTERRUPT_EXTERNAL_INT1:
				g_EXT_INT1_fptr = a_fptr;
				break;
 4a2:	08 95       	ret
			case INTERRUPT_EXTERNAL_INT2:
				g_EXT_INT2_fptr = a_fptr;
 4a4:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <g_EXT_INT2_fptr+0x1>
 4a8:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <g_EXT_INT2_fptr>
	else{/*do nothing*/}
}

Std_ReturnType EXT_INTx_setCallBack(volatile void(*a_fptr)(void), const Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
 4ac:	81 e0       	ldi	r24, 0x01	; 1
			case INTERRUPT_EXTERNAL_INT1:
				g_EXT_INT1_fptr = a_fptr;
				break;
			case INTERRUPT_EXTERNAL_INT2:
				g_EXT_INT2_fptr = a_fptr;
				break;
 4ae:	08 95       	ret
Std_ReturnType EXT_INTx_setCallBack(volatile void(*a_fptr)(void), const Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
	if(NULL == a_fptr || a_interrupt_number > NUM_OF_EXT_INTx - 1)
	{
		ret = E_NOT_OK;
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	08 95       	ret
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	08 95       	ret
				break;
			case INTERRUPT_EXTERNAL_INT2:
				g_EXT_INT2_fptr = a_fptr;
				break;
			default:
				ret = E_NOT_OK;
 4b8:	80 e0       	ldi	r24, 0x00	; 0
				break;		
		}	
	}
	return ret;
}
 4ba:	08 95       	ret

000004bc <EXT_INTx_setEdgeType>:

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
	if(a_interrupt_Id > NUM_OF_EXT_INTx - 1 || a_edgeType > NOT_VALID_EDGE)
 4bc:	63 30       	cpi	r22, 0x03	; 3
 4be:	08 f0       	brcs	.+2      	; 0x4c2 <EXT_INTx_setEdgeType+0x6>
 4c0:	69 c0       	rjmp	.+210    	; 0x594 <EXT_INTx_setEdgeType+0xd8>
 4c2:	85 30       	cpi	r24, 0x05	; 5
 4c4:	08 f0       	brcs	.+2      	; 0x4c8 <EXT_INTx_setEdgeType+0xc>
 4c6:	68 c0       	rjmp	.+208    	; 0x598 <EXT_INTx_setEdgeType+0xdc>
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(a_interrupt_Id)
 4c8:	61 30       	cpi	r22, 0x01	; 1
 4ca:	69 f1       	breq	.+90     	; 0x526 <EXT_INTx_setEdgeType+0x6a>
 4cc:	20 f0       	brcs	.+8      	; 0x4d6 <EXT_INTx_setEdgeType+0x1a>
 4ce:	62 30       	cpi	r22, 0x02	; 2
 4d0:	09 f4       	brne	.+2      	; 0x4d4 <EXT_INTx_setEdgeType+0x18>
 4d2:	51 c0       	rjmp	.+162    	; 0x576 <EXT_INTx_setEdgeType+0xba>
 4d4:	63 c0       	rjmp	.+198    	; 0x59c <EXT_INTx_setEdgeType+0xe0>
		{
			case INTERRUPT_EXTERNAL_INT0:
				switch(a_edgeType)
 4d6:	81 30       	cpi	r24, 0x01	; 1
 4d8:	71 f0       	breq	.+28     	; 0x4f6 <EXT_INTx_setEdgeType+0x3a>
 4da:	28 f0       	brcs	.+10     	; 0x4e6 <EXT_INTx_setEdgeType+0x2a>
 4dc:	82 30       	cpi	r24, 0x02	; 2
 4de:	99 f0       	breq	.+38     	; 0x506 <EXT_INTx_setEdgeType+0x4a>
 4e0:	83 30       	cpi	r24, 0x03	; 3
 4e2:	c9 f0       	breq	.+50     	; 0x516 <EXT_INTx_setEdgeType+0x5a>
 4e4:	5d c0       	rjmp	.+186    	; 0x5a0 <EXT_INTx_setEdgeType+0xe4>
				{
					case INTERRUPT_LOW_LEVEL:
						CLEAR_BIT(MCUCR,ISC00);
 4e6:	85 b7       	in	r24, 0x35	; 53
 4e8:	8e 7f       	andi	r24, 0xFE	; 254
 4ea:	85 bf       	out	0x35, r24	; 53
						CLEAR_BIT(MCUCR,ISC01);
 4ec:	85 b7       	in	r24, 0x35	; 53
 4ee:	8d 7f       	andi	r24, 0xFD	; 253
 4f0:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
 4f2:	81 e0       	ldi	r24, 0x01	; 1
				switch(a_edgeType)
				{
					case INTERRUPT_LOW_LEVEL:
						CLEAR_BIT(MCUCR,ISC00);
						CLEAR_BIT(MCUCR,ISC01);
						break;
 4f4:	08 95       	ret
					case INTERRUPT_ANY_LOGICAL_CHANGE:
						SET_BIT(MCUCR,ISC00);
 4f6:	85 b7       	in	r24, 0x35	; 53
 4f8:	81 60       	ori	r24, 0x01	; 1
 4fa:	85 bf       	out	0x35, r24	; 53
						CLEAR_BIT(MCUCR,ISC01);
 4fc:	85 b7       	in	r24, 0x35	; 53
 4fe:	8d 7f       	andi	r24, 0xFD	; 253
 500:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
 502:	81 e0       	ldi	r24, 0x01	; 1
						CLEAR_BIT(MCUCR,ISC01);
						break;
					case INTERRUPT_ANY_LOGICAL_CHANGE:
						SET_BIT(MCUCR,ISC00);
						CLEAR_BIT(MCUCR,ISC01);
						break;
 504:	08 95       	ret
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCR,ISC00);
 506:	85 b7       	in	r24, 0x35	; 53
 508:	8e 7f       	andi	r24, 0xFE	; 254
 50a:	85 bf       	out	0x35, r24	; 53
						SET_BIT(MCUCR,ISC01);
 50c:	85 b7       	in	r24, 0x35	; 53
 50e:	82 60       	ori	r24, 0x02	; 2
 510:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
 512:	81 e0       	ldi	r24, 0x01	; 1
						CLEAR_BIT(MCUCR,ISC01);
						break;
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCR,ISC00);
						SET_BIT(MCUCR,ISC01);
						break;
 514:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC00);
 516:	85 b7       	in	r24, 0x35	; 53
 518:	81 60       	ori	r24, 0x01	; 1
 51a:	85 bf       	out	0x35, r24	; 53
						SET_BIT(MCUCR,ISC01);
 51c:	85 b7       	in	r24, 0x35	; 53
 51e:	82 60       	ori	r24, 0x02	; 2
 520:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
 522:	81 e0       	ldi	r24, 0x01	; 1
						SET_BIT(MCUCR,ISC01);
						break;
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC00);
						SET_BIT(MCUCR,ISC01);
						break;
 524:	08 95       	ret
				}
				break;
			
			case INTERRUPT_EXTERNAL_INT1:
			
				switch(a_edgeType)
 526:	81 30       	cpi	r24, 0x01	; 1
 528:	71 f0       	breq	.+28     	; 0x546 <EXT_INTx_setEdgeType+0x8a>
 52a:	28 f0       	brcs	.+10     	; 0x536 <EXT_INTx_setEdgeType+0x7a>
 52c:	82 30       	cpi	r24, 0x02	; 2
 52e:	99 f0       	breq	.+38     	; 0x556 <EXT_INTx_setEdgeType+0x9a>
 530:	83 30       	cpi	r24, 0x03	; 3
 532:	c9 f0       	breq	.+50     	; 0x566 <EXT_INTx_setEdgeType+0xaa>
 534:	37 c0       	rjmp	.+110    	; 0x5a4 <EXT_INTx_setEdgeType+0xe8>
				{
					case INTERRUPT_LOW_LEVEL:
						CLEAR_BIT(MCUCR,ISC10);
 536:	85 b7       	in	r24, 0x35	; 53
 538:	8b 7f       	andi	r24, 0xFB	; 251
 53a:	85 bf       	out	0x35, r24	; 53
						CLEAR_BIT(MCUCR,ISC11);
 53c:	85 b7       	in	r24, 0x35	; 53
 53e:	87 7f       	andi	r24, 0xF7	; 247
 540:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
 542:	81 e0       	ldi	r24, 0x01	; 1
				switch(a_edgeType)
				{
					case INTERRUPT_LOW_LEVEL:
						CLEAR_BIT(MCUCR,ISC10);
						CLEAR_BIT(MCUCR,ISC11);
						break;
 544:	08 95       	ret
					case INTERRUPT_ANY_LOGICAL_CHANGE:
						SET_BIT(MCUCR,ISC10);
 546:	85 b7       	in	r24, 0x35	; 53
 548:	84 60       	ori	r24, 0x04	; 4
 54a:	85 bf       	out	0x35, r24	; 53
						CLEAR_BIT(MCUCR,ISC11);
 54c:	85 b7       	in	r24, 0x35	; 53
 54e:	87 7f       	andi	r24, 0xF7	; 247
 550:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
 552:	81 e0       	ldi	r24, 0x01	; 1
						CLEAR_BIT(MCUCR,ISC11);
						break;
					case INTERRUPT_ANY_LOGICAL_CHANGE:
						SET_BIT(MCUCR,ISC10);
						CLEAR_BIT(MCUCR,ISC11);
						break;
 554:	08 95       	ret
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCR,ISC10);
 556:	85 b7       	in	r24, 0x35	; 53
 558:	8b 7f       	andi	r24, 0xFB	; 251
 55a:	85 bf       	out	0x35, r24	; 53
						SET_BIT(MCUCR,ISC11);
 55c:	85 b7       	in	r24, 0x35	; 53
 55e:	88 60       	ori	r24, 0x08	; 8
 560:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
 562:	81 e0       	ldi	r24, 0x01	; 1
						CLEAR_BIT(MCUCR,ISC11);
						break;
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCR,ISC10);
						SET_BIT(MCUCR,ISC11);
						break;
 564:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC10);
 566:	85 b7       	in	r24, 0x35	; 53
 568:	84 60       	ori	r24, 0x04	; 4
 56a:	85 bf       	out	0x35, r24	; 53
						SET_BIT(MCUCR,ISC11);
 56c:	85 b7       	in	r24, 0x35	; 53
 56e:	88 60       	ori	r24, 0x08	; 8
 570:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
 572:	81 e0       	ldi	r24, 0x01	; 1
						SET_BIT(MCUCR,ISC11);
						break;
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC10);
						SET_BIT(MCUCR,ISC11);
						break;
 574:	08 95       	ret
				}
				break;
			
			case INTERRUPT_EXTERNAL_INT2:
			
				switch(a_edgeType)
 576:	82 30       	cpi	r24, 0x02	; 2
 578:	19 f0       	breq	.+6      	; 0x580 <EXT_INTx_setEdgeType+0xc4>
 57a:	83 30       	cpi	r24, 0x03	; 3
 57c:	31 f0       	breq	.+12     	; 0x58a <EXT_INTx_setEdgeType+0xce>
 57e:	14 c0       	rjmp	.+40     	; 0x5a8 <EXT_INTx_setEdgeType+0xec>
				{
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCSR,ISC2);
 580:	84 b7       	in	r24, 0x34	; 52
 582:	8f 7b       	andi	r24, 0xBF	; 191
 584:	84 bf       	out	0x34, r24	; 52
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
 586:	81 e0       	ldi	r24, 0x01	; 1
			
				switch(a_edgeType)
				{
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCSR,ISC2);
						break;
 588:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCSR,ISC2);
 58a:	84 b7       	in	r24, 0x34	; 52
 58c:	80 64       	ori	r24, 0x40	; 64
 58e:	84 bf       	out	0x34, r24	; 52
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
 590:	81 e0       	ldi	r24, 0x01	; 1
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCSR,ISC2);
						break;
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCSR,ISC2);
						break;
 592:	08 95       	ret
Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
	if(a_interrupt_Id > NUM_OF_EXT_INTx - 1 || a_edgeType > NOT_VALID_EDGE)
	{
		ret = E_NOT_OK;
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	08 95       	ret
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	08 95       	ret
						break;
				}
				break;
			
			default:
				ret = E_NOT_OK;
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC00);
						SET_BIT(MCUCR,ISC01);
						break;
					default:
						ret = E_NOT_OK;
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC10);
						SET_BIT(MCUCR,ISC11);
						break;
					default:
						ret = E_NOT_OK;
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	08 95       	ret
						break;
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCSR,ISC2);
						break;
					default:
						ret = E_NOT_OK;
 5a8:	80 e0       	ldi	r24, 0x00	; 0
				ret = E_NOT_OK;
				break;
		}
	}
	return ret;
}
 5aa:	08 95       	ret

000005ac <EXT_INTx_Init>:

Std_ReturnType EXT_INTx_Init(const Interrupt_Config_t *Interrupt_Config_Ptr )
{
 5ac:	1f 93       	push	r17
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	00 d0       	rcall	.+0      	; 0x5b4 <EXT_INTx_Init+0x8>
 5b4:	cd b7       	in	r28, 0x3d	; 61
 5b6:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_OK;
	if(NULL == Interrupt_Config_Ptr || Interrupt_Config_Ptr->source_id > NUM_OF_EXT_INTx - 1)
 5b8:	00 97       	sbiw	r24, 0x00	; 0
 5ba:	09 f4       	brne	.+2      	; 0x5be <EXT_INTx_Init+0x12>
 5bc:	57 c0       	rjmp	.+174    	; 0x66c <EXT_INTx_Init+0xc0>
 5be:	fc 01       	movw	r30, r24
 5c0:	21 81       	ldd	r18, Z+1	; 0x01
 5c2:	23 30       	cpi	r18, 0x03	; 3
 5c4:	08 f0       	brcs	.+2      	; 0x5c8 <EXT_INTx_Init+0x1c>
 5c6:	54 c0       	rjmp	.+168    	; 0x670 <EXT_INTx_Init+0xc4>
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(Interrupt_Config_Ptr->source_id)
 5c8:	21 30       	cpi	r18, 0x01	; 1
 5ca:	e9 f0       	breq	.+58     	; 0x606 <EXT_INTx_Init+0x5a>
 5cc:	18 f0       	brcs	.+6      	; 0x5d4 <EXT_INTx_Init+0x28>
 5ce:	22 30       	cpi	r18, 0x02	; 2
 5d0:	91 f1       	breq	.+100    	; 0x636 <EXT_INTx_Init+0x8a>
 5d2:	4a c0       	rjmp	.+148    	; 0x668 <EXT_INTx_Init+0xbc>
		{
			case INTERRUPT_EXTERNAL_INT0:
			
				/* Disable the External interrupt */
				EXT_INT0_InterruptDisable();
 5d4:	2b b7       	in	r18, 0x3b	; 59
 5d6:	2f 7b       	andi	r18, 0xBF	; 191
 5d8:	2b bf       	out	0x3b, r18	; 59
				/* Clear Interrupt Flag : External interrupt did not occur */
				EXT_INT0_InterruptFlagClear();
 5da:	2a b7       	in	r18, 0x3a	; 58
 5dc:	20 64       	ori	r18, 0x40	; 64
 5de:	2a bf       	out	0x3a, r18	; 58
				/* Configure External interrupt edge */
				ret = EXT_INTx_setEdgeType(Interrupt_Config_Ptr->edge,INTERRUPT_EXTERNAL_INT0);
 5e0:	60 e0       	ldi	r22, 0x00	; 0
 5e2:	80 81       	ld	r24, Z
 5e4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <EXT_INTx_setEdgeType>
 5e8:	18 2f       	mov	r17, r24
				/* Configure External interrupt I/O pin */
				pin_config_t INT0_PIN={.pin=PIN2,.port=PORTD_INDEX};
 5ea:	83 e0       	ldi	r24, 0x03	; 3
 5ec:	89 83       	std	Y+1, r24	; 0x01
 5ee:	82 e0       	ldi	r24, 0x02	; 2
 5f0:	8a 83       	std	Y+2, r24	; 0x02
				ret |= DIO_pin_direction_intialize(&INT0_PIN,DIO_DIRECTION_INPUT);
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	ce 01       	movw	r24, r28
 5f6:	01 96       	adiw	r24, 0x01	; 1
 5f8:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_pin_direction_intialize>
 5fc:	81 2b       	or	r24, r17
				/* Enable the External interrupt */
				EXT_INT0_InterruptEnable();
 5fe:	9b b7       	in	r25, 0x3b	; 59
 600:	90 64       	ori	r25, 0x40	; 64
 602:	9b bf       	out	0x3b, r25	; 59
				break;
 604:	36 c0       	rjmp	.+108    	; 0x672 <EXT_INTx_Init+0xc6>
				
			case INTERRUPT_EXTERNAL_INT1:
			
				/* Disable the External interrupt */
				EXT_INT1_InterruptDisable();
 606:	2b b7       	in	r18, 0x3b	; 59
 608:	2f 77       	andi	r18, 0x7F	; 127
 60a:	2b bf       	out	0x3b, r18	; 59
				/* Clear Interrupt Flag : External interrupt did not occur */
				EXT_INT1_InterruptFlagClear();
 60c:	2a b7       	in	r18, 0x3a	; 58
 60e:	20 68       	ori	r18, 0x80	; 128
 610:	2a bf       	out	0x3a, r18	; 58
				/* Configure External interrupt edge */
				ret = EXT_INTx_setEdgeType(Interrupt_Config_Ptr->edge,INTERRUPT_EXTERNAL_INT1);
 612:	61 e0       	ldi	r22, 0x01	; 1
 614:	80 81       	ld	r24, Z
 616:	0e 94 5e 02 	call	0x4bc	; 0x4bc <EXT_INTx_setEdgeType>
 61a:	18 2f       	mov	r17, r24
				/* Configure External interrupt I/O pin */
				pin_config_t INT1_PIN={.pin=PIN3,.port=PORTD_INDEX};
 61c:	83 e0       	ldi	r24, 0x03	; 3
 61e:	89 83       	std	Y+1, r24	; 0x01
 620:	8a 83       	std	Y+2, r24	; 0x02
				ret |= DIO_pin_direction_intialize(&INT1_PIN,DIO_DIRECTION_INPUT);
 622:	60 e0       	ldi	r22, 0x00	; 0
 624:	ce 01       	movw	r24, r28
 626:	01 96       	adiw	r24, 0x01	; 1
 628:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_pin_direction_intialize>
 62c:	81 2b       	or	r24, r17
				/* Enable the External interrupt */
				EXT_INT1_InterruptEnable();
 62e:	9b b7       	in	r25, 0x3b	; 59
 630:	90 68       	ori	r25, 0x80	; 128
 632:	9b bf       	out	0x3b, r25	; 59
				break;
 634:	1e c0       	rjmp	.+60     	; 0x672 <EXT_INTx_Init+0xc6>
				
				
			case INTERRUPT_EXTERNAL_INT2:
			
				/* Disable the External interrupt */
				EXT_INT2_InterruptDisable();
 636:	2b b7       	in	r18, 0x3b	; 59
 638:	2f 7d       	andi	r18, 0xDF	; 223
 63a:	2b bf       	out	0x3b, r18	; 59
				/* Clear Interrupt Flag : External interrupt did not occur */
				EXT_INT2_InterruptFlagClear();
 63c:	2a b7       	in	r18, 0x3a	; 58
 63e:	20 62       	ori	r18, 0x20	; 32
 640:	2a bf       	out	0x3a, r18	; 58
				/* Configure External interrupt edge */
				ret = EXT_INTx_setEdgeType(Interrupt_Config_Ptr->edge,INTERRUPT_EXTERNAL_INT2);
 642:	62 e0       	ldi	r22, 0x02	; 2
 644:	80 81       	ld	r24, Z
 646:	0e 94 5e 02 	call	0x4bc	; 0x4bc <EXT_INTx_setEdgeType>
 64a:	18 2f       	mov	r17, r24
				/* Configure External interrupt I/O pin */
				pin_config_t INT2_PIN={.pin=PIN2,.port=PORTB};
 64c:	88 b3       	in	r24, 0x18	; 24
 64e:	89 83       	std	Y+1, r24	; 0x01
 650:	82 e0       	ldi	r24, 0x02	; 2
 652:	8a 83       	std	Y+2, r24	; 0x02
				ret |= DIO_pin_direction_intialize(&INT2_PIN,DIO_DIRECTION_INPUT);
 654:	60 e0       	ldi	r22, 0x00	; 0
 656:	ce 01       	movw	r24, r28
 658:	01 96       	adiw	r24, 0x01	; 1
 65a:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_pin_direction_intialize>
 65e:	81 2b       	or	r24, r17
				/* Enable the External interrupt */
				EXT_INT1_InterruptEnable();
 660:	9b b7       	in	r25, 0x3b	; 59
 662:	90 68       	ori	r25, 0x80	; 128
 664:	9b bf       	out	0x3b, r25	; 59
				break;
 666:	05 c0       	rjmp	.+10     	; 0x672 <EXT_INTx_Init+0xc6>
				
			default:
				ret = E_NOT_OK;
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	03 c0       	rjmp	.+6      	; 0x672 <EXT_INTx_Init+0xc6>
Std_ReturnType EXT_INTx_Init(const Interrupt_Config_t *Interrupt_Config_Ptr )
{
	Std_ReturnType ret = E_OK;
	if(NULL == Interrupt_Config_Ptr || Interrupt_Config_Ptr->source_id > NUM_OF_EXT_INTx - 1)
	{
		ret = E_NOT_OK;
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	01 c0       	rjmp	.+2      	; 0x672 <EXT_INTx_Init+0xc6>
 670:	80 e0       	ldi	r24, 0x00	; 0
				ret = E_NOT_OK;
				break;
		}
	}
	return ret;
}
 672:	0f 90       	pop	r0
 674:	0f 90       	pop	r0
 676:	df 91       	pop	r29
 678:	cf 91       	pop	r28
 67a:	1f 91       	pop	r17
 67c:	08 95       	ret

0000067e <__tablejump2__>:
 67e:	ee 0f       	add	r30, r30
 680:	ff 1f       	adc	r31, r31
 682:	05 90       	lpm	r0, Z+
 684:	f4 91       	lpm	r31, Z
 686:	e0 2d       	mov	r30, r0
 688:	09 94       	ijmp

0000068a <_exit>:
 68a:	f8 94       	cli

0000068c <__stop_program>:
 68c:	ff cf       	rjmp	.-2      	; 0x68c <__stop_program>
