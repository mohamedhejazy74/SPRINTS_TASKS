
LED sequence V3.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000220e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  0000220e  000022a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800092  00800092  000022d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00002340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c5f  00000000  00000000  00002538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c5c  00000000  00000000  00006197  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002692  00000000  00000000  00006df3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000061c  00000000  00000000  00009488  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001023  00000000  00000000  00009aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000219e  00000000  00000000  0000aac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  0000cc65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__ctors_end>
       4:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__vector_1>
       8:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__vector_2>
       c:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <__vector_3>
      10:	0c 94 34 10 	jmp	0x2068	; 0x2068 <__vector_4>
      14:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__vector_5>
      18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      1c:	0c 94 d4 0f 	jmp	0x1fa8	; 0x1fa8 <__vector_7>
      20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      24:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__vector_9>
      28:	0c 94 74 0f 	jmp	0x1ee8	; 0x1ee8 <__vector_10>
      2c:	0c 94 44 0f 	jmp	0x1e88	; 0x1e88 <__vector_11>
      30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      54:	df 00       	.word	0x00df	; ????
      56:	9c 01       	movw	r18, r24
      58:	86 02       	muls	r24, r22
      5a:	a2 03       	fmuls	r18, r18
      5c:	f1 04       	cpc	r15, r1
      5e:	40 06       	cpc	r4, r16
      60:	8f 07       	cpc	r24, r31
      62:	de 08       	sbc	r13, r14
      64:	87 0b       	sbc	r24, r23
      66:	92 0b       	sbc	r25, r18
      68:	9d 0b       	sbc	r25, r29
      6a:	ab 0c       	add	r10, r11
      6c:	a8 0b       	sbc	r26, r24
      6e:	ab 0c       	add	r10, r11
      70:	b3 0b       	sbc	r27, r19
      72:	be 0b       	sbc	r27, r30
      74:	c9 0b       	sbc	r28, r25
      76:	d4 0b       	sbc	r29, r20
      78:	ea 0b       	sbc	r30, r26
      7a:	f5 0b       	sbc	r31, r21
      7c:	00 0c       	add	r0, r0
      7e:	ad 0c       	add	r10, r13
      80:	0b 0c       	add	r0, r11
      82:	ad 0c       	add	r10, r13
      84:	16 0c       	add	r1, r6
      86:	21 0c       	add	r2, r1
      88:	2c 0c       	add	r2, r12
      8a:	37 0c       	add	r3, r7
      8c:	4d 0c       	add	r4, r13
      8e:	58 0c       	add	r5, r8
      90:	63 0c       	add	r6, r3
      92:	6e 0c       	add	r6, r14
      94:	79 0c       	add	r7, r9
      96:	84 0c       	add	r8, r4
      98:	8f 0c       	add	r8, r15
      9a:	9a 0c       	add	r9, r10

0000009c <__ctors_end>:
      9c:	11 24       	eor	r1, r1
      9e:	1f be       	out	0x3f, r1	; 63
      a0:	cf e5       	ldi	r28, 0x5F	; 95
      a2:	d8 e0       	ldi	r29, 0x08	; 8
      a4:	de bf       	out	0x3e, r29	; 62
      a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
      a8:	10 e0       	ldi	r17, 0x00	; 0
      aa:	a0 e6       	ldi	r26, 0x60	; 96
      ac:	b0 e0       	ldi	r27, 0x00	; 0
      ae:	ee e0       	ldi	r30, 0x0E	; 14
      b0:	f2 e2       	ldi	r31, 0x22	; 34
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x10>
      b4:	05 90       	lpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a2 39       	cpi	r26, 0x92	; 146
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0xc>

000000be <__do_clear_bss>:
      be:	20 e0       	ldi	r18, 0x00	; 0
      c0:	a2 e9       	ldi	r26, 0x92	; 146
      c2:	b0 e0       	ldi	r27, 0x00	; 0
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a3 3a       	cpi	r26, 0xA3	; 163
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	0e 94 61 09 	call	0x12c2	; 0x12c2 <main>
      d2:	0c 94 05 11 	jmp	0x220a	; 0x220a <_exit>

000000d6 <__bad_interrupt>:
      d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <UPDATE_ON_OFF_DURATION>:
																		   {BLINK_MODE_THREE_ON,BLINK_MODE_THREE_OFF},
																		   {BLINK_MODE_FOUR_ON ,BLINK_MODE_FOUR_OFF},
																		   {BLINK_MODE_FIVE_ON ,BLINK_MODE_FIVE_OFF} };*/
volatile void UPDATE_ON_OFF_DURATION(void)
{
	u16_g_100_ms_cnt++;
      da:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
      de:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
      e2:	01 96       	adiw	r24, 0x01	; 1
      e4:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
      e8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <u16_g_100_ms_cnt>
	/*the life time of the blink cycle is 1000ms*/
	if(u16_g_100_ms_cnt >= BLINK_ON_OFF_MAX_DURATION)
      ec:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
      f0:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
      f4:	0a 97       	sbiw	r24, 0x0a	; 10
      f6:	20 f0       	brcs	.+8      	; 0x100 <UPDATE_ON_OFF_DURATION+0x26>
	{
		/*start count from beginning*/
		u16_g_100_ms_cnt = 0;
      f8:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
      fc:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <u16_g_100_ms_cnt>
     100:	08 95       	ret

00000102 <LEDS_SEQ_UPDATE>:
		/*DO NOTHING*/
	}
}
volatile void LEDS_SEQ_UPDATE(void)
{
	u16_g_100_ms_cnt = 0;
     102:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     106:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <u16_g_100_ms_cnt>
	u8_g_pressCnt++;
     10a:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     10e:	8f 5f       	subi	r24, 0xFF	; 255
     110:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <u8_g_pressCnt>
     114:	08 95       	ret

00000116 <BLINK_MODE_UPDATE>:
}
volatile void BLINK_MODE_UPDATE(void)
{
	u16_g_100_ms_cnt = 0;
     116:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     11a:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <u16_g_100_ms_cnt>
	u8_g_blinkMode_update++;
     11e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     122:	8f 5f       	subi	r24, 0xFF	; 255
     124:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
     128:	08 95       	ret

0000012a <APP_init>:
}

Std_ReturnType APP_init(void)
{
	Std_ReturnType l_ret = E_OK;
	GLOBAL_InterruptEnable();
     12a:	8f b7       	in	r24, 0x3f	; 63
     12c:	80 68       	ori	r24, 0x80	; 128
     12e:	8f bf       	out	0x3f, r24	; 63
	l_ret  = LED_initialize(&s_led0);
     130:	8f e7       	ldi	r24, 0x7F	; 127
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 12 09 	call	0x1224	; 0x1224 <LED_initialize>
	l_ret |= LED_initialize(&s_led1);
     138:	8c e7       	ldi	r24, 0x7C	; 124
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	0e 94 12 09 	call	0x1224	; 0x1224 <LED_initialize>
	l_ret |= LED_initialize(&s_led2);
     140:	89 e7       	ldi	r24, 0x79	; 121
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	0e 94 12 09 	call	0x1224	; 0x1224 <LED_initialize>
	l_ret |= LED_initialize(&s_led3);
     148:	86 e7       	ldi	r24, 0x76	; 118
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 12 09 	call	0x1224	; 0x1224 <LED_initialize>
	l_ret |= BTN_init(&s_btn0);
     150:	82 e7       	ldi	r24, 0x72	; 114
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 f6 08 	call	0x11ec	; 0x11ec <BTN_init>
	l_ret |= BTN_init(&s_btn1);
     158:	8e e6       	ldi	r24, 0x6E	; 110
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	0e 94 f6 08 	call	0x11ec	; 0x11ec <BTN_init>
	l_ret |= EXT_INTx_Init(&s_INT0);
     160:	8c e6       	ldi	r24, 0x6C	; 108
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	0e 94 05 0b 	call	0x160a	; 0x160a <EXT_INTx_Init>
	l_ret |= EXT_INTx_Init(&s_INT1);
     168:	8a e6       	ldi	r24, 0x6A	; 106
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	0e 94 05 0b 	call	0x160a	; 0x160a <EXT_INTx_Init>
	/*initiate the timer */
	l_ret = TIMERx_init(&st_g_timer);
     170:	80 e6       	ldi	r24, 0x60	; 96
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	0e 94 86 10 	call	0x210c	; 0x210c <TIMERx_init>
	return l_ret;
}
     178:	08 95       	ret

0000017a <APP_start_program>:

Std_ReturnType APP_start_program(void)
{
     17a:	cf 93       	push	r28
	Std_ReturnType l_ret = E_OK;
	l_ret = EXT_INTx_setCallBack(&LEDS_SEQ_UPDATE,INTERRUPT_EXTERNAL_INT0);
     17c:	60 e0       	ldi	r22, 0x00	; 0
     17e:	81 e8       	ldi	r24, 0x81	; 129
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <EXT_INTx_setCallBack>
	l_ret = EXT_INTx_setCallBack(&BLINK_MODE_UPDATE,INTERRUPT_EXTERNAL_INT1);
     186:	61 e0       	ldi	r22, 0x01	; 1
     188:	8b e8       	ldi	r24, 0x8B	; 139
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <EXT_INTx_setCallBack>
     190:	c8 2f       	mov	r28, r24
	/*set call-back function that increment the timer tick */
	l_ret |= TIMERx_setCallBack(&UPDATE_ON_OFF_DURATION , st_g_timer.timer_type);
     192:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     196:	8d e6       	ldi	r24, 0x6D	; 109
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 64 10 	call	0x20c8	; 0x20c8 <TIMERx_setCallBack>
     19e:	c8 2b       	or	r28, r24
		switch(u8_g_pressCnt)
     1a0:	e0 91 93 00 	lds	r30, 0x0093	; 0x800093 <u8_g_pressCnt>
     1a4:	8e 2f       	mov	r24, r30
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	fc 01       	movw	r30, r24
     1aa:	31 97       	sbiw	r30, 0x01	; 1
     1ac:	e8 30       	cpi	r30, 0x08	; 8
     1ae:	f1 05       	cpc	r31, r1
     1b0:	10 f0       	brcs	.+4      	; 0x1b6 <APP_start_program+0x3c>
     1b2:	0c 94 f3 08 	jmp	0x11e6	; 0x11e6 <__stack+0x987>
     1b6:	e6 5d       	subi	r30, 0xD6	; 214
     1b8:	ff 4f       	sbci	r31, 0xFF	; 255
     1ba:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__tablejump2__>
		{
			case FIRST_STATE:
				/*start the timer with the first press, will fire an interrupt on compare match with 100ms */
				l_ret = TIMERx_start(&st_g_timer);
     1be:	80 e6       	ldi	r24, 0x60	; 96
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <TIMERx_start>
     1c6:	c8 2f       	mov	r28, r24
				switch(u8_g_blinkMode_update)
     1c8:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     1cc:	82 30       	cpi	r24, 0x02	; 2
     1ce:	09 f4       	brne	.+2      	; 0x1d2 <APP_start_program+0x58>
     1d0:	66 c0       	rjmp	.+204    	; 0x29e <APP_start_program+0x124>
     1d2:	30 f4       	brcc	.+12     	; 0x1e0 <APP_start_program+0x66>
     1d4:	88 23       	and	r24, r24
     1d6:	11 f1       	breq	.+68     	; 0x21c <APP_start_program+0xa2>
     1d8:	81 30       	cpi	r24, 0x01	; 1
     1da:	09 f4       	brne	.+2      	; 0x1de <APP_start_program+0x64>
     1dc:	3f c0       	rjmp	.+126    	; 0x25c <APP_start_program+0xe2>
     1de:	f6 c7       	rjmp	.+4076   	; 0x11cc <__stack+0x96d>
     1e0:	83 30       	cpi	r24, 0x03	; 3
     1e2:	09 f4       	brne	.+2      	; 0x1e6 <APP_start_program+0x6c>
     1e4:	7d c0       	rjmp	.+250    	; 0x2e0 <APP_start_program+0x166>
     1e6:	84 30       	cpi	r24, 0x04	; 4
     1e8:	09 f4       	brne	.+2      	; 0x1ec <APP_start_program+0x72>
     1ea:	9b c0       	rjmp	.+310    	; 0x322 <APP_start_program+0x1a8>
     1ec:	ef c7       	rjmp	.+4062   	; 0x11cc <__stack+0x96d>
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(FIRST_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_ONE_ON)
     1ee:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     1f2:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     1f6:	89 2b       	or	r24, r25
     1f8:	31 f4       	brne	.+12     	; 0x206 <APP_start_program+0x8c>
							{
									/*blink led0 with the current mode*/
								    l_ret |= LED_turn_on(&s_led0);
     1fa:	8f e7       	ldi	r24, 0x7F	; 127
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     202:	c8 2b       	or	r28, r24
     204:	0b c0       	rjmp	.+22     	; 0x21c <APP_start_program+0xa2>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_ONE_ON)
     206:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     20a:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     20e:	89 2b       	or	r24, r25
     210:	29 f0       	breq	.+10     	; 0x21c <APP_start_program+0xa2>
							{		/*blink led0 with the current mode*/
									l_ret |= LED_turn_off(&s_led0);
     212:	8f e7       	ldi	r24, 0x7F	; 127
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     21a:	c8 2b       	or	r28, r24
				/*start the timer with the first press, will fire an interrupt on compare match with 100ms */
				l_ret = TIMERx_start(&st_g_timer);
				switch(u8_g_blinkMode_update)
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(FIRST_STATE==u8_g_pressCnt))
     21c:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     220:	81 11       	cpse	r24, r1
     222:	e1 c7       	rjmp	.+4034   	; 0x11e6 <__stack+0x987>
     224:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     228:	81 30       	cpi	r24, 0x01	; 1
     22a:	09 f3       	breq	.-62     	; 0x1ee <APP_start_program+0x74>
     22c:	dc c7       	rjmp	.+4024   	; 0x11e6 <__stack+0x987>
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(FIRST_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_TWO_ON)
     22e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     232:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     236:	02 97       	sbiw	r24, 0x02	; 2
     238:	30 f4       	brcc	.+12     	; 0x246 <APP_start_program+0xcc>
							{
								/*blink led0 with the current mode*/
								l_ret |= LED_turn_on(&s_led0);
     23a:	8f e7       	ldi	r24, 0x7F	; 127
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     242:	c8 2b       	or	r28, r24
     244:	0b c0       	rjmp	.+22     	; 0x25c <APP_start_program+0xe2>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_TWO_ON)
     246:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     24a:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     24e:	02 97       	sbiw	r24, 0x02	; 2
     250:	28 f0       	brcs	.+10     	; 0x25c <APP_start_program+0xe2>
							{		/*blink led0 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     252:	8f e7       	ldi	r24, 0x7F	; 127
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     25a:	c8 2b       	or	r28, r24
							}
						}
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(FIRST_STATE==u8_g_pressCnt))
     25c:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     260:	81 30       	cpi	r24, 0x01	; 1
     262:	09 f0       	breq	.+2      	; 0x266 <APP_start_program+0xec>
     264:	c0 c7       	rjmp	.+3968   	; 0x11e6 <__stack+0x987>
     266:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     26a:	81 30       	cpi	r24, 0x01	; 1
     26c:	01 f3       	breq	.-64     	; 0x22e <APP_start_program+0xb4>
     26e:	bb c7       	rjmp	.+3958   	; 0x11e6 <__stack+0x987>
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(FIRST_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_THREE_ON)
     270:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     274:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     278:	03 97       	sbiw	r24, 0x03	; 3
     27a:	30 f4       	brcc	.+12     	; 0x288 <APP_start_program+0x10e>
							{
								/*blink led0 with the current mode*/
								l_ret |= LED_turn_on(&s_led0);
     27c:	8f e7       	ldi	r24, 0x7F	; 127
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     284:	c8 2b       	or	r28, r24
     286:	0b c0       	rjmp	.+22     	; 0x29e <APP_start_program+0x124>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_THREE_ON)
     288:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     28c:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     290:	03 97       	sbiw	r24, 0x03	; 3
     292:	28 f0       	brcs	.+10     	; 0x29e <APP_start_program+0x124>
							{		/*blink led0 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     294:	8f e7       	ldi	r24, 0x7F	; 127
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     29c:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(FIRST_STATE==u8_g_pressCnt))
     29e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     2a2:	82 30       	cpi	r24, 0x02	; 2
     2a4:	09 f0       	breq	.+2      	; 0x2a8 <APP_start_program+0x12e>
     2a6:	9f c7       	rjmp	.+3902   	; 0x11e6 <__stack+0x987>
     2a8:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     2ac:	81 30       	cpi	r24, 0x01	; 1
     2ae:	01 f3       	breq	.-64     	; 0x270 <APP_start_program+0xf6>
     2b0:	9a c7       	rjmp	.+3892   	; 0x11e6 <__stack+0x987>
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(FIRST_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FOUR_ON)
     2b2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     2b6:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     2ba:	05 97       	sbiw	r24, 0x05	; 5
     2bc:	30 f4       	brcc	.+12     	; 0x2ca <APP_start_program+0x150>
							{
								/*blink led0 with the current mode*/
								l_ret |= LED_turn_on(&s_led0);
     2be:	8f e7       	ldi	r24, 0x7F	; 127
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     2c6:	c8 2b       	or	r28, r24
     2c8:	0b c0       	rjmp	.+22     	; 0x2e0 <APP_start_program+0x166>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FOUR_ON)
     2ca:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     2ce:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     2d2:	05 97       	sbiw	r24, 0x05	; 5
     2d4:	28 f0       	brcs	.+10     	; 0x2e0 <APP_start_program+0x166>
							{		/*blink led0 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     2d6:	8f e7       	ldi	r24, 0x7F	; 127
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     2de:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(FIRST_STATE==u8_g_pressCnt))
     2e0:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     2e4:	83 30       	cpi	r24, 0x03	; 3
     2e6:	09 f0       	breq	.+2      	; 0x2ea <APP_start_program+0x170>
     2e8:	7e c7       	rjmp	.+3836   	; 0x11e6 <__stack+0x987>
     2ea:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     2ee:	81 30       	cpi	r24, 0x01	; 1
     2f0:	01 f3       	breq	.-64     	; 0x2b2 <APP_start_program+0x138>
     2f2:	79 c7       	rjmp	.+3826   	; 0x11e6 <__stack+0x987>
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(FIRST_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FIVE_ON)
     2f4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     2f8:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     2fc:	08 97       	sbiw	r24, 0x08	; 8
     2fe:	30 f4       	brcc	.+12     	; 0x30c <APP_start_program+0x192>
							{
								/*blink led0 with the current mode*/
								l_ret |= LED_turn_on(&s_led0);
     300:	8f e7       	ldi	r24, 0x7F	; 127
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     308:	c8 2b       	or	r28, r24
     30a:	0b c0       	rjmp	.+22     	; 0x322 <APP_start_program+0x1a8>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FIVE_ON)
     30c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     310:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     314:	08 97       	sbiw	r24, 0x08	; 8
     316:	28 f0       	brcs	.+10     	; 0x322 <APP_start_program+0x1a8>
							{		/*blink led0 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     318:	8f e7       	ldi	r24, 0x7F	; 127
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     320:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(FIRST_STATE==u8_g_pressCnt))
     322:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     326:	84 30       	cpi	r24, 0x04	; 4
     328:	21 f4       	brne	.+8      	; 0x332 <APP_start_program+0x1b8>
     32a:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     32e:	81 30       	cpi	r24, 0x01	; 1
     330:	09 f3       	breq	.-62     	; 0x2f4 <APP_start_program+0x17a>
							else
							{
								/*DO NOTHING*/
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
     332:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__data_end>
						break;
     336:	57 c7       	rjmp	.+3758   	; 0x11e6 <__stack+0x987>
				}
				break;	

			case SECOND_STATE:
			
				switch(u8_g_blinkMode_update)
     338:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     33c:	82 30       	cpi	r24, 0x02	; 2
     33e:	09 f4       	brne	.+2      	; 0x342 <APP_start_program+0x1c8>
     340:	84 c0       	rjmp	.+264    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     342:	30 f4       	brcc	.+12     	; 0x350 <APP_start_program+0x1d6>
     344:	88 23       	and	r24, r24
     346:	61 f1       	breq	.+88     	; 0x3a0 <APP_start_program+0x226>
     348:	81 30       	cpi	r24, 0x01	; 1
     34a:	09 f4       	brne	.+2      	; 0x34e <APP_start_program+0x1d4>
     34c:	53 c0       	rjmp	.+166    	; 0x3f4 <APP_start_program+0x27a>
     34e:	40 c7       	rjmp	.+3712   	; 0x11d0 <__stack+0x971>
     350:	83 30       	cpi	r24, 0x03	; 3
     352:	09 f4       	brne	.+2      	; 0x356 <APP_start_program+0x1dc>
     354:	a5 c0       	rjmp	.+330    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
     356:	84 30       	cpi	r24, 0x04	; 4
     358:	09 f4       	brne	.+2      	; 0x35c <APP_start_program+0x1e2>
     35a:	cd c0       	rjmp	.+410    	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
     35c:	39 c7       	rjmp	.+3698   	; 0x11d0 <__stack+0x971>
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(SECOND_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_ONE_ON)
     35e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     362:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     366:	89 2b       	or	r24, r25
     368:	59 f4       	brne	.+22     	; 0x380 <APP_start_program+0x206>
							{
									/*blink led0 with the current mode*/
								    l_ret |= LED_turn_on(&s_led0);
     36a:	8f e7       	ldi	r24, 0x7F	; 127
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     372:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_on(&s_led1);
     374:	8c e7       	ldi	r24, 0x7C	; 124
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     37c:	c8 2b       	or	r28, r24
     37e:	10 c0       	rjmp	.+32     	; 0x3a0 <APP_start_program+0x226>

									
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_ONE_ON)
     380:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     384:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     388:	89 2b       	or	r24, r25
     38a:	51 f0       	breq	.+20     	; 0x3a0 <APP_start_program+0x226>
							{		/*blink led0 with the current mode*/
									l_ret |= LED_turn_off(&s_led0);
     38c:	8f e7       	ldi	r24, 0x7F	; 127
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     394:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led1);
     396:	8c e7       	ldi	r24, 0x7C	; 124
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     39e:	c8 2b       	or	r28, r24
			case SECOND_STATE:
			
				switch(u8_g_blinkMode_update)
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(SECOND_STATE==u8_g_pressCnt))
     3a0:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     3a4:	81 11       	cpse	r24, r1
     3a6:	1f c7       	rjmp	.+3646   	; 0x11e6 <__stack+0x987>
     3a8:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     3ac:	82 30       	cpi	r24, 0x02	; 2
     3ae:	b9 f2       	breq	.-82     	; 0x35e <APP_start_program+0x1e4>
     3b0:	1a c7       	rjmp	.+3636   	; 0x11e6 <__stack+0x987>
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(SECOND_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_TWO_ON)
     3b2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     3b6:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     3ba:	02 97       	sbiw	r24, 0x02	; 2
     3bc:	58 f4       	brcc	.+22     	; 0x3d4 <APP_start_program+0x25a>
							{
								/*blink led0 with the current mode*/
								 l_ret |= LED_turn_on(&s_led0);
     3be:	8f e7       	ldi	r24, 0x7F	; 127
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     3c6:	c8 2b       	or	r28, r24
								 l_ret |= LED_turn_on(&s_led1);
     3c8:	8c e7       	ldi	r24, 0x7C	; 124
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     3d0:	c8 2b       	or	r28, r24
     3d2:	10 c0       	rjmp	.+32     	; 0x3f4 <APP_start_program+0x27a>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_TWO_ON)
     3d4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     3d8:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     3dc:	02 97       	sbiw	r24, 0x02	; 2
     3de:	50 f0       	brcs	.+20     	; 0x3f4 <APP_start_program+0x27a>
							{	
								/*blink led0 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     3e0:	8f e7       	ldi	r24, 0x7F	; 127
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     3e8:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     3ea:	8c e7       	ldi	r24, 0x7C	; 124
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     3f2:	c8 2b       	or	r28, r24
							}
						}
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(SECOND_STATE==u8_g_pressCnt))
     3f4:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     3f8:	81 30       	cpi	r24, 0x01	; 1
     3fa:	09 f0       	breq	.+2      	; 0x3fe <APP_start_program+0x284>
     3fc:	f4 c6       	rjmp	.+3560   	; 0x11e6 <__stack+0x987>
     3fe:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     402:	82 30       	cpi	r24, 0x02	; 2
     404:	b1 f2       	breq	.-84     	; 0x3b2 <APP_start_program+0x238>
     406:	ef c6       	rjmp	.+3550   	; 0x11e6 <__stack+0x987>
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(SECOND_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_THREE_ON)
     408:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     40c:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     410:	03 97       	sbiw	r24, 0x03	; 3
     412:	58 f4       	brcc	.+22     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
							{
								/*blink led0 with the current mode*/
								 l_ret |= LED_turn_on(&s_led0);
     414:	8f e7       	ldi	r24, 0x7F	; 127
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     41c:	c8 2b       	or	r28, r24
								 l_ret |= LED_turn_on(&s_led1);
     41e:	8c e7       	ldi	r24, 0x7C	; 124
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     426:	c8 2b       	or	r28, r24
     428:	10 c0       	rjmp	.+32     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_THREE_ON)
     42a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     42e:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     432:	03 97       	sbiw	r24, 0x03	; 3
     434:	50 f0       	brcs	.+20     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
							{	
								/*blink led0 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     436:	8f e7       	ldi	r24, 0x7F	; 127
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     43e:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     440:	8c e7       	ldi	r24, 0x7C	; 124
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     448:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(SECOND_STATE==u8_g_pressCnt))
     44a:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     44e:	82 30       	cpi	r24, 0x02	; 2
     450:	09 f0       	breq	.+2      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     452:	c9 c6       	rjmp	.+3474   	; 0x11e6 <__stack+0x987>
     454:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     458:	82 30       	cpi	r24, 0x02	; 2
     45a:	b1 f2       	breq	.-84     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     45c:	c4 c6       	rjmp	.+3464   	; 0x11e6 <__stack+0x987>
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(SECOND_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FOUR_ON)
     45e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     462:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     466:	05 97       	sbiw	r24, 0x05	; 5
     468:	58 f4       	brcc	.+22     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
							{
								/*blink led0 with the current mode*/
								 l_ret |= LED_turn_on(&s_led0);
     46a:	8f e7       	ldi	r24, 0x7F	; 127
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     472:	c8 2b       	or	r28, r24
								 l_ret |= LED_turn_on(&s_led1);
     474:	8c e7       	ldi	r24, 0x7C	; 124
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     47c:	c8 2b       	or	r28, r24
     47e:	10 c0       	rjmp	.+32     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FOUR_ON)
     480:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     484:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     488:	05 97       	sbiw	r24, 0x05	; 5
     48a:	50 f0       	brcs	.+20     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
							{	
								/*blink led0 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     48c:	8f e7       	ldi	r24, 0x7F	; 127
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     494:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     496:	8c e7       	ldi	r24, 0x7C	; 124
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     49e:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(SECOND_STATE==u8_g_pressCnt))
     4a0:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     4a4:	83 30       	cpi	r24, 0x03	; 3
     4a6:	09 f0       	breq	.+2      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
     4a8:	9e c6       	rjmp	.+3388   	; 0x11e6 <__stack+0x987>
     4aa:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     4ae:	82 30       	cpi	r24, 0x02	; 2
     4b0:	b1 f2       	breq	.-84     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
     4b2:	99 c6       	rjmp	.+3378   	; 0x11e6 <__stack+0x987>
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(SECOND_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FIVE_ON)
     4b4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     4b8:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     4bc:	08 97       	sbiw	r24, 0x08	; 8
     4be:	58 f4       	brcc	.+22     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
							{
								/*blink led0 with the current mode*/
								 l_ret |= LED_turn_on(&s_led0);
     4c0:	8f e7       	ldi	r24, 0x7F	; 127
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     4c8:	c8 2b       	or	r28, r24
								 l_ret |= LED_turn_on(&s_led1);
     4ca:	8c e7       	ldi	r24, 0x7C	; 124
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     4d2:	c8 2b       	or	r28, r24
     4d4:	10 c0       	rjmp	.+32     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FIVE_ON)
     4d6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     4da:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     4de:	08 97       	sbiw	r24, 0x08	; 8
     4e0:	50 f0       	brcs	.+20     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
							{	
								/*blink led0 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     4e2:	8f e7       	ldi	r24, 0x7F	; 127
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     4ea:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     4ec:	8c e7       	ldi	r24, 0x7C	; 124
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     4f4:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(SECOND_STATE==u8_g_pressCnt))
     4f6:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     4fa:	84 30       	cpi	r24, 0x04	; 4
     4fc:	21 f4       	brne	.+8      	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
     4fe:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     502:	82 30       	cpi	r24, 0x02	; 2
     504:	b9 f2       	breq	.-82     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
							else
							{
								/*DO NOTHING*/
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
     506:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__data_end>
						break;
     50a:	6d c6       	rjmp	.+3290   	; 0x11e6 <__stack+0x987>
						break;
				}
				break;
				
			case THIRD_STATE:
				switch(u8_g_blinkMode_update)
     50c:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     510:	82 30       	cpi	r24, 0x02	; 2
     512:	09 f4       	brne	.+2      	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
     514:	a2 c0       	rjmp	.+324    	; 0x65a <__EEPROM_REGION_LENGTH__+0x25a>
     516:	30 f4       	brcc	.+12     	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
     518:	88 23       	and	r24, r24
     51a:	b1 f1       	breq	.+108    	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
     51c:	81 30       	cpi	r24, 0x01	; 1
     51e:	09 f4       	brne	.+2      	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
     520:	67 c0       	rjmp	.+206    	; 0x5f0 <__EEPROM_REGION_LENGTH__+0x1f0>
     522:	58 c6       	rjmp	.+3248   	; 0x11d4 <__stack+0x975>
     524:	83 30       	cpi	r24, 0x03	; 3
     526:	09 f4       	brne	.+2      	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
     528:	cd c0       	rjmp	.+410    	; 0x6c4 <__EEPROM_REGION_LENGTH__+0x2c4>
     52a:	84 30       	cpi	r24, 0x04	; 4
     52c:	09 f4       	brne	.+2      	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
     52e:	ff c0       	rjmp	.+510    	; 0x72e <__EEPROM_REGION_LENGTH__+0x32e>
     530:	51 c6       	rjmp	.+3234   	; 0x11d4 <__stack+0x975>
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(THIRD_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_ONE_ON)
     532:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     536:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     53a:	89 2b       	or	r24, r25
     53c:	81 f4       	brne	.+32     	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
							{
									/*blink led0,led1,led2 with the current mode*/
								    l_ret |= LED_turn_on(&s_led0);
     53e:	8f e7       	ldi	r24, 0x7F	; 127
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     546:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_on(&s_led1);
     548:	8c e7       	ldi	r24, 0x7C	; 124
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     550:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_on(&s_led2);
     552:	89 e7       	ldi	r24, 0x79	; 121
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     55a:	c8 2b       	or	r28, r24
     55c:	15 c0       	rjmp	.+42     	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_ONE_ON)
     55e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     562:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     566:	89 2b       	or	r24, r25
     568:	79 f0       	breq	.+30     	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
							{		
									/*blink led0,led1,led2 with the current mode*/
									l_ret |= LED_turn_off(&s_led0);
     56a:	8f e7       	ldi	r24, 0x7F	; 127
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     572:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led1);
     574:	8c e7       	ldi	r24, 0x7C	; 124
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     57c:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led2);
     57e:	89 e7       	ldi	r24, 0x79	; 121
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     586:	c8 2b       	or	r28, r24
				
			case THIRD_STATE:
				switch(u8_g_blinkMode_update)
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(THIRD_STATE==u8_g_pressCnt))
     588:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     58c:	81 11       	cpse	r24, r1
     58e:	2b c6       	rjmp	.+3158   	; 0x11e6 <__stack+0x987>
     590:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     594:	83 30       	cpi	r24, 0x03	; 3
     596:	69 f2       	breq	.-102    	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
     598:	26 c6       	rjmp	.+3148   	; 0x11e6 <__stack+0x987>
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(THIRD_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_TWO_ON)
     59a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     59e:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     5a2:	02 97       	sbiw	r24, 0x02	; 2
     5a4:	80 f4       	brcc	.+32     	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
							{
								/*blink led0,led1,led2 with the current mode*/
								l_ret |= LED_turn_on(&s_led0);
     5a6:	8f e7       	ldi	r24, 0x7F	; 127
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     5ae:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led1);
     5b0:	8c e7       	ldi	r24, 0x7C	; 124
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     5b8:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     5ba:	89 e7       	ldi	r24, 0x79	; 121
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     5c2:	c8 2b       	or	r28, r24
     5c4:	15 c0       	rjmp	.+42     	; 0x5f0 <__EEPROM_REGION_LENGTH__+0x1f0>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_TWO_ON)
     5c6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     5ca:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     5ce:	02 97       	sbiw	r24, 0x02	; 2
     5d0:	78 f0       	brcs	.+30     	; 0x5f0 <__EEPROM_REGION_LENGTH__+0x1f0>
							{								
								/*blink led0,led1,led2 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     5d2:	8f e7       	ldi	r24, 0x7F	; 127
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     5da:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     5dc:	8c e7       	ldi	r24, 0x7C	; 124
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     5e4:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     5e6:	89 e7       	ldi	r24, 0x79	; 121
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     5ee:	c8 2b       	or	r28, r24
							}
						}
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(THIRD_STATE==u8_g_pressCnt))
     5f0:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     5f4:	81 30       	cpi	r24, 0x01	; 1
     5f6:	09 f0       	breq	.+2      	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
     5f8:	f6 c5       	rjmp	.+3052   	; 0x11e6 <__stack+0x987>
     5fa:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     5fe:	83 30       	cpi	r24, 0x03	; 3
     600:	61 f2       	breq	.-104    	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
     602:	f1 c5       	rjmp	.+3042   	; 0x11e6 <__stack+0x987>
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(THIRD_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_THREE_ON)
     604:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     608:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     60c:	03 97       	sbiw	r24, 0x03	; 3
     60e:	80 f4       	brcc	.+32     	; 0x630 <__EEPROM_REGION_LENGTH__+0x230>
							{
								/*blink led0,led1,led2 with the current mode*/
								l_ret |= LED_turn_on(&s_led0);
     610:	8f e7       	ldi	r24, 0x7F	; 127
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     618:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led1);
     61a:	8c e7       	ldi	r24, 0x7C	; 124
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     622:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     624:	89 e7       	ldi	r24, 0x79	; 121
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     62c:	c8 2b       	or	r28, r24
     62e:	15 c0       	rjmp	.+42     	; 0x65a <__EEPROM_REGION_LENGTH__+0x25a>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_THREE_ON)
     630:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     634:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     638:	03 97       	sbiw	r24, 0x03	; 3
     63a:	78 f0       	brcs	.+30     	; 0x65a <__EEPROM_REGION_LENGTH__+0x25a>
							{	
								/*blink led0,led1,led2 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     63c:	8f e7       	ldi	r24, 0x7F	; 127
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     644:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     646:	8c e7       	ldi	r24, 0x7C	; 124
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     64e:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     650:	89 e7       	ldi	r24, 0x79	; 121
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     658:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(THIRD_STATE==u8_g_pressCnt))
     65a:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     65e:	82 30       	cpi	r24, 0x02	; 2
     660:	09 f0       	breq	.+2      	; 0x664 <__EEPROM_REGION_LENGTH__+0x264>
     662:	c1 c5       	rjmp	.+2946   	; 0x11e6 <__stack+0x987>
     664:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     668:	83 30       	cpi	r24, 0x03	; 3
     66a:	61 f2       	breq	.-104    	; 0x604 <__EEPROM_REGION_LENGTH__+0x204>
     66c:	bc c5       	rjmp	.+2936   	; 0x11e6 <__stack+0x987>
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(THIRD_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FOUR_ON)
     66e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     672:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     676:	05 97       	sbiw	r24, 0x05	; 5
     678:	80 f4       	brcc	.+32     	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
							{
								/*blink led0,led1,led2 with the current mode*/
								l_ret |= LED_turn_on(&s_led0);
     67a:	8f e7       	ldi	r24, 0x7F	; 127
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     682:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led1);
     684:	8c e7       	ldi	r24, 0x7C	; 124
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     68c:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     68e:	89 e7       	ldi	r24, 0x79	; 121
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     696:	c8 2b       	or	r28, r24
     698:	15 c0       	rjmp	.+42     	; 0x6c4 <__EEPROM_REGION_LENGTH__+0x2c4>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FOUR_ON)
     69a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     69e:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     6a2:	05 97       	sbiw	r24, 0x05	; 5
     6a4:	78 f0       	brcs	.+30     	; 0x6c4 <__EEPROM_REGION_LENGTH__+0x2c4>
							{	
								/*blink led0,led1,led2 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     6a6:	8f e7       	ldi	r24, 0x7F	; 127
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     6ae:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     6b0:	8c e7       	ldi	r24, 0x7C	; 124
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     6b8:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     6ba:	89 e7       	ldi	r24, 0x79	; 121
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     6c2:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(THIRD_STATE==u8_g_pressCnt))
     6c4:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     6c8:	83 30       	cpi	r24, 0x03	; 3
     6ca:	09 f0       	breq	.+2      	; 0x6ce <__EEPROM_REGION_LENGTH__+0x2ce>
     6cc:	8c c5       	rjmp	.+2840   	; 0x11e6 <__stack+0x987>
     6ce:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     6d2:	83 30       	cpi	r24, 0x03	; 3
     6d4:	61 f2       	breq	.-104    	; 0x66e <__EEPROM_REGION_LENGTH__+0x26e>
     6d6:	87 c5       	rjmp	.+2830   	; 0x11e6 <__stack+0x987>
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(THIRD_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FIVE_ON)
     6d8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     6dc:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     6e0:	08 97       	sbiw	r24, 0x08	; 8
     6e2:	80 f4       	brcc	.+32     	; 0x704 <__EEPROM_REGION_LENGTH__+0x304>
							{
								/*blink led0,led1,led2 with the current mode*/
								l_ret |= LED_turn_on(&s_led0);
     6e4:	8f e7       	ldi	r24, 0x7F	; 127
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     6ec:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led1);
     6ee:	8c e7       	ldi	r24, 0x7C	; 124
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     6f6:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     6f8:	89 e7       	ldi	r24, 0x79	; 121
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     700:	c8 2b       	or	r28, r24
     702:	15 c0       	rjmp	.+42     	; 0x72e <__EEPROM_REGION_LENGTH__+0x32e>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FIVE_ON)
     704:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     708:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     70c:	08 97       	sbiw	r24, 0x08	; 8
     70e:	78 f0       	brcs	.+30     	; 0x72e <__EEPROM_REGION_LENGTH__+0x32e>
							{	
								/*blink led0,led1,led2 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     710:	8f e7       	ldi	r24, 0x7F	; 127
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     718:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     71a:	8c e7       	ldi	r24, 0x7C	; 124
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     722:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     724:	89 e7       	ldi	r24, 0x79	; 121
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     72c:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(THIRD_STATE==u8_g_pressCnt))
     72e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     732:	84 30       	cpi	r24, 0x04	; 4
     734:	21 f4       	brne	.+8      	; 0x73e <__EEPROM_REGION_LENGTH__+0x33e>
     736:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     73a:	83 30       	cpi	r24, 0x03	; 3
     73c:	69 f2       	breq	.-102    	; 0x6d8 <__EEPROM_REGION_LENGTH__+0x2d8>
							else
							{
								/*DO NOTHING*/
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
     73e:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__data_end>
						break;
     742:	51 c5       	rjmp	.+2722   	; 0x11e6 <__stack+0x987>
						break;
				}
				break;
				
			case FOURTH_STATE:
				switch(u8_g_blinkMode_update)
     744:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     748:	82 30       	cpi	r24, 0x02	; 2
     74a:	09 f4       	brne	.+2      	; 0x74e <__EEPROM_REGION_LENGTH__+0x34e>
     74c:	c1 c0       	rjmp	.+386    	; 0x8d0 <__stack+0x71>
     74e:	38 f4       	brcc	.+14     	; 0x75e <__EEPROM_REGION_LENGTH__+0x35e>
     750:	88 23       	and	r24, r24
     752:	09 f4       	brne	.+2      	; 0x756 <__EEPROM_REGION_LENGTH__+0x356>
     754:	40 c0       	rjmp	.+128    	; 0x7d6 <__EEPROM_REGION_LENGTH__+0x3d6>
     756:	81 30       	cpi	r24, 0x01	; 1
     758:	09 f4       	brne	.+2      	; 0x75c <__EEPROM_REGION_LENGTH__+0x35c>
     75a:	7b c0       	rjmp	.+246    	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     75c:	3d c5       	rjmp	.+2682   	; 0x11d8 <__stack+0x979>
     75e:	83 30       	cpi	r24, 0x03	; 3
     760:	09 f4       	brne	.+2      	; 0x764 <__EEPROM_REGION_LENGTH__+0x364>
     762:	f5 c0       	rjmp	.+490    	; 0x94e <__stack+0xef>
     764:	84 30       	cpi	r24, 0x04	; 4
     766:	09 f4       	brne	.+2      	; 0x76a <__EEPROM_REGION_LENGTH__+0x36a>
     768:	31 c1       	rjmp	.+610    	; 0x9cc <__stack+0x16d>
     76a:	36 c5       	rjmp	.+2668   	; 0x11d8 <__stack+0x979>
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(FOURTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_ONE_ON)
     76c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     770:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     774:	89 2b       	or	r24, r25
     776:	a9 f4       	brne	.+42     	; 0x7a2 <__EEPROM_REGION_LENGTH__+0x3a2>
							{
									/*blink led0,led1,led2,led4 with the current mode*/
									l_ret |= LED_turn_on(&s_led0);
     778:	8f e7       	ldi	r24, 0x7F	; 127
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     780:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_on(&s_led1);
     782:	8c e7       	ldi	r24, 0x7C	; 124
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     78a:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_on(&s_led2);
     78c:	89 e7       	ldi	r24, 0x79	; 121
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     794:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_on(&s_led3);
     796:	86 e7       	ldi	r24, 0x76	; 118
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     79e:	c8 2b       	or	r28, r24
     7a0:	1a c0       	rjmp	.+52     	; 0x7d6 <__EEPROM_REGION_LENGTH__+0x3d6>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_ONE_ON)
     7a2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     7a6:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     7aa:	89 2b       	or	r24, r25
     7ac:	a1 f0       	breq	.+40     	; 0x7d6 <__EEPROM_REGION_LENGTH__+0x3d6>
							{		
									/*blink led0,led1,led2,led4 with the current mode*/
									l_ret |= LED_turn_off(&s_led0);
     7ae:	8f e7       	ldi	r24, 0x7F	; 127
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     7b6:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led1);
     7b8:	8c e7       	ldi	r24, 0x7C	; 124
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     7c0:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led2);
     7c2:	89 e7       	ldi	r24, 0x79	; 121
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     7ca:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led3);
     7cc:	86 e7       	ldi	r24, 0x76	; 118
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     7d4:	c8 2b       	or	r28, r24
				
			case FOURTH_STATE:
				switch(u8_g_blinkMode_update)
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(FOURTH_STATE==u8_g_pressCnt))
     7d6:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     7da:	81 11       	cpse	r24, r1
     7dc:	04 c5       	rjmp	.+2568   	; 0x11e6 <__stack+0x987>
     7de:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     7e2:	84 30       	cpi	r24, 0x04	; 4
     7e4:	19 f2       	breq	.-122    	; 0x76c <__EEPROM_REGION_LENGTH__+0x36c>
     7e6:	ff c4       	rjmp	.+2558   	; 0x11e6 <__stack+0x987>
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(FOURTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_TWO_ON)
     7e8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     7ec:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     7f0:	02 97       	sbiw	r24, 0x02	; 2
     7f2:	a8 f4       	brcc	.+42     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
							{
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_on(&s_led0);
     7f4:	8f e7       	ldi	r24, 0x7F	; 127
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     7fc:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led1);
     7fe:	8c e7       	ldi	r24, 0x7C	; 124
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     806:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     808:	89 e7       	ldi	r24, 0x79	; 121
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     810:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
     812:	86 e7       	ldi	r24, 0x76	; 118
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     81a:	c8 2b       	or	r28, r24
     81c:	1a c0       	rjmp	.+52     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_TWO_ON)
     81e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     822:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     826:	02 97       	sbiw	r24, 0x02	; 2
     828:	a0 f0       	brcs	.+40     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
							{								
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     82a:	8f e7       	ldi	r24, 0x7F	; 127
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     832:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     834:	8c e7       	ldi	r24, 0x7C	; 124
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     83c:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     83e:	89 e7       	ldi	r24, 0x79	; 121
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     846:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
     848:	86 e7       	ldi	r24, 0x76	; 118
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     850:	c8 2b       	or	r28, r24
							}
						}
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(FOURTH_STATE==u8_g_pressCnt))
     852:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     856:	81 30       	cpi	r24, 0x01	; 1
     858:	09 f0       	breq	.+2      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     85a:	c5 c4       	rjmp	.+2442   	; 0x11e6 <__stack+0x987>
     85c:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     860:	84 30       	cpi	r24, 0x04	; 4
     862:	11 f2       	breq	.-124    	; 0x7e8 <__EEPROM_REGION_LENGTH__+0x3e8>
     864:	c0 c4       	rjmp	.+2432   	; 0x11e6 <__stack+0x987>
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(FOURTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_THREE_ON)
     866:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     86a:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     86e:	03 97       	sbiw	r24, 0x03	; 3
     870:	a8 f4       	brcc	.+42     	; 0x89c <__stack+0x3d>
							{
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_on(&s_led0);
     872:	8f e7       	ldi	r24, 0x7F	; 127
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     87a:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led1);
     87c:	8c e7       	ldi	r24, 0x7C	; 124
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     884:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     886:	89 e7       	ldi	r24, 0x79	; 121
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     88e:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
     890:	86 e7       	ldi	r24, 0x76	; 118
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     898:	c8 2b       	or	r28, r24
     89a:	1a c0       	rjmp	.+52     	; 0x8d0 <__stack+0x71>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_THREE_ON)
     89c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     8a0:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     8a4:	03 97       	sbiw	r24, 0x03	; 3
     8a6:	a0 f0       	brcs	.+40     	; 0x8d0 <__stack+0x71>
							{	
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     8a8:	8f e7       	ldi	r24, 0x7F	; 127
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     8b0:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     8b2:	8c e7       	ldi	r24, 0x7C	; 124
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     8ba:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     8bc:	89 e7       	ldi	r24, 0x79	; 121
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     8c4:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
     8c6:	86 e7       	ldi	r24, 0x76	; 118
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     8ce:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(FOURTH_STATE==u8_g_pressCnt))
     8d0:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     8d4:	82 30       	cpi	r24, 0x02	; 2
     8d6:	09 f0       	breq	.+2      	; 0x8da <__stack+0x7b>
     8d8:	86 c4       	rjmp	.+2316   	; 0x11e6 <__stack+0x987>
     8da:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     8de:	84 30       	cpi	r24, 0x04	; 4
     8e0:	11 f2       	breq	.-124    	; 0x866 <__stack+0x7>
     8e2:	81 c4       	rjmp	.+2306   	; 0x11e6 <__stack+0x987>
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(FOURTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FOUR_ON)
     8e4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     8e8:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     8ec:	05 97       	sbiw	r24, 0x05	; 5
     8ee:	a8 f4       	brcc	.+42     	; 0x91a <__stack+0xbb>
							{
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_on(&s_led0);
     8f0:	8f e7       	ldi	r24, 0x7F	; 127
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     8f8:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led1);
     8fa:	8c e7       	ldi	r24, 0x7C	; 124
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     902:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     904:	89 e7       	ldi	r24, 0x79	; 121
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     90c:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);		
     90e:	86 e7       	ldi	r24, 0x76	; 118
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     916:	c8 2b       	or	r28, r24
     918:	1a c0       	rjmp	.+52     	; 0x94e <__stack+0xef>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FOUR_ON)
     91a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     91e:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     922:	05 97       	sbiw	r24, 0x05	; 5
     924:	a0 f0       	brcs	.+40     	; 0x94e <__stack+0xef>
							{	
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     926:	8f e7       	ldi	r24, 0x7F	; 127
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     92e:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     930:	8c e7       	ldi	r24, 0x7C	; 124
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     938:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     93a:	89 e7       	ldi	r24, 0x79	; 121
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     942:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
     944:	86 e7       	ldi	r24, 0x76	; 118
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     94c:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(FOURTH_STATE==u8_g_pressCnt))
     94e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     952:	83 30       	cpi	r24, 0x03	; 3
     954:	09 f0       	breq	.+2      	; 0x958 <__stack+0xf9>
     956:	47 c4       	rjmp	.+2190   	; 0x11e6 <__stack+0x987>
     958:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     95c:	84 30       	cpi	r24, 0x04	; 4
     95e:	11 f2       	breq	.-124    	; 0x8e4 <__stack+0x85>
     960:	42 c4       	rjmp	.+2180   	; 0x11e6 <__stack+0x987>
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(FOURTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FIVE_ON)
     962:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     966:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     96a:	08 97       	sbiw	r24, 0x08	; 8
     96c:	a8 f4       	brcc	.+42     	; 0x998 <__stack+0x139>
							{
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_on(&s_led0);
     96e:	8f e7       	ldi	r24, 0x7F	; 127
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     976:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led1);
     978:	8c e7       	ldi	r24, 0x7C	; 124
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     980:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     982:	89 e7       	ldi	r24, 0x79	; 121
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     98a:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
     98c:	86 e7       	ldi	r24, 0x76	; 118
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     994:	c8 2b       	or	r28, r24
     996:	1a c0       	rjmp	.+52     	; 0x9cc <__stack+0x16d>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FIVE_ON)
     998:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     99c:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     9a0:	08 97       	sbiw	r24, 0x08	; 8
     9a2:	a0 f0       	brcs	.+40     	; 0x9cc <__stack+0x16d>
							{	
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     9a4:	8f e7       	ldi	r24, 0x7F	; 127
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     9ac:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     9ae:	8c e7       	ldi	r24, 0x7C	; 124
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     9b6:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     9b8:	89 e7       	ldi	r24, 0x79	; 121
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     9c0:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
     9c2:	86 e7       	ldi	r24, 0x76	; 118
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     9ca:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(FOURTH_STATE==u8_g_pressCnt))
     9cc:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     9d0:	84 30       	cpi	r24, 0x04	; 4
     9d2:	21 f4       	brne	.+8      	; 0x9dc <__stack+0x17d>
     9d4:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     9d8:	84 30       	cpi	r24, 0x04	; 4
     9da:	19 f2       	breq	.-122    	; 0x962 <__stack+0x103>
							else
							{
								/*DO NOTHING*/
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
     9dc:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__data_end>
						break;
     9e0:	02 c4       	rjmp	.+2052   	; 0x11e6 <__stack+0x987>
						break;
				}
				break;
				
			case FIFTH_STATE:
				switch(u8_g_blinkMode_update)
     9e2:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     9e6:	82 30       	cpi	r24, 0x02	; 2
     9e8:	09 f4       	brne	.+2      	; 0x9ec <__stack+0x18d>
     9ea:	c1 c0       	rjmp	.+386    	; 0xb6e <__stack+0x30f>
     9ec:	38 f4       	brcc	.+14     	; 0x9fc <__stack+0x19d>
     9ee:	88 23       	and	r24, r24
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <__stack+0x195>
     9f2:	40 c0       	rjmp	.+128    	; 0xa74 <__stack+0x215>
     9f4:	81 30       	cpi	r24, 0x01	; 1
     9f6:	09 f4       	brne	.+2      	; 0x9fa <__stack+0x19b>
     9f8:	7b c0       	rjmp	.+246    	; 0xaf0 <__stack+0x291>
     9fa:	f0 c3       	rjmp	.+2016   	; 0x11dc <__stack+0x97d>
     9fc:	83 30       	cpi	r24, 0x03	; 3
     9fe:	09 f4       	brne	.+2      	; 0xa02 <__stack+0x1a3>
     a00:	f5 c0       	rjmp	.+490    	; 0xbec <__stack+0x38d>
     a02:	84 30       	cpi	r24, 0x04	; 4
     a04:	09 f4       	brne	.+2      	; 0xa08 <__stack+0x1a9>
     a06:	31 c1       	rjmp	.+610    	; 0xc6a <__stack+0x40b>
     a08:	e9 c3       	rjmp	.+2002   	; 0x11dc <__stack+0x97d>
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(FIFTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_ONE_ON)
     a0a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     a0e:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     a12:	89 2b       	or	r24, r25
     a14:	a9 f4       	brne	.+42     	; 0xa40 <__stack+0x1e1>
							{
									/*blink led1,led2,led4 with the current mode*/
									l_ret |= LED_turn_off(&s_led0);
     a16:	8f e7       	ldi	r24, 0x7F	; 127
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     a1e:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_on(&s_led1);
     a20:	8c e7       	ldi	r24, 0x7C	; 124
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     a28:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_on(&s_led2);
     a2a:	89 e7       	ldi	r24, 0x79	; 121
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     a32:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_on(&s_led3);
     a34:	86 e7       	ldi	r24, 0x76	; 118
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     a3c:	c8 2b       	or	r28, r24
     a3e:	1a c0       	rjmp	.+52     	; 0xa74 <__stack+0x215>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_ONE_ON)
     a40:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     a44:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     a48:	89 2b       	or	r24, r25
     a4a:	a1 f0       	breq	.+40     	; 0xa74 <__stack+0x215>
							{		
									/*blink led1,led2,led4 with the current mode*/
									l_ret |= LED_turn_off(&s_led0);
     a4c:	8f e7       	ldi	r24, 0x7F	; 127
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     a54:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led1);
     a56:	8c e7       	ldi	r24, 0x7C	; 124
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     a5e:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led2);
     a60:	89 e7       	ldi	r24, 0x79	; 121
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     a68:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led3);
     a6a:	86 e7       	ldi	r24, 0x76	; 118
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     a72:	c8 2b       	or	r28, r24
				
			case FIFTH_STATE:
				switch(u8_g_blinkMode_update)
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(FIFTH_STATE==u8_g_pressCnt))
     a74:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     a78:	81 11       	cpse	r24, r1
     a7a:	b5 c3       	rjmp	.+1898   	; 0x11e6 <__stack+0x987>
     a7c:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     a80:	85 30       	cpi	r24, 0x05	; 5
     a82:	19 f2       	breq	.-122    	; 0xa0a <__stack+0x1ab>
     a84:	b0 c3       	rjmp	.+1888   	; 0x11e6 <__stack+0x987>
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(FIFTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_TWO_ON)
     a86:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     a8a:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     a8e:	02 97       	sbiw	r24, 0x02	; 2
     a90:	a8 f4       	brcc	.+42     	; 0xabc <__stack+0x25d>
							{
								/*blink led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     a92:	8f e7       	ldi	r24, 0x7F	; 127
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     a9a:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led1);
     a9c:	8c e7       	ldi	r24, 0x7C	; 124
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     aa4:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     aa6:	89 e7       	ldi	r24, 0x79	; 121
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     aae:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
     ab0:	86 e7       	ldi	r24, 0x76	; 118
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     ab8:	c8 2b       	or	r28, r24
     aba:	1a c0       	rjmp	.+52     	; 0xaf0 <__stack+0x291>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_TWO_ON)
     abc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     ac0:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     ac4:	02 97       	sbiw	r24, 0x02	; 2
     ac6:	a0 f0       	brcs	.+40     	; 0xaf0 <__stack+0x291>
							{								
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     ac8:	8f e7       	ldi	r24, 0x7F	; 127
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     ad0:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     ad2:	8c e7       	ldi	r24, 0x7C	; 124
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     ada:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     adc:	89 e7       	ldi	r24, 0x79	; 121
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     ae4:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
     ae6:	86 e7       	ldi	r24, 0x76	; 118
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     aee:	c8 2b       	or	r28, r24
							}
						}
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(FIFTH_STATE==u8_g_pressCnt))
     af0:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     af4:	81 30       	cpi	r24, 0x01	; 1
     af6:	09 f0       	breq	.+2      	; 0xafa <__stack+0x29b>
     af8:	76 c3       	rjmp	.+1772   	; 0x11e6 <__stack+0x987>
     afa:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     afe:	85 30       	cpi	r24, 0x05	; 5
     b00:	11 f2       	breq	.-124    	; 0xa86 <__stack+0x227>
     b02:	71 c3       	rjmp	.+1762   	; 0x11e6 <__stack+0x987>
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(FIFTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_THREE_ON)
     b04:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     b08:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     b0c:	03 97       	sbiw	r24, 0x03	; 3
     b0e:	a8 f4       	brcc	.+42     	; 0xb3a <__stack+0x2db>
							{
								/*blink led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     b10:	8f e7       	ldi	r24, 0x7F	; 127
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     b18:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led1);
     b1a:	8c e7       	ldi	r24, 0x7C	; 124
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     b22:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     b24:	89 e7       	ldi	r24, 0x79	; 121
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     b2c:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
     b2e:	86 e7       	ldi	r24, 0x76	; 118
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     b36:	c8 2b       	or	r28, r24
     b38:	1a c0       	rjmp	.+52     	; 0xb6e <__stack+0x30f>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_THREE_ON)
     b3a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     b3e:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     b42:	03 97       	sbiw	r24, 0x03	; 3
     b44:	a0 f0       	brcs	.+40     	; 0xb6e <__stack+0x30f>
							{	
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     b46:	8f e7       	ldi	r24, 0x7F	; 127
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     b4e:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     b50:	8c e7       	ldi	r24, 0x7C	; 124
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     b58:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     b5a:	89 e7       	ldi	r24, 0x79	; 121
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     b62:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
     b64:	86 e7       	ldi	r24, 0x76	; 118
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     b6c:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(FIFTH_STATE==u8_g_pressCnt))
     b6e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     b72:	82 30       	cpi	r24, 0x02	; 2
     b74:	09 f0       	breq	.+2      	; 0xb78 <__stack+0x319>
     b76:	37 c3       	rjmp	.+1646   	; 0x11e6 <__stack+0x987>
     b78:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     b7c:	85 30       	cpi	r24, 0x05	; 5
     b7e:	11 f2       	breq	.-124    	; 0xb04 <__stack+0x2a5>
     b80:	32 c3       	rjmp	.+1636   	; 0x11e6 <__stack+0x987>
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(FIFTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FOUR_ON)
     b82:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     b86:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     b8a:	05 97       	sbiw	r24, 0x05	; 5
     b8c:	a8 f4       	brcc	.+42     	; 0xbb8 <__stack+0x359>
							{
								/*blink led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     b8e:	8f e7       	ldi	r24, 0x7F	; 127
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     b96:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led1);
     b98:	8c e7       	ldi	r24, 0x7C	; 124
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     ba0:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     ba2:	89 e7       	ldi	r24, 0x79	; 121
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     baa:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
     bac:	86 e7       	ldi	r24, 0x76	; 118
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     bb4:	c8 2b       	or	r28, r24
     bb6:	1a c0       	rjmp	.+52     	; 0xbec <__stack+0x38d>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FOUR_ON)
     bb8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     bbc:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     bc0:	05 97       	sbiw	r24, 0x05	; 5
     bc2:	a0 f0       	brcs	.+40     	; 0xbec <__stack+0x38d>
							{	
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     bc4:	8f e7       	ldi	r24, 0x7F	; 127
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     bcc:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     bce:	8c e7       	ldi	r24, 0x7C	; 124
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     bd6:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     bd8:	89 e7       	ldi	r24, 0x79	; 121
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     be0:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
     be2:	86 e7       	ldi	r24, 0x76	; 118
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     bea:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(FIFTH_STATE==u8_g_pressCnt))
     bec:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     bf0:	83 30       	cpi	r24, 0x03	; 3
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <__stack+0x397>
     bf4:	f8 c2       	rjmp	.+1520   	; 0x11e6 <__stack+0x987>
     bf6:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     bfa:	85 30       	cpi	r24, 0x05	; 5
     bfc:	11 f2       	breq	.-124    	; 0xb82 <__stack+0x323>
     bfe:	f3 c2       	rjmp	.+1510   	; 0x11e6 <__stack+0x987>
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(FIFTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FIVE_ON)
     c00:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     c04:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     c08:	08 97       	sbiw	r24, 0x08	; 8
     c0a:	a8 f4       	brcc	.+42     	; 0xc36 <__stack+0x3d7>
							{
								/*blink led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     c0c:	8f e7       	ldi	r24, 0x7F	; 127
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     c14:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led1);
     c16:	8c e7       	ldi	r24, 0x7C	; 124
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     c1e:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     c20:	89 e7       	ldi	r24, 0x79	; 121
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     c28:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
     c2a:	86 e7       	ldi	r24, 0x76	; 118
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     c32:	c8 2b       	or	r28, r24
     c34:	1a c0       	rjmp	.+52     	; 0xc6a <__stack+0x40b>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FIVE_ON)
     c36:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     c3a:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     c3e:	08 97       	sbiw	r24, 0x08	; 8
     c40:	a0 f0       	brcs	.+40     	; 0xc6a <__stack+0x40b>
							{	
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     c42:	8f e7       	ldi	r24, 0x7F	; 127
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     c4a:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     c4c:	8c e7       	ldi	r24, 0x7C	; 124
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     c54:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     c56:	89 e7       	ldi	r24, 0x79	; 121
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     c5e:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
     c60:	86 e7       	ldi	r24, 0x76	; 118
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     c68:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(FIFTH_STATE==u8_g_pressCnt))
     c6a:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     c6e:	84 30       	cpi	r24, 0x04	; 4
     c70:	21 f4       	brne	.+8      	; 0xc7a <__stack+0x41b>
     c72:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     c76:	85 30       	cpi	r24, 0x05	; 5
     c78:	19 f2       	breq	.-122    	; 0xc00 <__stack+0x3a1>
							else
							{
								/*DO NOTHING*/
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
     c7a:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__data_end>
						break;
     c7e:	b3 c2       	rjmp	.+1382   	; 0x11e6 <__stack+0x987>
						break;
				}	
				break;
				
			case SIXTH_STATE:
				switch(u8_g_blinkMode_update)
     c80:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     c84:	82 30       	cpi	r24, 0x02	; 2
     c86:	09 f4       	brne	.+2      	; 0xc8a <__stack+0x42b>
     c88:	c1 c0       	rjmp	.+386    	; 0xe0c <__stack+0x5ad>
     c8a:	38 f4       	brcc	.+14     	; 0xc9a <__stack+0x43b>
     c8c:	88 23       	and	r24, r24
     c8e:	09 f4       	brne	.+2      	; 0xc92 <__stack+0x433>
     c90:	40 c0       	rjmp	.+128    	; 0xd12 <__stack+0x4b3>
     c92:	81 30       	cpi	r24, 0x01	; 1
     c94:	09 f4       	brne	.+2      	; 0xc98 <__stack+0x439>
     c96:	7b c0       	rjmp	.+246    	; 0xd8e <__stack+0x52f>
     c98:	a3 c2       	rjmp	.+1350   	; 0x11e0 <__stack+0x981>
     c9a:	83 30       	cpi	r24, 0x03	; 3
     c9c:	09 f4       	brne	.+2      	; 0xca0 <__stack+0x441>
     c9e:	f5 c0       	rjmp	.+490    	; 0xe8a <__stack+0x62b>
     ca0:	84 30       	cpi	r24, 0x04	; 4
     ca2:	09 f4       	brne	.+2      	; 0xca6 <__stack+0x447>
     ca4:	31 c1       	rjmp	.+610    	; 0xf08 <__stack+0x6a9>
     ca6:	9c c2       	rjmp	.+1336   	; 0x11e0 <__stack+0x981>
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(SIXTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_ONE_ON)
     ca8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     cac:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     cb0:	89 2b       	or	r24, r25
     cb2:	a9 f4       	brne	.+42     	; 0xcde <__stack+0x47f>
							{
									/*blink led0,led1,led2,led3 with the current mode*/
									l_ret |= LED_turn_off(&s_led0);
     cb4:	8f e7       	ldi	r24, 0x7F	; 127
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     cbc:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led1);
     cbe:	8c e7       	ldi	r24, 0x7C	; 124
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     cc6:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_on(&s_led2);
     cc8:	89 e7       	ldi	r24, 0x79	; 121
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     cd0:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_on(&s_led3);
     cd2:	86 e7       	ldi	r24, 0x76	; 118
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     cda:	c8 2b       	or	r28, r24
     cdc:	1a c0       	rjmp	.+52     	; 0xd12 <__stack+0x4b3>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_ONE_ON)
     cde:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     ce2:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     ce6:	89 2b       	or	r24, r25
     ce8:	a1 f0       	breq	.+40     	; 0xd12 <__stack+0x4b3>
							{		
									/*blink led1,led2,led4 with the current mode*/
									l_ret |= LED_turn_off(&s_led0);
     cea:	8f e7       	ldi	r24, 0x7F	; 127
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     cf2:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led1);
     cf4:	8c e7       	ldi	r24, 0x7C	; 124
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     cfc:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led2);
     cfe:	89 e7       	ldi	r24, 0x79	; 121
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     d06:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led3);
     d08:	86 e7       	ldi	r24, 0x76	; 118
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     d10:	c8 2b       	or	r28, r24
				
			case SIXTH_STATE:
				switch(u8_g_blinkMode_update)
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(SIXTH_STATE==u8_g_pressCnt))
     d12:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     d16:	81 11       	cpse	r24, r1
     d18:	66 c2       	rjmp	.+1228   	; 0x11e6 <__stack+0x987>
     d1a:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     d1e:	86 30       	cpi	r24, 0x06	; 6
     d20:	19 f2       	breq	.-122    	; 0xca8 <__stack+0x449>
     d22:	61 c2       	rjmp	.+1218   	; 0x11e6 <__stack+0x987>
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(SIXTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_TWO_ON)
     d24:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     d28:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     d2c:	02 97       	sbiw	r24, 0x02	; 2
     d2e:	a8 f4       	brcc	.+42     	; 0xd5a <__stack+0x4fb>
							{
								/*blink led0,led1,led2,led3 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     d30:	8f e7       	ldi	r24, 0x7F	; 127
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     d38:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     d3a:	8c e7       	ldi	r24, 0x7C	; 124
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     d42:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     d44:	89 e7       	ldi	r24, 0x79	; 121
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     d4c:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
     d4e:	86 e7       	ldi	r24, 0x76	; 118
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     d56:	c8 2b       	or	r28, r24
     d58:	1a c0       	rjmp	.+52     	; 0xd8e <__stack+0x52f>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_TWO_ON)
     d5a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     d5e:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     d62:	02 97       	sbiw	r24, 0x02	; 2
     d64:	a0 f0       	brcs	.+40     	; 0xd8e <__stack+0x52f>
							{								
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     d66:	8f e7       	ldi	r24, 0x7F	; 127
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     d6e:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     d70:	8c e7       	ldi	r24, 0x7C	; 124
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     d78:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     d7a:	89 e7       	ldi	r24, 0x79	; 121
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     d82:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
     d84:	86 e7       	ldi	r24, 0x76	; 118
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     d8c:	c8 2b       	or	r28, r24
							}
						}
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(SIXTH_STATE==u8_g_pressCnt))
     d8e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	09 f0       	breq	.+2      	; 0xd98 <__stack+0x539>
     d96:	27 c2       	rjmp	.+1102   	; 0x11e6 <__stack+0x987>
     d98:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     d9c:	86 30       	cpi	r24, 0x06	; 6
     d9e:	11 f2       	breq	.-124    	; 0xd24 <__stack+0x4c5>
     da0:	22 c2       	rjmp	.+1092   	; 0x11e6 <__stack+0x987>
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(SIXTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_THREE_ON)
     da2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     da6:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     daa:	03 97       	sbiw	r24, 0x03	; 3
     dac:	a8 f4       	brcc	.+42     	; 0xdd8 <__stack+0x579>
							{
								/*blink led0,led1,led2,led3 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     dae:	8f e7       	ldi	r24, 0x7F	; 127
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     db6:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     db8:	8c e7       	ldi	r24, 0x7C	; 124
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     dc0:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     dc2:	89 e7       	ldi	r24, 0x79	; 121
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     dca:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
     dcc:	86 e7       	ldi	r24, 0x76	; 118
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     dd4:	c8 2b       	or	r28, r24
     dd6:	1a c0       	rjmp	.+52     	; 0xe0c <__stack+0x5ad>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_THREE_ON)
     dd8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     ddc:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     de0:	03 97       	sbiw	r24, 0x03	; 3
     de2:	a0 f0       	brcs	.+40     	; 0xe0c <__stack+0x5ad>
							{	
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     de4:	8f e7       	ldi	r24, 0x7F	; 127
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     dec:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     dee:	8c e7       	ldi	r24, 0x7C	; 124
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     df6:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     df8:	89 e7       	ldi	r24, 0x79	; 121
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     e00:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
     e02:	86 e7       	ldi	r24, 0x76	; 118
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     e0a:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(SIXTH_STATE==u8_g_pressCnt))
     e0c:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     e10:	82 30       	cpi	r24, 0x02	; 2
     e12:	09 f0       	breq	.+2      	; 0xe16 <__stack+0x5b7>
     e14:	e8 c1       	rjmp	.+976    	; 0x11e6 <__stack+0x987>
     e16:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     e1a:	86 30       	cpi	r24, 0x06	; 6
     e1c:	11 f2       	breq	.-124    	; 0xda2 <__stack+0x543>
     e1e:	e3 c1       	rjmp	.+966    	; 0x11e6 <__stack+0x987>
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(SIXTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FOUR_ON)
     e20:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     e24:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     e28:	05 97       	sbiw	r24, 0x05	; 5
     e2a:	a8 f4       	brcc	.+42     	; 0xe56 <__stack+0x5f7>
							{
								/*blink led0,led1,led2,led3 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     e2c:	8f e7       	ldi	r24, 0x7F	; 127
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     e34:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     e36:	8c e7       	ldi	r24, 0x7C	; 124
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     e3e:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     e40:	89 e7       	ldi	r24, 0x79	; 121
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     e48:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
     e4a:	86 e7       	ldi	r24, 0x76	; 118
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     e52:	c8 2b       	or	r28, r24
     e54:	1a c0       	rjmp	.+52     	; 0xe8a <__stack+0x62b>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FOUR_ON)
     e56:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     e5a:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     e5e:	05 97       	sbiw	r24, 0x05	; 5
     e60:	a0 f0       	brcs	.+40     	; 0xe8a <__stack+0x62b>
							{	
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     e62:	8f e7       	ldi	r24, 0x7F	; 127
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     e6a:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     e6c:	8c e7       	ldi	r24, 0x7C	; 124
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     e74:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     e76:	89 e7       	ldi	r24, 0x79	; 121
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     e7e:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
     e80:	86 e7       	ldi	r24, 0x76	; 118
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     e88:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(SIXTH_STATE==u8_g_pressCnt))
     e8a:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     e8e:	83 30       	cpi	r24, 0x03	; 3
     e90:	09 f0       	breq	.+2      	; 0xe94 <__stack+0x635>
     e92:	a9 c1       	rjmp	.+850    	; 0x11e6 <__stack+0x987>
     e94:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     e98:	86 30       	cpi	r24, 0x06	; 6
     e9a:	11 f2       	breq	.-124    	; 0xe20 <__stack+0x5c1>
     e9c:	a4 c1       	rjmp	.+840    	; 0x11e6 <__stack+0x987>
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(SIXTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FIVE_ON)
     e9e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     ea2:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     ea6:	08 97       	sbiw	r24, 0x08	; 8
     ea8:	a8 f4       	brcc	.+42     	; 0xed4 <__stack+0x675>
							{
								/*blink led0,led1,led2,led3 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     eaa:	8f e7       	ldi	r24, 0x7F	; 127
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     eb2:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     eb4:	8c e7       	ldi	r24, 0x7C	; 124
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     ebc:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     ebe:	89 e7       	ldi	r24, 0x79	; 121
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     ec6:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
     ec8:	86 e7       	ldi	r24, 0x76	; 118
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     ed0:	c8 2b       	or	r28, r24
     ed2:	1a c0       	rjmp	.+52     	; 0xf08 <__stack+0x6a9>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FIVE_ON)
     ed4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     ed8:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     edc:	08 97       	sbiw	r24, 0x08	; 8
     ede:	a0 f0       	brcs	.+40     	; 0xf08 <__stack+0x6a9>
							{	
								/*blink led0,led1,led2,led3 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     ee0:	8f e7       	ldi	r24, 0x7F	; 127
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     ee8:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     eea:	8c e7       	ldi	r24, 0x7C	; 124
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     ef2:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     ef4:	89 e7       	ldi	r24, 0x79	; 121
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     efc:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
     efe:	86 e7       	ldi	r24, 0x76	; 118
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     f06:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(SIXTH_STATE==u8_g_pressCnt))
     f08:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     f0c:	84 30       	cpi	r24, 0x04	; 4
     f0e:	21 f4       	brne	.+8      	; 0xf18 <__stack+0x6b9>
     f10:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     f14:	86 30       	cpi	r24, 0x06	; 6
     f16:	19 f2       	breq	.-122    	; 0xe9e <__stack+0x63f>
							else
							{
								/*DO NOTHING*/
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
     f18:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__data_end>
						break;
     f1c:	64 c1       	rjmp	.+712    	; 0x11e6 <__stack+0x987>
						l_ret = E_NOT_OK;
						break;
				}	
				break;
			case SEVENTH_STATE:
				switch(u8_g_blinkMode_update)
     f1e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     f22:	82 30       	cpi	r24, 0x02	; 2
     f24:	09 f4       	brne	.+2      	; 0xf28 <__stack+0x6c9>
     f26:	c1 c0       	rjmp	.+386    	; 0x10aa <__stack+0x84b>
     f28:	38 f4       	brcc	.+14     	; 0xf38 <__stack+0x6d9>
     f2a:	88 23       	and	r24, r24
     f2c:	09 f4       	brne	.+2      	; 0xf30 <__stack+0x6d1>
     f2e:	40 c0       	rjmp	.+128    	; 0xfb0 <__stack+0x751>
     f30:	81 30       	cpi	r24, 0x01	; 1
     f32:	09 f4       	brne	.+2      	; 0xf36 <__stack+0x6d7>
     f34:	7b c0       	rjmp	.+246    	; 0x102c <__stack+0x7cd>
     f36:	56 c1       	rjmp	.+684    	; 0x11e4 <__stack+0x985>
     f38:	83 30       	cpi	r24, 0x03	; 3
     f3a:	09 f4       	brne	.+2      	; 0xf3e <__stack+0x6df>
     f3c:	f5 c0       	rjmp	.+490    	; 0x1128 <__stack+0x8c9>
     f3e:	84 30       	cpi	r24, 0x04	; 4
     f40:	09 f4       	brne	.+2      	; 0xf44 <__stack+0x6e5>
     f42:	31 c1       	rjmp	.+610    	; 0x11a6 <__stack+0x947>
     f44:	4f c1       	rjmp	.+670    	; 0x11e4 <__stack+0x985>
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(SEVENTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_ONE_ON)
     f46:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     f4a:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     f4e:	89 2b       	or	r24, r25
     f50:	a9 f4       	brne	.+42     	; 0xf7c <__stack+0x71d>
							{
									/*blink led3 with the current mode*/
									l_ret |= LED_turn_off(&s_led0);
     f52:	8f e7       	ldi	r24, 0x7F	; 127
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     f5a:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led1);
     f5c:	8c e7       	ldi	r24, 0x7C	; 124
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     f64:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led2);
     f66:	89 e7       	ldi	r24, 0x79	; 121
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     f6e:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_on(&s_led3);
     f70:	86 e7       	ldi	r24, 0x76	; 118
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     f78:	c8 2b       	or	r28, r24
     f7a:	1a c0       	rjmp	.+52     	; 0xfb0 <__stack+0x751>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_ONE_ON)
     f7c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     f80:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     f84:	89 2b       	or	r24, r25
     f86:	a1 f0       	breq	.+40     	; 0xfb0 <__stack+0x751>
							{		
									/*blink led1,led2,led4 with the current mode*/
									l_ret |= LED_turn_off(&s_led0);
     f88:	8f e7       	ldi	r24, 0x7F	; 127
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     f90:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led1);
     f92:	8c e7       	ldi	r24, 0x7C	; 124
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     f9a:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led2);
     f9c:	89 e7       	ldi	r24, 0x79	; 121
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     fa4:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led3);
     fa6:	86 e7       	ldi	r24, 0x76	; 118
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     fae:	c8 2b       	or	r28, r24
				break;
			case SEVENTH_STATE:
				switch(u8_g_blinkMode_update)
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(SEVENTH_STATE==u8_g_pressCnt))
     fb0:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     fb4:	81 11       	cpse	r24, r1
     fb6:	17 c1       	rjmp	.+558    	; 0x11e6 <__stack+0x987>
     fb8:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     fbc:	87 30       	cpi	r24, 0x07	; 7
     fbe:	19 f2       	breq	.-122    	; 0xf46 <__stack+0x6e7>
     fc0:	12 c1       	rjmp	.+548    	; 0x11e6 <__stack+0x987>
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(SEVENTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_TWO_ON)
     fc2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     fc6:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
     fca:	02 97       	sbiw	r24, 0x02	; 2
     fcc:	a8 f4       	brcc	.+42     	; 0xff8 <__stack+0x799>
							{
								/*blink led3 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     fce:	8f e7       	ldi	r24, 0x7F	; 127
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     fd6:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     fd8:	8c e7       	ldi	r24, 0x7C	; 124
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     fe0:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     fe2:	89 e7       	ldi	r24, 0x79	; 121
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
     fea:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
     fec:	86 e7       	ldi	r24, 0x76	; 118
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
     ff4:	c8 2b       	or	r28, r24
     ff6:	1a c0       	rjmp	.+52     	; 0x102c <__stack+0x7cd>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_TWO_ON)
     ff8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
     ffc:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
    1000:	02 97       	sbiw	r24, 0x02	; 2
    1002:	a0 f0       	brcs	.+40     	; 0x102c <__stack+0x7cd>
							{								
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
    1004:	8f e7       	ldi	r24, 0x7F	; 127
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    100c:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
    100e:	8c e7       	ldi	r24, 0x7C	; 124
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    1016:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
    1018:	89 e7       	ldi	r24, 0x79	; 121
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    1020:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
    1022:	86 e7       	ldi	r24, 0x76	; 118
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    102a:	c8 2b       	or	r28, r24
							}
						}
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(SEVENTH_STATE==u8_g_pressCnt))
    102c:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	09 f0       	breq	.+2      	; 0x1036 <__stack+0x7d7>
    1034:	d8 c0       	rjmp	.+432    	; 0x11e6 <__stack+0x987>
    1036:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
    103a:	87 30       	cpi	r24, 0x07	; 7
    103c:	11 f2       	breq	.-124    	; 0xfc2 <__stack+0x763>
    103e:	d3 c0       	rjmp	.+422    	; 0x11e6 <__stack+0x987>
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(SEVENTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_THREE_ON)
    1040:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
    1044:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
    1048:	03 97       	sbiw	r24, 0x03	; 3
    104a:	a8 f4       	brcc	.+42     	; 0x1076 <__stack+0x817>
							{
								/*blink led3 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
    104c:	8f e7       	ldi	r24, 0x7F	; 127
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    1054:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
    1056:	8c e7       	ldi	r24, 0x7C	; 124
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    105e:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
    1060:	89 e7       	ldi	r24, 0x79	; 121
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    1068:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
    106a:	86 e7       	ldi	r24, 0x76	; 118
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
    1072:	c8 2b       	or	r28, r24
    1074:	1a c0       	rjmp	.+52     	; 0x10aa <__stack+0x84b>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_THREE_ON)
    1076:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
    107a:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
    107e:	03 97       	sbiw	r24, 0x03	; 3
    1080:	a0 f0       	brcs	.+40     	; 0x10aa <__stack+0x84b>
							{	
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
    1082:	8f e7       	ldi	r24, 0x7F	; 127
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    108a:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
    108c:	8c e7       	ldi	r24, 0x7C	; 124
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    1094:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
    1096:	89 e7       	ldi	r24, 0x79	; 121
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    109e:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
    10a0:	86 e7       	ldi	r24, 0x76	; 118
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    10a8:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(SEVENTH_STATE==u8_g_pressCnt))
    10aa:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
    10ae:	82 30       	cpi	r24, 0x02	; 2
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <__stack+0x855>
    10b2:	99 c0       	rjmp	.+306    	; 0x11e6 <__stack+0x987>
    10b4:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
    10b8:	87 30       	cpi	r24, 0x07	; 7
    10ba:	11 f2       	breq	.-124    	; 0x1040 <__stack+0x7e1>
    10bc:	94 c0       	rjmp	.+296    	; 0x11e6 <__stack+0x987>
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(SEVENTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FOUR_ON)
    10be:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
    10c2:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
    10c6:	05 97       	sbiw	r24, 0x05	; 5
    10c8:	a8 f4       	brcc	.+42     	; 0x10f4 <__stack+0x895>
							{
								/*blink led3 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
    10ca:	8f e7       	ldi	r24, 0x7F	; 127
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    10d2:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
    10d4:	8c e7       	ldi	r24, 0x7C	; 124
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    10dc:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
    10de:	89 e7       	ldi	r24, 0x79	; 121
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    10e6:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
    10e8:	86 e7       	ldi	r24, 0x76	; 118
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
    10f0:	c8 2b       	or	r28, r24
    10f2:	1a c0       	rjmp	.+52     	; 0x1128 <__stack+0x8c9>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FOUR_ON)
    10f4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
    10f8:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
    10fc:	05 97       	sbiw	r24, 0x05	; 5
    10fe:	a0 f0       	brcs	.+40     	; 0x1128 <__stack+0x8c9>
							{	
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
    1100:	8f e7       	ldi	r24, 0x7F	; 127
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    1108:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
    110a:	8c e7       	ldi	r24, 0x7C	; 124
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    1112:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
    1114:	89 e7       	ldi	r24, 0x79	; 121
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    111c:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
    111e:	86 e7       	ldi	r24, 0x76	; 118
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    1126:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(SEVENTH_STATE==u8_g_pressCnt))
    1128:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
    112c:	83 30       	cpi	r24, 0x03	; 3
    112e:	09 f0       	breq	.+2      	; 0x1132 <__stack+0x8d3>
    1130:	5a c0       	rjmp	.+180    	; 0x11e6 <__stack+0x987>
    1132:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
    1136:	87 30       	cpi	r24, 0x07	; 7
    1138:	11 f2       	breq	.-124    	; 0x10be <__stack+0x85f>
    113a:	55 c0       	rjmp	.+170    	; 0x11e6 <__stack+0x987>
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(SEVENTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FIVE_ON)
    113c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
    1140:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
    1144:	08 97       	sbiw	r24, 0x08	; 8
    1146:	a8 f4       	brcc	.+42     	; 0x1172 <__stack+0x913>
							{
								/*blink led3 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
    1148:	8f e7       	ldi	r24, 0x7F	; 127
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    1150:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
    1152:	8c e7       	ldi	r24, 0x7C	; 124
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    115a:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
    115c:	89 e7       	ldi	r24, 0x79	; 121
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    1164:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
    1166:	86 e7       	ldi	r24, 0x76	; 118
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_turn_on>
    116e:	c8 2b       	or	r28, r24
    1170:	1a c0       	rjmp	.+52     	; 0x11a6 <__stack+0x947>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FIVE_ON)
    1172:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <u16_g_100_ms_cnt>
    1176:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <u16_g_100_ms_cnt+0x1>
    117a:	08 97       	sbiw	r24, 0x08	; 8
    117c:	a0 f0       	brcs	.+40     	; 0x11a6 <__stack+0x947>
							{	
								/*blink led3 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
    117e:	8f e7       	ldi	r24, 0x7F	; 127
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    1186:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
    1188:	8c e7       	ldi	r24, 0x7C	; 124
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    1190:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
    1192:	89 e7       	ldi	r24, 0x79	; 121
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    119a:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
    119c:	86 e7       	ldi	r24, 0x76	; 118
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    11a4:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(SEVENTH_STATE==u8_g_pressCnt))
    11a6:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
    11aa:	84 30       	cpi	r24, 0x04	; 4
    11ac:	21 f4       	brne	.+8      	; 0x11b6 <__stack+0x957>
    11ae:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
    11b2:	87 30       	cpi	r24, 0x07	; 7
    11b4:	19 f2       	breq	.-122    	; 0x113c <__stack+0x8dd>
							else
							{
								/*DO NOTHING*/
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
    11b6:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__data_end>
						break;
    11ba:	15 c0       	rjmp	.+42     	; 0x11e6 <__stack+0x987>
						l_ret = E_NOT_OK;
						break;
				}
				break;
			case EIGHTH_STATE:
				l_ret |= LED_turn_off(&s_led3);
    11bc:	86 e7       	ldi	r24, 0x76	; 118
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	0e 94 4e 09 	call	0x129c	; 0x129c <LED_turn_off>
    11c4:	c8 2b       	or	r28, r24
				u8_g_pressCnt = IDLE_STATE;
    11c6:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <u8_g_pressCnt>
				break;
    11ca:	0d c0       	rjmp	.+26     	; 0x11e6 <__stack+0x987>
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
						break;
					default: 
						l_ret = E_NOT_OK;
    11cc:	c0 e0       	ldi	r28, 0x00	; 0
    11ce:	0b c0       	rjmp	.+22     	; 0x11e6 <__stack+0x987>
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
						break;
					default: 
						l_ret = E_NOT_OK;
    11d0:	c0 e0       	ldi	r28, 0x00	; 0
    11d2:	09 c0       	rjmp	.+18     	; 0x11e6 <__stack+0x987>
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
						break;
					default: 
						l_ret = E_NOT_OK;
    11d4:	c0 e0       	ldi	r28, 0x00	; 0
    11d6:	07 c0       	rjmp	.+14     	; 0x11e6 <__stack+0x987>
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
						break;
					default: 
						l_ret = E_NOT_OK;
    11d8:	c0 e0       	ldi	r28, 0x00	; 0
    11da:	05 c0       	rjmp	.+10     	; 0x11e6 <__stack+0x987>
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
						break;
					default: 
						l_ret = E_NOT_OK;
    11dc:	c0 e0       	ldi	r28, 0x00	; 0
    11de:	03 c0       	rjmp	.+6      	; 0x11e6 <__stack+0x987>
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
						break;
					default: 
						l_ret = E_NOT_OK;
    11e0:	c0 e0       	ldi	r28, 0x00	; 0
    11e2:	01 c0       	rjmp	.+2      	; 0x11e6 <__stack+0x987>
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
						break;
					default: 
						l_ret = E_NOT_OK;
    11e4:	c0 e0       	ldi	r28, 0x00	; 0
				u8_g_pressCnt = IDLE_STATE;
				break;
		}
	
	return l_ret;
}
    11e6:	8c 2f       	mov	r24, r28
    11e8:	cf 91       	pop	r28
    11ea:	08 95       	ret

000011ec <BTN_init>:
 *  Author: Mohamed Abdel-Wahab
 */ 
#include "button.h"

Std_ReturnType BTN_init(const button_t *btn_ptr)
{
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
	Std_ReturnType ret = E_OK;
	if(NULL == btn_ptr || (btn_ptr->button_pin.pin > PORT_PIN_MAX_NUMBER-1) || (btn_ptr->button_pin.port > PORT_MAX_NUMBER-1))
    11f0:	00 97       	sbiw	r24, 0x00	; 0
    11f2:	81 f0       	breq	.+32     	; 0x1214 <BTN_init+0x28>
    11f4:	fc 01       	movw	r30, r24
    11f6:	21 81       	ldd	r18, Z+1	; 0x01
    11f8:	28 30       	cpi	r18, 0x08	; 8
    11fa:	70 f4       	brcc	.+28     	; 0x1218 <BTN_init+0x2c>
    11fc:	20 81       	ld	r18, Z
    11fe:	24 30       	cpi	r18, 0x04	; 4
    1200:	68 f4       	brcc	.+26     	; 0x121c <BTN_init+0x30>
    1202:	ec 01       	movw	r28, r24
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret = DIO_pin_direction_intialize(&(btn_ptr->button_pin),DIO_DIRECTION_INPUT);
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	0e 94 66 09 	call	0x12cc	; 0x12cc <DIO_pin_direction_intialize>
		ret = DIO_pin_write_logic(&(btn_ptr->button_pin),DIO_LOGIC_LOW);
    120a:	60 e0       	ldi	r22, 0x00	; 0
    120c:	ce 01       	movw	r24, r28
    120e:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_pin_write_logic>
    1212:	05 c0       	rjmp	.+10     	; 0x121e <BTN_init+0x32>
Std_ReturnType BTN_init(const button_t *btn_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == btn_ptr || (btn_ptr->button_pin.pin > PORT_PIN_MAX_NUMBER-1) || (btn_ptr->button_pin.port > PORT_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	03 c0       	rjmp	.+6      	; 0x121e <BTN_init+0x32>
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	01 c0       	rjmp	.+2      	; 0x121e <BTN_init+0x32>
    121c:	80 e0       	ldi	r24, 0x00	; 0
	{
		ret = DIO_pin_direction_intialize(&(btn_ptr->button_pin),DIO_DIRECTION_INPUT);
		ret = DIO_pin_write_logic(&(btn_ptr->button_pin),DIO_LOGIC_LOW);
	}
	return ret;
}
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <LED_initialize>:
 * Created: 4/5/2023 8:30:02 PM
 *  Author: Mohamed Abdel-Wahab
 */ 
#include "led.h"
Std_ReturnType LED_initialize(const led_t *led_ptr)
{
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
	Std_ReturnType ret = E_OK;
	if(NULL == led_ptr || (led_ptr->led_pin.pin > PORT_PIN_MAX_NUMBER-1) || (led_ptr->led_pin.port > PORT_MAX_NUMBER-1))
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	d9 f0       	breq	.+54     	; 0x1262 <LED_initialize+0x3e>
    122c:	fc 01       	movw	r30, r24
    122e:	21 81       	ldd	r18, Z+1	; 0x01
    1230:	28 30       	cpi	r18, 0x08	; 8
    1232:	c8 f4       	brcc	.+50     	; 0x1266 <LED_initialize+0x42>
    1234:	20 81       	ld	r18, Z
    1236:	24 30       	cpi	r18, 0x04	; 4
    1238:	c0 f4       	brcc	.+48     	; 0x126a <LED_initialize+0x46>
    123a:	ec 01       	movw	r28, r24
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret = DIO_pin_direction_intialize(&(led_ptr->led_pin),DIO_DIRECTION_OUTPUT);
    123c:	61 e0       	ldi	r22, 0x01	; 1
    123e:	0e 94 66 09 	call	0x12cc	; 0x12cc <DIO_pin_direction_intialize>
		switch(led_ptr->led_status)
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	88 23       	and	r24, r24
    1246:	19 f0       	breq	.+6      	; 0x124e <LED_initialize+0x2a>
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	31 f0       	breq	.+12     	; 0x1258 <LED_initialize+0x34>
    124c:	10 c0       	rjmp	.+32     	; 0x126e <LED_initialize+0x4a>
		{
			case LED_OFF:
				ret = DIO_pin_write_logic(&(led_ptr->led_pin),DIO_LOGIC_LOW);
    124e:	60 e0       	ldi	r22, 0x00	; 0
    1250:	ce 01       	movw	r24, r28
    1252:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_pin_write_logic>
				break;
    1256:	0c c0       	rjmp	.+24     	; 0x1270 <LED_initialize+0x4c>
			case LED_ON:
				ret = DIO_pin_write_logic(&(led_ptr->led_pin),DIO_LOGIC_HIGH);
    1258:	61 e0       	ldi	r22, 0x01	; 1
    125a:	ce 01       	movw	r24, r28
    125c:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_pin_write_logic>
				break;
    1260:	07 c0       	rjmp	.+14     	; 0x1270 <LED_initialize+0x4c>
Std_ReturnType LED_initialize(const led_t *led_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == led_ptr || (led_ptr->led_pin.pin > PORT_PIN_MAX_NUMBER-1) || (led_ptr->led_pin.port > PORT_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	05 c0       	rjmp	.+10     	; 0x1270 <LED_initialize+0x4c>
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	03 c0       	rjmp	.+6      	; 0x1270 <LED_initialize+0x4c>
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	01 c0       	rjmp	.+2      	; 0x1270 <LED_initialize+0x4c>
				break;
			case LED_ON:
				ret = DIO_pin_write_logic(&(led_ptr->led_pin),DIO_LOGIC_HIGH);
				break;
			default:
				ret = E_NOT_OK;
    126e:	80 e0       	ldi	r24, 0x00	; 0
				break;
		}
	}
	return ret;
}
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	08 95       	ret

00001276 <LED_turn_on>:

Std_ReturnType LED_turn_on(const led_t *led_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == led_ptr || (led_ptr->led_pin.pin > PORT_PIN_MAX_NUMBER-1) || (led_ptr->led_pin.port > PORT_MAX_NUMBER-1))
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	59 f0       	breq	.+22     	; 0x1290 <LED_turn_on+0x1a>
    127a:	fc 01       	movw	r30, r24
    127c:	21 81       	ldd	r18, Z+1	; 0x01
    127e:	28 30       	cpi	r18, 0x08	; 8
    1280:	48 f4       	brcc	.+18     	; 0x1294 <LED_turn_on+0x1e>
    1282:	20 81       	ld	r18, Z
    1284:	24 30       	cpi	r18, 0x04	; 4
    1286:	40 f4       	brcc	.+16     	; 0x1298 <LED_turn_on+0x22>
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret = DIO_pin_write_logic(&(led_ptr->led_pin),DIO_LOGIC_HIGH);
    1288:	61 e0       	ldi	r22, 0x01	; 1
    128a:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_pin_write_logic>
    128e:	08 95       	ret
Std_ReturnType LED_turn_on(const led_t *led_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == led_ptr || (led_ptr->led_pin.pin > PORT_PIN_MAX_NUMBER-1) || (led_ptr->led_pin.port > PORT_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	08 95       	ret
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	08 95       	ret
    1298:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ret = DIO_pin_write_logic(&(led_ptr->led_pin),DIO_LOGIC_HIGH);
	}
	return ret;
}
    129a:	08 95       	ret

0000129c <LED_turn_off>:

Std_ReturnType LED_turn_off (const led_t *led_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == led_ptr || (led_ptr->led_pin.pin > PORT_PIN_MAX_NUMBER-1) || (led_ptr->led_pin.port > PORT_MAX_NUMBER-1))
    129c:	00 97       	sbiw	r24, 0x00	; 0
    129e:	59 f0       	breq	.+22     	; 0x12b6 <LED_turn_off+0x1a>
    12a0:	fc 01       	movw	r30, r24
    12a2:	21 81       	ldd	r18, Z+1	; 0x01
    12a4:	28 30       	cpi	r18, 0x08	; 8
    12a6:	48 f4       	brcc	.+18     	; 0x12ba <LED_turn_off+0x1e>
    12a8:	20 81       	ld	r18, Z
    12aa:	24 30       	cpi	r18, 0x04	; 4
    12ac:	40 f4       	brcc	.+16     	; 0x12be <LED_turn_off+0x22>
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret = DIO_pin_write_logic(&(led_ptr->led_pin),DIO_LOGIC_LOW);
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_pin_write_logic>
    12b4:	08 95       	ret
Std_ReturnType LED_turn_off (const led_t *led_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == led_ptr || (led_ptr->led_pin.pin > PORT_PIN_MAX_NUMBER-1) || (led_ptr->led_pin.port > PORT_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	08 95       	ret
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	08 95       	ret
    12be:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ret = DIO_pin_write_logic(&(led_ptr->led_pin),DIO_LOGIC_LOW);
	}
	return ret;
}
    12c0:	08 95       	ret

000012c2 <main>:
int main(void)
{
	Std_ReturnType l_ret = E_OK;

#if  RUN_MAIN_PROGRAM==ENABLE_FEATURE
	l_ret =  APP_init();
    12c2:	0e 94 95 00 	call	0x12a	; 0x12a <APP_init>
#endif

    while (1) 
    {
#if  RUN_MAIN_PROGRAM==ENABLE_FEATURE	
		l_ret = APP_start_program();
    12c6:	0e 94 bd 00 	call	0x17a	; 0x17a <APP_start_program>
    12ca:	fd cf       	rjmp	.-6      	; 0x12c6 <main+0x4>

000012cc <DIO_pin_direction_intialize>:
static volatile uint8_t *port_registers[PORT_MAX_NUMBER] = {&PORTA, &PORTB, &PORTC, &PORTD};

Std_ReturnType DIO_pin_direction_intialize(const pin_config_t *pin_config_ptr,direction_t a_direction)
{
	Std_ReturnType ret = E_OK;
	if(NULL == pin_config_ptr || (pin_config_ptr->pin > PORT_PIN_MAX_NUMBER-1) || (pin_config_ptr->port > PORT_MAX_NUMBER-1))
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	b1 f1       	breq	.+108    	; 0x133c <DIO_pin_direction_intialize+0x70>
    12d0:	dc 01       	movw	r26, r24
    12d2:	11 96       	adiw	r26, 0x01	; 1
    12d4:	2c 91       	ld	r18, X
    12d6:	11 97       	sbiw	r26, 0x01	; 1
    12d8:	28 30       	cpi	r18, 0x08	; 8
    12da:	90 f5       	brcc	.+100    	; 0x1340 <DIO_pin_direction_intialize+0x74>
    12dc:	ec 91       	ld	r30, X
    12de:	e4 30       	cpi	r30, 0x04	; 4
    12e0:	88 f5       	brcc	.+98     	; 0x1344 <DIO_pin_direction_intialize+0x78>
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(a_direction)
    12e2:	66 23       	and	r22, r22
    12e4:	b1 f0       	breq	.+44     	; 0x1312 <DIO_pin_direction_intialize+0x46>
    12e6:	61 30       	cpi	r22, 0x01	; 1
    12e8:	79 f5       	brne	.+94     	; 0x1348 <DIO_pin_direction_intialize+0x7c>
		{
			case DIO_DIRECTION_OUTPUT:
				SET_BIT(*(ddr_registers[pin_config_ptr->port]),pin_config_ptr->pin);
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	ee 0f       	add	r30, r30
    12ee:	ff 1f       	adc	r31, r31
    12f0:	e6 57       	subi	r30, 0x76	; 118
    12f2:	ff 4f       	sbci	r31, 0xFF	; 255
    12f4:	01 90       	ld	r0, Z+
    12f6:	f0 81       	ld	r31, Z
    12f8:	e0 2d       	mov	r30, r0
    12fa:	30 81       	ld	r19, Z
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <DIO_pin_direction_intialize+0x3a>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	2a 95       	dec	r18
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <DIO_pin_direction_intialize+0x36>
    130a:	83 2b       	or	r24, r19
    130c:	80 83       	st	Z, r24
/* Reference to the Port Status Register (Write data)  */
static volatile uint8_t *port_registers[PORT_MAX_NUMBER] = {&PORTA, &PORTB, &PORTC, &PORTD};

Std_ReturnType DIO_pin_direction_intialize(const pin_config_t *pin_config_ptr,direction_t a_direction)
{
	Std_ReturnType ret = E_OK;
    130e:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(a_direction)
		{
			case DIO_DIRECTION_OUTPUT:
				SET_BIT(*(ddr_registers[pin_config_ptr->port]),pin_config_ptr->pin);
				break;
    1310:	08 95       	ret
			case DIO_DIRECTION_INPUT:
				CLEAR_BIT(*(ddr_registers[pin_config_ptr->port]),pin_config_ptr->pin);
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	ee 0f       	add	r30, r30
    1316:	ff 1f       	adc	r31, r31
    1318:	e6 57       	subi	r30, 0x76	; 118
    131a:	ff 4f       	sbci	r31, 0xFF	; 255
    131c:	01 90       	ld	r0, Z+
    131e:	f0 81       	ld	r31, Z
    1320:	e0 2d       	mov	r30, r0
    1322:	30 81       	ld	r19, Z
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_pin_direction_intialize+0x62>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	2a 95       	dec	r18
    1330:	e2 f7       	brpl	.-8      	; 0x132a <DIO_pin_direction_intialize+0x5e>
    1332:	80 95       	com	r24
    1334:	83 23       	and	r24, r19
    1336:	80 83       	st	Z, r24
/* Reference to the Port Status Register (Write data)  */
static volatile uint8_t *port_registers[PORT_MAX_NUMBER] = {&PORTA, &PORTB, &PORTC, &PORTD};

Std_ReturnType DIO_pin_direction_intialize(const pin_config_t *pin_config_ptr,direction_t a_direction)
{
	Std_ReturnType ret = E_OK;
    1338:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_DIRECTION_OUTPUT:
				SET_BIT(*(ddr_registers[pin_config_ptr->port]),pin_config_ptr->pin);
				break;
			case DIO_DIRECTION_INPUT:
				CLEAR_BIT(*(ddr_registers[pin_config_ptr->port]),pin_config_ptr->pin);
				break;
    133a:	08 95       	ret
Std_ReturnType DIO_pin_direction_intialize(const pin_config_t *pin_config_ptr,direction_t a_direction)
{
	Std_ReturnType ret = E_OK;
	if(NULL == pin_config_ptr || (pin_config_ptr->pin > PORT_PIN_MAX_NUMBER-1) || (pin_config_ptr->port > PORT_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	08 95       	ret
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	08 95       	ret
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	08 95       	ret
				break;
			case DIO_DIRECTION_INPUT:
				CLEAR_BIT(*(ddr_registers[pin_config_ptr->port]),pin_config_ptr->pin);
				break;
			default:
				ret = E_NOT_OK;
    1348:	80 e0       	ldi	r24, 0x00	; 0
				break;				
		}
	}
	return ret;
}
    134a:	08 95       	ret

0000134c <DIO_pin_write_logic>:

Std_ReturnType DIO_pin_write_logic(const pin_config_t *pin_config_ptr, const logic_t a_logic)
{
	Std_ReturnType ret = E_OK;
	if(NULL == pin_config_ptr || (pin_config_ptr->pin > PORT_PIN_MAX_NUMBER-1) || (pin_config_ptr->port > PORT_MAX_NUMBER-1))
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	b9 f1       	breq	.+110    	; 0x13be <DIO_pin_write_logic+0x72>
    1350:	dc 01       	movw	r26, r24
    1352:	11 96       	adiw	r26, 0x01	; 1
    1354:	2c 91       	ld	r18, X
    1356:	11 97       	sbiw	r26, 0x01	; 1
    1358:	28 30       	cpi	r18, 0x08	; 8
    135a:	98 f5       	brcc	.+102    	; 0x13c2 <DIO_pin_write_logic+0x76>
    135c:	ec 91       	ld	r30, X
    135e:	e4 30       	cpi	r30, 0x04	; 4
    1360:	90 f5       	brcc	.+100    	; 0x13c6 <DIO_pin_write_logic+0x7a>
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(a_logic)
    1362:	66 23       	and	r22, r22
    1364:	19 f0       	breq	.+6      	; 0x136c <DIO_pin_write_logic+0x20>
    1366:	61 30       	cpi	r22, 0x01	; 1
    1368:	b1 f0       	breq	.+44     	; 0x1396 <DIO_pin_write_logic+0x4a>
    136a:	2f c0       	rjmp	.+94     	; 0x13ca <DIO_pin_write_logic+0x7e>
		{
			case DIO_LOGIC_LOW:
				CLEAR_BIT(*(port_registers[pin_config_ptr->port]),pin_config_ptr->pin);
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	ee 0f       	add	r30, r30
    1370:	ff 1f       	adc	r31, r31
    1372:	ee 57       	subi	r30, 0x7E	; 126
    1374:	ff 4f       	sbci	r31, 0xFF	; 255
    1376:	01 90       	ld	r0, Z+
    1378:	f0 81       	ld	r31, Z
    137a:	e0 2d       	mov	r30, r0
    137c:	30 81       	ld	r19, Z
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DIO_pin_write_logic+0x3c>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	2a 95       	dec	r18
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DIO_pin_write_logic+0x38>
    138c:	80 95       	com	r24
    138e:	83 23       	and	r24, r19
    1390:	80 83       	st	Z, r24
	return ret;
}

Std_ReturnType DIO_pin_write_logic(const pin_config_t *pin_config_ptr, const logic_t a_logic)
{
	Std_ReturnType ret = E_OK;
    1392:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(a_logic)
		{
			case DIO_LOGIC_LOW:
				CLEAR_BIT(*(port_registers[pin_config_ptr->port]),pin_config_ptr->pin);
				break;
    1394:	08 95       	ret
			case DIO_LOGIC_HIGH:
				SET_BIT(*(port_registers[pin_config_ptr->port]),pin_config_ptr->pin);
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	ee 0f       	add	r30, r30
    139a:	ff 1f       	adc	r31, r31
    139c:	ee 57       	subi	r30, 0x7E	; 126
    139e:	ff 4f       	sbci	r31, 0xFF	; 255
    13a0:	01 90       	ld	r0, Z+
    13a2:	f0 81       	ld	r31, Z
    13a4:	e0 2d       	mov	r30, r0
    13a6:	30 81       	ld	r19, Z
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <DIO_pin_write_logic+0x66>
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	2a 95       	dec	r18
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <DIO_pin_write_logic+0x62>
    13b6:	83 2b       	or	r24, r19
    13b8:	80 83       	st	Z, r24
	return ret;
}

Std_ReturnType DIO_pin_write_logic(const pin_config_t *pin_config_ptr, const logic_t a_logic)
{
	Std_ReturnType ret = E_OK;
    13ba:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_LOGIC_LOW:
				CLEAR_BIT(*(port_registers[pin_config_ptr->port]),pin_config_ptr->pin);
				break;
			case DIO_LOGIC_HIGH:
				SET_BIT(*(port_registers[pin_config_ptr->port]),pin_config_ptr->pin);
				break;
    13bc:	08 95       	ret
Std_ReturnType DIO_pin_write_logic(const pin_config_t *pin_config_ptr, const logic_t a_logic)
{
	Std_ReturnType ret = E_OK;
	if(NULL == pin_config_ptr || (pin_config_ptr->pin > PORT_PIN_MAX_NUMBER-1) || (pin_config_ptr->port > PORT_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	08 95       	ret
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	08 95       	ret
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	08 95       	ret
				break;
			case DIO_LOGIC_HIGH:
				SET_BIT(*(port_registers[pin_config_ptr->port]),pin_config_ptr->pin);
				break;
			default:
				ret = E_NOT_OK;
    13ca:	80 e0       	ldi	r24, 0x00	; 0
				break;
		}
	}
	return ret;
}
    13cc:	08 95       	ret

000013ce <__vector_1>:
static volatile void(*g_EXT_INT0_fptr)(void) = NULL;
static volatile void(*g_EXT_INT1_fptr)(void) = NULL;
static volatile void(*g_EXT_INT2_fptr)(void) = NULL;

ISR(INT0_vect)
{
    13ce:	1f 92       	push	r1
    13d0:	0f 92       	push	r0
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	0f 92       	push	r0
    13d6:	11 24       	eor	r1, r1
    13d8:	2f 93       	push	r18
    13da:	3f 93       	push	r19
    13dc:	4f 93       	push	r20
    13de:	5f 93       	push	r21
    13e0:	6f 93       	push	r22
    13e2:	7f 93       	push	r23
    13e4:	8f 93       	push	r24
    13e6:	9f 93       	push	r25
    13e8:	af 93       	push	r26
    13ea:	bf 93       	push	r27
    13ec:	ef 93       	push	r30
    13ee:	ff 93       	push	r31
	/* The INT0 external interrupt occurred (must be cleared in software) */
	EXT_INT0_InterruptFlagClear();
    13f0:	8a b7       	in	r24, 0x3a	; 58
    13f2:	80 64       	ori	r24, 0x40	; 64
    13f4:	8a bf       	out	0x3a, r24	; 58
	
	if(g_EXT_INT0_fptr)
    13f6:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <g_EXT_INT0_fptr>
    13fa:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <g_EXT_INT0_fptr+0x1>
    13fe:	30 97       	sbiw	r30, 0x00	; 0
    1400:	09 f0       	breq	.+2      	; 0x1404 <__vector_1+0x36>
	{
		/* Application Callback function gets called every time this ISR executes */
		(*g_EXT_INT0_fptr)();
    1402:	09 95       	icall
	}
	else{/*do nothing*/}
}
    1404:	ff 91       	pop	r31
    1406:	ef 91       	pop	r30
    1408:	bf 91       	pop	r27
    140a:	af 91       	pop	r26
    140c:	9f 91       	pop	r25
    140e:	8f 91       	pop	r24
    1410:	7f 91       	pop	r23
    1412:	6f 91       	pop	r22
    1414:	5f 91       	pop	r21
    1416:	4f 91       	pop	r20
    1418:	3f 91       	pop	r19
    141a:	2f 91       	pop	r18
    141c:	0f 90       	pop	r0
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	0f 90       	pop	r0
    1422:	1f 90       	pop	r1
    1424:	18 95       	reti

00001426 <__vector_2>:

ISR(INT1_vect)
{
    1426:	1f 92       	push	r1
    1428:	0f 92       	push	r0
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	0f 92       	push	r0
    142e:	11 24       	eor	r1, r1
    1430:	2f 93       	push	r18
    1432:	3f 93       	push	r19
    1434:	4f 93       	push	r20
    1436:	5f 93       	push	r21
    1438:	6f 93       	push	r22
    143a:	7f 93       	push	r23
    143c:	8f 93       	push	r24
    143e:	9f 93       	push	r25
    1440:	af 93       	push	r26
    1442:	bf 93       	push	r27
    1444:	ef 93       	push	r30
    1446:	ff 93       	push	r31
	/* The INT1 external interrupt occurred (must be cleared in software) */
	EXT_INT1_InterruptFlagClear();
    1448:	8a b7       	in	r24, 0x3a	; 58
    144a:	80 68       	ori	r24, 0x80	; 128
    144c:	8a bf       	out	0x3a, r24	; 58
	if(g_EXT_INT1_fptr)
    144e:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <g_EXT_INT1_fptr>
    1452:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <g_EXT_INT1_fptr+0x1>
    1456:	30 97       	sbiw	r30, 0x00	; 0
    1458:	09 f0       	breq	.+2      	; 0x145c <__vector_2+0x36>
	{
		/* Application Callback function gets called every time this ISR executes */
		(*g_EXT_INT1_fptr)();
    145a:	09 95       	icall
	}
	else{/*do nothing*/}
}
    145c:	ff 91       	pop	r31
    145e:	ef 91       	pop	r30
    1460:	bf 91       	pop	r27
    1462:	af 91       	pop	r26
    1464:	9f 91       	pop	r25
    1466:	8f 91       	pop	r24
    1468:	7f 91       	pop	r23
    146a:	6f 91       	pop	r22
    146c:	5f 91       	pop	r21
    146e:	4f 91       	pop	r20
    1470:	3f 91       	pop	r19
    1472:	2f 91       	pop	r18
    1474:	0f 90       	pop	r0
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	0f 90       	pop	r0
    147a:	1f 90       	pop	r1
    147c:	18 95       	reti

0000147e <__vector_3>:

ISR(INT2_vect)
{
    147e:	1f 92       	push	r1
    1480:	0f 92       	push	r0
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	0f 92       	push	r0
    1486:	11 24       	eor	r1, r1
    1488:	2f 93       	push	r18
    148a:	3f 93       	push	r19
    148c:	4f 93       	push	r20
    148e:	5f 93       	push	r21
    1490:	6f 93       	push	r22
    1492:	7f 93       	push	r23
    1494:	8f 93       	push	r24
    1496:	9f 93       	push	r25
    1498:	af 93       	push	r26
    149a:	bf 93       	push	r27
    149c:	ef 93       	push	r30
    149e:	ff 93       	push	r31
	/* The INT1 external interrupt occurred (must be cleared in software) */
	EXT_INT1_InterruptFlagClear();
    14a0:	8a b7       	in	r24, 0x3a	; 58
    14a2:	80 68       	ori	r24, 0x80	; 128
    14a4:	8a bf       	out	0x3a, r24	; 58
	if(g_EXT_INT2_fptr)
    14a6:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <g_EXT_INT2_fptr>
    14aa:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <g_EXT_INT2_fptr+0x1>
    14ae:	30 97       	sbiw	r30, 0x00	; 0
    14b0:	09 f0       	breq	.+2      	; 0x14b4 <__vector_3+0x36>
	{
		/* Application Callback function gets called every time this ISR executes */
		(*g_EXT_INT2_fptr)();
    14b2:	09 95       	icall
	}
	else{/*do nothing*/}
}
    14b4:	ff 91       	pop	r31
    14b6:	ef 91       	pop	r30
    14b8:	bf 91       	pop	r27
    14ba:	af 91       	pop	r26
    14bc:	9f 91       	pop	r25
    14be:	8f 91       	pop	r24
    14c0:	7f 91       	pop	r23
    14c2:	6f 91       	pop	r22
    14c4:	5f 91       	pop	r21
    14c6:	4f 91       	pop	r20
    14c8:	3f 91       	pop	r19
    14ca:	2f 91       	pop	r18
    14cc:	0f 90       	pop	r0
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	0f 90       	pop	r0
    14d2:	1f 90       	pop	r1
    14d4:	18 95       	reti

000014d6 <EXT_INTx_setCallBack>:

Std_ReturnType EXT_INTx_setCallBack(volatile void(*a_fptr)(void), const Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
	if(NULL == a_fptr || a_interrupt_number > NUM_OF_EXT_INTx - 1)
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	d1 f0       	breq	.+52     	; 0x150e <EXT_INTx_setCallBack+0x38>
    14da:	63 30       	cpi	r22, 0x03	; 3
    14dc:	d0 f4       	brcc	.+52     	; 0x1512 <EXT_INTx_setCallBack+0x3c>
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(a_interrupt_number)
    14de:	61 30       	cpi	r22, 0x01	; 1
    14e0:	51 f0       	breq	.+20     	; 0x14f6 <EXT_INTx_setCallBack+0x20>
    14e2:	18 f0       	brcs	.+6      	; 0x14ea <EXT_INTx_setCallBack+0x14>
    14e4:	62 30       	cpi	r22, 0x02	; 2
    14e6:	69 f0       	breq	.+26     	; 0x1502 <EXT_INTx_setCallBack+0x2c>
    14e8:	16 c0       	rjmp	.+44     	; 0x1516 <EXT_INTx_setCallBack+0x40>
		{
			case INTERRUPT_EXTERNAL_INT0:
				g_EXT_INT0_fptr = a_fptr;
    14ea:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <g_EXT_INT0_fptr+0x1>
    14ee:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <g_EXT_INT0_fptr>
	else{/*do nothing*/}
}

Std_ReturnType EXT_INTx_setCallBack(volatile void(*a_fptr)(void), const Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
    14f2:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(a_interrupt_number)
		{
			case INTERRUPT_EXTERNAL_INT0:
				g_EXT_INT0_fptr = a_fptr;
				break;
    14f4:	08 95       	ret
			case INTERRUPT_EXTERNAL_INT1:
				g_EXT_INT1_fptr = a_fptr;
    14f6:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <g_EXT_INT1_fptr+0x1>
    14fa:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <g_EXT_INT1_fptr>
	else{/*do nothing*/}
}

Std_ReturnType EXT_INTx_setCallBack(volatile void(*a_fptr)(void), const Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
			case INTERRUPT_EXTERNAL_INT0:
				g_EXT_INT0_fptr = a_fptr;
				break;
			case INTERRUPT_EXTERNAL_INT1:
				g_EXT_INT1_fptr = a_fptr;
				break;
    1500:	08 95       	ret
			case INTERRUPT_EXTERNAL_INT2:
				g_EXT_INT2_fptr = a_fptr;
    1502:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <g_EXT_INT2_fptr+0x1>
    1506:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <g_EXT_INT2_fptr>
	else{/*do nothing*/}
}

Std_ReturnType EXT_INTx_setCallBack(volatile void(*a_fptr)(void), const Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
    150a:	81 e0       	ldi	r24, 0x01	; 1
			case INTERRUPT_EXTERNAL_INT1:
				g_EXT_INT1_fptr = a_fptr;
				break;
			case INTERRUPT_EXTERNAL_INT2:
				g_EXT_INT2_fptr = a_fptr;
				break;
    150c:	08 95       	ret
Std_ReturnType EXT_INTx_setCallBack(volatile void(*a_fptr)(void), const Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
	if(NULL == a_fptr || a_interrupt_number > NUM_OF_EXT_INTx - 1)
	{
		ret = E_NOT_OK;
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	08 95       	ret
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	08 95       	ret
				break;
			case INTERRUPT_EXTERNAL_INT2:
				g_EXT_INT2_fptr = a_fptr;
				break;
			default:
				ret = E_NOT_OK;
    1516:	80 e0       	ldi	r24, 0x00	; 0
				break;		
		}	
	}
	return ret;
}
    1518:	08 95       	ret

0000151a <EXT_INTx_setEdgeType>:

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
	if(a_interrupt_Id > NUM_OF_EXT_INTx - 1 || a_edgeType > NOT_VALID_EDGE)
    151a:	63 30       	cpi	r22, 0x03	; 3
    151c:	08 f0       	brcs	.+2      	; 0x1520 <EXT_INTx_setEdgeType+0x6>
    151e:	69 c0       	rjmp	.+210    	; 0x15f2 <EXT_INTx_setEdgeType+0xd8>
    1520:	85 30       	cpi	r24, 0x05	; 5
    1522:	08 f0       	brcs	.+2      	; 0x1526 <EXT_INTx_setEdgeType+0xc>
    1524:	68 c0       	rjmp	.+208    	; 0x15f6 <EXT_INTx_setEdgeType+0xdc>
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(a_interrupt_Id)
    1526:	61 30       	cpi	r22, 0x01	; 1
    1528:	69 f1       	breq	.+90     	; 0x1584 <EXT_INTx_setEdgeType+0x6a>
    152a:	20 f0       	brcs	.+8      	; 0x1534 <EXT_INTx_setEdgeType+0x1a>
    152c:	62 30       	cpi	r22, 0x02	; 2
    152e:	09 f4       	brne	.+2      	; 0x1532 <EXT_INTx_setEdgeType+0x18>
    1530:	51 c0       	rjmp	.+162    	; 0x15d4 <EXT_INTx_setEdgeType+0xba>
    1532:	63 c0       	rjmp	.+198    	; 0x15fa <EXT_INTx_setEdgeType+0xe0>
		{
			case INTERRUPT_EXTERNAL_INT0:
				switch(a_edgeType)
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	71 f0       	breq	.+28     	; 0x1554 <EXT_INTx_setEdgeType+0x3a>
    1538:	28 f0       	brcs	.+10     	; 0x1544 <EXT_INTx_setEdgeType+0x2a>
    153a:	82 30       	cpi	r24, 0x02	; 2
    153c:	99 f0       	breq	.+38     	; 0x1564 <EXT_INTx_setEdgeType+0x4a>
    153e:	83 30       	cpi	r24, 0x03	; 3
    1540:	c9 f0       	breq	.+50     	; 0x1574 <EXT_INTx_setEdgeType+0x5a>
    1542:	5d c0       	rjmp	.+186    	; 0x15fe <EXT_INTx_setEdgeType+0xe4>
				{
					case INTERRUPT_LOW_LEVEL:
						CLEAR_BIT(MCUCR,ISC00);
    1544:	85 b7       	in	r24, 0x35	; 53
    1546:	8e 7f       	andi	r24, 0xFE	; 254
    1548:	85 bf       	out	0x35, r24	; 53
						CLEAR_BIT(MCUCR,ISC01);
    154a:	85 b7       	in	r24, 0x35	; 53
    154c:	8d 7f       	andi	r24, 0xFD	; 253
    154e:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
    1550:	81 e0       	ldi	r24, 0x01	; 1
				switch(a_edgeType)
				{
					case INTERRUPT_LOW_LEVEL:
						CLEAR_BIT(MCUCR,ISC00);
						CLEAR_BIT(MCUCR,ISC01);
						break;
    1552:	08 95       	ret
					case INTERRUPT_ANY_LOGICAL_CHANGE:
						SET_BIT(MCUCR,ISC00);
    1554:	85 b7       	in	r24, 0x35	; 53
    1556:	81 60       	ori	r24, 0x01	; 1
    1558:	85 bf       	out	0x35, r24	; 53
						CLEAR_BIT(MCUCR,ISC01);
    155a:	85 b7       	in	r24, 0x35	; 53
    155c:	8d 7f       	andi	r24, 0xFD	; 253
    155e:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
    1560:	81 e0       	ldi	r24, 0x01	; 1
						CLEAR_BIT(MCUCR,ISC01);
						break;
					case INTERRUPT_ANY_LOGICAL_CHANGE:
						SET_BIT(MCUCR,ISC00);
						CLEAR_BIT(MCUCR,ISC01);
						break;
    1562:	08 95       	ret
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCR,ISC00);
    1564:	85 b7       	in	r24, 0x35	; 53
    1566:	8e 7f       	andi	r24, 0xFE	; 254
    1568:	85 bf       	out	0x35, r24	; 53
						SET_BIT(MCUCR,ISC01);
    156a:	85 b7       	in	r24, 0x35	; 53
    156c:	82 60       	ori	r24, 0x02	; 2
    156e:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
    1570:	81 e0       	ldi	r24, 0x01	; 1
						CLEAR_BIT(MCUCR,ISC01);
						break;
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCR,ISC00);
						SET_BIT(MCUCR,ISC01);
						break;
    1572:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC00);
    1574:	85 b7       	in	r24, 0x35	; 53
    1576:	81 60       	ori	r24, 0x01	; 1
    1578:	85 bf       	out	0x35, r24	; 53
						SET_BIT(MCUCR,ISC01);
    157a:	85 b7       	in	r24, 0x35	; 53
    157c:	82 60       	ori	r24, 0x02	; 2
    157e:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
    1580:	81 e0       	ldi	r24, 0x01	; 1
						SET_BIT(MCUCR,ISC01);
						break;
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC00);
						SET_BIT(MCUCR,ISC01);
						break;
    1582:	08 95       	ret
				}
				break;
			
			case INTERRUPT_EXTERNAL_INT1:
			
				switch(a_edgeType)
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	71 f0       	breq	.+28     	; 0x15a4 <EXT_INTx_setEdgeType+0x8a>
    1588:	28 f0       	brcs	.+10     	; 0x1594 <EXT_INTx_setEdgeType+0x7a>
    158a:	82 30       	cpi	r24, 0x02	; 2
    158c:	99 f0       	breq	.+38     	; 0x15b4 <EXT_INTx_setEdgeType+0x9a>
    158e:	83 30       	cpi	r24, 0x03	; 3
    1590:	c9 f0       	breq	.+50     	; 0x15c4 <EXT_INTx_setEdgeType+0xaa>
    1592:	37 c0       	rjmp	.+110    	; 0x1602 <EXT_INTx_setEdgeType+0xe8>
				{
					case INTERRUPT_LOW_LEVEL:
						CLEAR_BIT(MCUCR,ISC10);
    1594:	85 b7       	in	r24, 0x35	; 53
    1596:	8b 7f       	andi	r24, 0xFB	; 251
    1598:	85 bf       	out	0x35, r24	; 53
						CLEAR_BIT(MCUCR,ISC11);
    159a:	85 b7       	in	r24, 0x35	; 53
    159c:	87 7f       	andi	r24, 0xF7	; 247
    159e:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
    15a0:	81 e0       	ldi	r24, 0x01	; 1
				switch(a_edgeType)
				{
					case INTERRUPT_LOW_LEVEL:
						CLEAR_BIT(MCUCR,ISC10);
						CLEAR_BIT(MCUCR,ISC11);
						break;
    15a2:	08 95       	ret
					case INTERRUPT_ANY_LOGICAL_CHANGE:
						SET_BIT(MCUCR,ISC10);
    15a4:	85 b7       	in	r24, 0x35	; 53
    15a6:	84 60       	ori	r24, 0x04	; 4
    15a8:	85 bf       	out	0x35, r24	; 53
						CLEAR_BIT(MCUCR,ISC11);
    15aa:	85 b7       	in	r24, 0x35	; 53
    15ac:	87 7f       	andi	r24, 0xF7	; 247
    15ae:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
    15b0:	81 e0       	ldi	r24, 0x01	; 1
						CLEAR_BIT(MCUCR,ISC11);
						break;
					case INTERRUPT_ANY_LOGICAL_CHANGE:
						SET_BIT(MCUCR,ISC10);
						CLEAR_BIT(MCUCR,ISC11);
						break;
    15b2:	08 95       	ret
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCR,ISC10);
    15b4:	85 b7       	in	r24, 0x35	; 53
    15b6:	8b 7f       	andi	r24, 0xFB	; 251
    15b8:	85 bf       	out	0x35, r24	; 53
						SET_BIT(MCUCR,ISC11);
    15ba:	85 b7       	in	r24, 0x35	; 53
    15bc:	88 60       	ori	r24, 0x08	; 8
    15be:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
    15c0:	81 e0       	ldi	r24, 0x01	; 1
						CLEAR_BIT(MCUCR,ISC11);
						break;
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCR,ISC10);
						SET_BIT(MCUCR,ISC11);
						break;
    15c2:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC10);
    15c4:	85 b7       	in	r24, 0x35	; 53
    15c6:	84 60       	ori	r24, 0x04	; 4
    15c8:	85 bf       	out	0x35, r24	; 53
						SET_BIT(MCUCR,ISC11);
    15ca:	85 b7       	in	r24, 0x35	; 53
    15cc:	88 60       	ori	r24, 0x08	; 8
    15ce:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
						SET_BIT(MCUCR,ISC11);
						break;
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC10);
						SET_BIT(MCUCR,ISC11);
						break;
    15d2:	08 95       	ret
				}
				break;
			
			case INTERRUPT_EXTERNAL_INT2:
			
				switch(a_edgeType)
    15d4:	82 30       	cpi	r24, 0x02	; 2
    15d6:	19 f0       	breq	.+6      	; 0x15de <EXT_INTx_setEdgeType+0xc4>
    15d8:	83 30       	cpi	r24, 0x03	; 3
    15da:	31 f0       	breq	.+12     	; 0x15e8 <EXT_INTx_setEdgeType+0xce>
    15dc:	14 c0       	rjmp	.+40     	; 0x1606 <EXT_INTx_setEdgeType+0xec>
				{
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCSR,ISC2);
    15de:	84 b7       	in	r24, 0x34	; 52
    15e0:	8f 7b       	andi	r24, 0xBF	; 191
    15e2:	84 bf       	out	0x34, r24	; 52
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
			
				switch(a_edgeType)
				{
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCSR,ISC2);
						break;
    15e6:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCSR,ISC2);
    15e8:	84 b7       	in	r24, 0x34	; 52
    15ea:	80 64       	ori	r24, 0x40	; 64
    15ec:	84 bf       	out	0x34, r24	; 52
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCSR,ISC2);
						break;
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCSR,ISC2);
						break;
    15f0:	08 95       	ret
Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
	if(a_interrupt_Id > NUM_OF_EXT_INTx - 1 || a_edgeType > NOT_VALID_EDGE)
	{
		ret = E_NOT_OK;
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	08 95       	ret
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	08 95       	ret
						break;
				}
				break;
			
			default:
				ret = E_NOT_OK;
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC00);
						SET_BIT(MCUCR,ISC01);
						break;
					default:
						ret = E_NOT_OK;
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC10);
						SET_BIT(MCUCR,ISC11);
						break;
					default:
						ret = E_NOT_OK;
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	08 95       	ret
						break;
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCSR,ISC2);
						break;
					default:
						ret = E_NOT_OK;
    1606:	80 e0       	ldi	r24, 0x00	; 0
				ret = E_NOT_OK;
				break;
		}
	}
	return ret;
}
    1608:	08 95       	ret

0000160a <EXT_INTx_Init>:

Std_ReturnType EXT_INTx_Init(const Interrupt_Config_t *Interrupt_Config_Ptr )
{
    160a:	1f 93       	push	r17
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	00 d0       	rcall	.+0      	; 0x1612 <EXT_INTx_Init+0x8>
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_OK;
	if(NULL == Interrupt_Config_Ptr || Interrupt_Config_Ptr->source_id > NUM_OF_EXT_INTx - 1)
    1616:	00 97       	sbiw	r24, 0x00	; 0
    1618:	09 f4       	brne	.+2      	; 0x161c <EXT_INTx_Init+0x12>
    161a:	57 c0       	rjmp	.+174    	; 0x16ca <EXT_INTx_Init+0xc0>
    161c:	fc 01       	movw	r30, r24
    161e:	21 81       	ldd	r18, Z+1	; 0x01
    1620:	23 30       	cpi	r18, 0x03	; 3
    1622:	08 f0       	brcs	.+2      	; 0x1626 <EXT_INTx_Init+0x1c>
    1624:	54 c0       	rjmp	.+168    	; 0x16ce <EXT_INTx_Init+0xc4>
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(Interrupt_Config_Ptr->source_id)
    1626:	21 30       	cpi	r18, 0x01	; 1
    1628:	e9 f0       	breq	.+58     	; 0x1664 <EXT_INTx_Init+0x5a>
    162a:	18 f0       	brcs	.+6      	; 0x1632 <EXT_INTx_Init+0x28>
    162c:	22 30       	cpi	r18, 0x02	; 2
    162e:	91 f1       	breq	.+100    	; 0x1694 <EXT_INTx_Init+0x8a>
    1630:	4a c0       	rjmp	.+148    	; 0x16c6 <EXT_INTx_Init+0xbc>
		{
			case INTERRUPT_EXTERNAL_INT0:
			
				/* Disable the External interrupt */
				EXT_INT0_InterruptDisable();
    1632:	2b b7       	in	r18, 0x3b	; 59
    1634:	2f 7b       	andi	r18, 0xBF	; 191
    1636:	2b bf       	out	0x3b, r18	; 59
				/* Clear Interrupt Flag : External interrupt did not occur */
				EXT_INT0_InterruptFlagClear();
    1638:	2a b7       	in	r18, 0x3a	; 58
    163a:	20 64       	ori	r18, 0x40	; 64
    163c:	2a bf       	out	0x3a, r18	; 58
				/* Configure External interrupt edge */
				ret = EXT_INTx_setEdgeType(Interrupt_Config_Ptr->edge,INTERRUPT_EXTERNAL_INT0);
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	0e 94 8d 0a 	call	0x151a	; 0x151a <EXT_INTx_setEdgeType>
    1646:	18 2f       	mov	r17, r24
				/* Configure External interrupt I/O pin */
				pin_config_t INT0_PIN={.pin=PIN2,.port=PORTD_INDEX};
    1648:	83 e0       	ldi	r24, 0x03	; 3
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	82 e0       	ldi	r24, 0x02	; 2
    164e:	8a 83       	std	Y+2, r24	; 0x02
				ret |= DIO_pin_direction_intialize(&INT0_PIN,DIO_DIRECTION_INPUT);
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	ce 01       	movw	r24, r28
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	0e 94 66 09 	call	0x12cc	; 0x12cc <DIO_pin_direction_intialize>
    165a:	81 2b       	or	r24, r17
				/* Enable the External interrupt */
				EXT_INT0_InterruptEnable();
    165c:	9b b7       	in	r25, 0x3b	; 59
    165e:	90 64       	ori	r25, 0x40	; 64
    1660:	9b bf       	out	0x3b, r25	; 59
				break;
    1662:	36 c0       	rjmp	.+108    	; 0x16d0 <EXT_INTx_Init+0xc6>
				
			case INTERRUPT_EXTERNAL_INT1:
			
				/* Disable the External interrupt */
				EXT_INT1_InterruptDisable();
    1664:	2b b7       	in	r18, 0x3b	; 59
    1666:	2f 77       	andi	r18, 0x7F	; 127
    1668:	2b bf       	out	0x3b, r18	; 59
				/* Clear Interrupt Flag : External interrupt did not occur */
				EXT_INT1_InterruptFlagClear();
    166a:	2a b7       	in	r18, 0x3a	; 58
    166c:	20 68       	ori	r18, 0x80	; 128
    166e:	2a bf       	out	0x3a, r18	; 58
				/* Configure External interrupt edge */
				ret = EXT_INTx_setEdgeType(Interrupt_Config_Ptr->edge,INTERRUPT_EXTERNAL_INT1);
    1670:	61 e0       	ldi	r22, 0x01	; 1
    1672:	80 81       	ld	r24, Z
    1674:	0e 94 8d 0a 	call	0x151a	; 0x151a <EXT_INTx_setEdgeType>
    1678:	18 2f       	mov	r17, r24
				/* Configure External interrupt I/O pin */
				pin_config_t INT1_PIN={.pin=PIN3,.port=PORTD_INDEX};
    167a:	83 e0       	ldi	r24, 0x03	; 3
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	8a 83       	std	Y+2, r24	; 0x02
				ret |= DIO_pin_direction_intialize(&INT1_PIN,DIO_DIRECTION_INPUT);
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	ce 01       	movw	r24, r28
    1684:	01 96       	adiw	r24, 0x01	; 1
    1686:	0e 94 66 09 	call	0x12cc	; 0x12cc <DIO_pin_direction_intialize>
    168a:	81 2b       	or	r24, r17
				/* Enable the External interrupt */
				EXT_INT1_InterruptEnable();
    168c:	9b b7       	in	r25, 0x3b	; 59
    168e:	90 68       	ori	r25, 0x80	; 128
    1690:	9b bf       	out	0x3b, r25	; 59
				break;
    1692:	1e c0       	rjmp	.+60     	; 0x16d0 <EXT_INTx_Init+0xc6>
				
				
			case INTERRUPT_EXTERNAL_INT2:
			
				/* Disable the External interrupt */
				EXT_INT2_InterruptDisable();
    1694:	2b b7       	in	r18, 0x3b	; 59
    1696:	2f 7d       	andi	r18, 0xDF	; 223
    1698:	2b bf       	out	0x3b, r18	; 59
				/* Clear Interrupt Flag : External interrupt did not occur */
				EXT_INT2_InterruptFlagClear();
    169a:	2a b7       	in	r18, 0x3a	; 58
    169c:	20 62       	ori	r18, 0x20	; 32
    169e:	2a bf       	out	0x3a, r18	; 58
				/* Configure External interrupt edge */
				ret = EXT_INTx_setEdgeType(Interrupt_Config_Ptr->edge,INTERRUPT_EXTERNAL_INT2);
    16a0:	62 e0       	ldi	r22, 0x02	; 2
    16a2:	80 81       	ld	r24, Z
    16a4:	0e 94 8d 0a 	call	0x151a	; 0x151a <EXT_INTx_setEdgeType>
    16a8:	18 2f       	mov	r17, r24
				/* Configure External interrupt I/O pin */
				pin_config_t INT2_PIN={.pin=PIN2,.port=PORTB};
    16aa:	88 b3       	in	r24, 0x18	; 24
    16ac:	89 83       	std	Y+1, r24	; 0x01
    16ae:	82 e0       	ldi	r24, 0x02	; 2
    16b0:	8a 83       	std	Y+2, r24	; 0x02
				ret |= DIO_pin_direction_intialize(&INT2_PIN,DIO_DIRECTION_INPUT);
    16b2:	60 e0       	ldi	r22, 0x00	; 0
    16b4:	ce 01       	movw	r24, r28
    16b6:	01 96       	adiw	r24, 0x01	; 1
    16b8:	0e 94 66 09 	call	0x12cc	; 0x12cc <DIO_pin_direction_intialize>
    16bc:	81 2b       	or	r24, r17
				/* Enable the External interrupt */
				EXT_INT1_InterruptEnable();
    16be:	9b b7       	in	r25, 0x3b	; 59
    16c0:	90 68       	ori	r25, 0x80	; 128
    16c2:	9b bf       	out	0x3b, r25	; 59
				break;
    16c4:	05 c0       	rjmp	.+10     	; 0x16d0 <EXT_INTx_Init+0xc6>
				
			default:
				ret = E_NOT_OK;
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	03 c0       	rjmp	.+6      	; 0x16d0 <EXT_INTx_Init+0xc6>
Std_ReturnType EXT_INTx_Init(const Interrupt_Config_t *Interrupt_Config_Ptr )
{
	Std_ReturnType ret = E_OK;
	if(NULL == Interrupt_Config_Ptr || Interrupt_Config_Ptr->source_id > NUM_OF_EXT_INTx - 1)
	{
		ret = E_NOT_OK;
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	01 c0       	rjmp	.+2      	; 0x16d0 <EXT_INTx_Init+0xc6>
    16ce:	80 e0       	ldi	r24, 0x00	; 0
				ret = E_NOT_OK;
				break;
		}
	}
	return ret;
}
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	1f 91       	pop	r17
    16da:	08 95       	ret

000016dc <TIMERx_selectClk>:
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
	if( (en_a_timer_type >= INVALID_TIMER_TYPE) || (en_a_timer_clk >= INVALID_TIMER_CLK) )
    16dc:	83 30       	cpi	r24, 0x03	; 3
    16de:	08 f0       	brcs	.+2      	; 0x16e2 <TIMERx_selectClk+0x6>
    16e0:	34 c1       	rjmp	.+616    	; 0x194a <TIMERx_selectClk+0x26e>
    16e2:	6a 30       	cpi	r22, 0x0A	; 10
    16e4:	08 f0       	brcs	.+2      	; 0x16e8 <TIMERx_selectClk+0xc>
    16e6:	33 c1       	rjmp	.+614    	; 0x194e <TIMERx_selectClk+0x272>
	{
		l_ret = E_NOT_OK;
	}
	else
	{
		switch(en_a_timer_type)
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	09 f4       	brne	.+2      	; 0x16ee <TIMERx_selectClk+0x12>
    16ec:	68 c0       	rjmp	.+208    	; 0x17be <TIMERx_selectClk+0xe2>
    16ee:	20 f0       	brcs	.+8      	; 0x16f8 <TIMERx_selectClk+0x1c>
    16f0:	82 30       	cpi	r24, 0x02	; 2
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <TIMERx_selectClk+0x1a>
    16f4:	c7 c0       	rjmp	.+398    	; 0x1884 <TIMERx_selectClk+0x1a8>
    16f6:	2d c1       	rjmp	.+602    	; 0x1952 <TIMERx_selectClk+0x276>
		{
			case Timer0:
				switch(en_a_timer_clk)
    16f8:	86 2f       	mov	r24, r22
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	8a 30       	cpi	r24, 0x0A	; 10
    16fe:	91 05       	cpc	r25, r1
    1700:	08 f0       	brcs	.+2      	; 0x1704 <TIMERx_selectClk+0x28>
    1702:	29 c1       	rjmp	.+594    	; 0x1956 <TIMERx_selectClk+0x27a>
    1704:	fc 01       	movw	r30, r24
    1706:	ee 5c       	subi	r30, 0xCE	; 206
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__tablejump2__>
				{
					case NO_CLOCK:
						CLEAR_BIT(TCCR0,CS00);
    170e:	83 b7       	in	r24, 0x33	; 51
    1710:	8e 7f       	andi	r24, 0xFE	; 254
    1712:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS01);
    1714:	83 b7       	in	r24, 0x33	; 51
    1716:	8d 7f       	andi	r24, 0xFD	; 253
    1718:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS02);
    171a:	83 b7       	in	r24, 0x33	; 51
    171c:	8b 7f       	andi	r24, 0xFB	; 251
    171e:	83 bf       	out	0x33, r24	; 51
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    1720:	81 e0       	ldi	r24, 0x01	; 1
				{
					case NO_CLOCK:
						CLEAR_BIT(TCCR0,CS00);
						CLEAR_BIT(TCCR0,CS01);
						CLEAR_BIT(TCCR0,CS02);
						break;
    1722:	08 95       	ret
					case F_CPU_CLOCK:
						SET_BIT(TCCR0,CS00);
    1724:	83 b7       	in	r24, 0x33	; 51
    1726:	81 60       	ori	r24, 0x01	; 1
    1728:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS01);
    172a:	83 b7       	in	r24, 0x33	; 51
    172c:	8d 7f       	andi	r24, 0xFD	; 253
    172e:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS02);
    1730:	83 b7       	in	r24, 0x33	; 51
    1732:	8b 7f       	andi	r24, 0xFB	; 251
    1734:	83 bf       	out	0x33, r24	; 51
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    1736:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_CLOCK:
						SET_BIT(TCCR0,CS00);
						CLEAR_BIT(TCCR0,CS01);
						CLEAR_BIT(TCCR0,CS02);
						break;
    1738:	08 95       	ret
					case F_CPU_8:
						CLEAR_BIT(TCCR0,CS00);
    173a:	83 b7       	in	r24, 0x33	; 51
    173c:	8e 7f       	andi	r24, 0xFE	; 254
    173e:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS01);
    1740:	83 b7       	in	r24, 0x33	; 51
    1742:	82 60       	ori	r24, 0x02	; 2
    1744:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS02);
    1746:	83 b7       	in	r24, 0x33	; 51
    1748:	8b 7f       	andi	r24, 0xFB	; 251
    174a:	83 bf       	out	0x33, r24	; 51
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    174c:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_8:
						CLEAR_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						CLEAR_BIT(TCCR0,CS02);
						break;
    174e:	08 95       	ret
					case F_CPU_64:
						SET_BIT(TCCR0,CS00);
    1750:	83 b7       	in	r24, 0x33	; 51
    1752:	81 60       	ori	r24, 0x01	; 1
    1754:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS01);
    1756:	83 b7       	in	r24, 0x33	; 51
    1758:	82 60       	ori	r24, 0x02	; 2
    175a:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS02);
    175c:	83 b7       	in	r24, 0x33	; 51
    175e:	8b 7f       	andi	r24, 0xFB	; 251
    1760:	83 bf       	out	0x33, r24	; 51
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    1762:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_64:
						SET_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						CLEAR_BIT(TCCR0,CS02);
						break;
    1764:	08 95       	ret
					case F_CPU_256:
						CLEAR_BIT(TCCR0,CS00);
    1766:	83 b7       	in	r24, 0x33	; 51
    1768:	8e 7f       	andi	r24, 0xFE	; 254
    176a:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS01);
    176c:	83 b7       	in	r24, 0x33	; 51
    176e:	8d 7f       	andi	r24, 0xFD	; 253
    1770:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS02);
    1772:	83 b7       	in	r24, 0x33	; 51
    1774:	84 60       	ori	r24, 0x04	; 4
    1776:	83 bf       	out	0x33, r24	; 51
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    1778:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_256:
						CLEAR_BIT(TCCR0,CS00);
						CLEAR_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);
						break;
    177a:	08 95       	ret
					case F_CPU_1024:
						SET_BIT(TCCR0,CS00);
    177c:	83 b7       	in	r24, 0x33	; 51
    177e:	81 60       	ori	r24, 0x01	; 1
    1780:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS01);
    1782:	83 b7       	in	r24, 0x33	; 51
    1784:	8d 7f       	andi	r24, 0xFD	; 253
    1786:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS02);	
    1788:	83 b7       	in	r24, 0x33	; 51
    178a:	84 60       	ori	r24, 0x04	; 4
    178c:	83 bf       	out	0x33, r24	; 51
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    178e:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_1024:
						SET_BIT(TCCR0,CS00);
						CLEAR_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);	
						break;
    1790:	08 95       	ret
					case TIMER_EXTERNAL_CLK_FALLING_EDGE:
						CLEAR_BIT(TCCR0,CS00);
    1792:	83 b7       	in	r24, 0x33	; 51
    1794:	8e 7f       	andi	r24, 0xFE	; 254
    1796:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS01);
    1798:	83 b7       	in	r24, 0x33	; 51
    179a:	82 60       	ori	r24, 0x02	; 2
    179c:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS02);
    179e:	83 b7       	in	r24, 0x33	; 51
    17a0:	84 60       	ori	r24, 0x04	; 4
    17a2:	83 bf       	out	0x33, r24	; 51
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    17a4:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case TIMER_EXTERNAL_CLK_FALLING_EDGE:
						CLEAR_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);
						break;
    17a6:	08 95       	ret
					case TIMER_EXTERNAL_CLK_RISING_EDGE:
						SET_BIT(TCCR0,CS00);
    17a8:	83 b7       	in	r24, 0x33	; 51
    17aa:	81 60       	ori	r24, 0x01	; 1
    17ac:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS01);
    17ae:	83 b7       	in	r24, 0x33	; 51
    17b0:	82 60       	ori	r24, 0x02	; 2
    17b2:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS02);
    17b4:	83 b7       	in	r24, 0x33	; 51
    17b6:	84 60       	ori	r24, 0x04	; 4
    17b8:	83 bf       	out	0x33, r24	; 51
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case TIMER_EXTERNAL_CLK_RISING_EDGE:
						SET_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);
						break;
    17bc:	08 95       	ret
						break;
				}
				break;
				
			case Timer1:
				switch(en_a_timer_clk)
    17be:	86 2f       	mov	r24, r22
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	8a 30       	cpi	r24, 0x0A	; 10
    17c4:	91 05       	cpc	r25, r1
    17c6:	08 f0       	brcs	.+2      	; 0x17ca <TIMERx_selectClk+0xee>
    17c8:	c8 c0       	rjmp	.+400    	; 0x195a <TIMERx_selectClk+0x27e>
    17ca:	fc 01       	movw	r30, r24
    17cc:	e4 5c       	subi	r30, 0xC4	; 196
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__tablejump2__>
				{
					case NO_CLOCK:
						CLEAR_BIT(TCCR1B,CS10);
    17d4:	8e b5       	in	r24, 0x2e	; 46
    17d6:	8e 7f       	andi	r24, 0xFE	; 254
    17d8:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS11);
    17da:	8e b5       	in	r24, 0x2e	; 46
    17dc:	8d 7f       	andi	r24, 0xFD	; 253
    17de:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS12);
    17e0:	8e b5       	in	r24, 0x2e	; 46
    17e2:	8b 7f       	andi	r24, 0xFB	; 251
    17e4:	8e bd       	out	0x2e, r24	; 46
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    17e6:	81 e0       	ldi	r24, 0x01	; 1
				{
					case NO_CLOCK:
						CLEAR_BIT(TCCR1B,CS10);
						CLEAR_BIT(TCCR1B,CS11);
						CLEAR_BIT(TCCR1B,CS12);
						break;
    17e8:	08 95       	ret
					case F_CPU_CLOCK:
						SET_BIT(TCCR1B,CS10);
    17ea:	8e b5       	in	r24, 0x2e	; 46
    17ec:	81 60       	ori	r24, 0x01	; 1
    17ee:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS11);
    17f0:	8e b5       	in	r24, 0x2e	; 46
    17f2:	8d 7f       	andi	r24, 0xFD	; 253
    17f4:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS12);
    17f6:	8e b5       	in	r24, 0x2e	; 46
    17f8:	8b 7f       	andi	r24, 0xFB	; 251
    17fa:	8e bd       	out	0x2e, r24	; 46
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_CLOCK:
						SET_BIT(TCCR1B,CS10);
						CLEAR_BIT(TCCR1B,CS11);
						CLEAR_BIT(TCCR1B,CS12);
						break;
    17fe:	08 95       	ret
					case F_CPU_8:
						CLEAR_BIT(TCCR1B,CS10);
    1800:	8e b5       	in	r24, 0x2e	; 46
    1802:	8e 7f       	andi	r24, 0xFE	; 254
    1804:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS11);
    1806:	8e b5       	in	r24, 0x2e	; 46
    1808:	82 60       	ori	r24, 0x02	; 2
    180a:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS12);
    180c:	8e b5       	in	r24, 0x2e	; 46
    180e:	8b 7f       	andi	r24, 0xFB	; 251
    1810:	8e bd       	out	0x2e, r24	; 46
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    1812:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_8:
						CLEAR_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						CLEAR_BIT(TCCR1B,CS12);
						break;
    1814:	08 95       	ret
					case F_CPU_64:
						SET_BIT(TCCR1B,CS10);
    1816:	8e b5       	in	r24, 0x2e	; 46
    1818:	81 60       	ori	r24, 0x01	; 1
    181a:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS11);
    181c:	8e b5       	in	r24, 0x2e	; 46
    181e:	82 60       	ori	r24, 0x02	; 2
    1820:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS12);
    1822:	8e b5       	in	r24, 0x2e	; 46
    1824:	8b 7f       	andi	r24, 0xFB	; 251
    1826:	8e bd       	out	0x2e, r24	; 46
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    1828:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_64:
						SET_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						CLEAR_BIT(TCCR1B,CS12);
						break;
    182a:	08 95       	ret
					case F_CPU_256:
						CLEAR_BIT(TCCR1B,CS10);
    182c:	8e b5       	in	r24, 0x2e	; 46
    182e:	8e 7f       	andi	r24, 0xFE	; 254
    1830:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS11);
    1832:	8e b5       	in	r24, 0x2e	; 46
    1834:	8d 7f       	andi	r24, 0xFD	; 253
    1836:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS12);
    1838:	8e b5       	in	r24, 0x2e	; 46
    183a:	84 60       	ori	r24, 0x04	; 4
    183c:	8e bd       	out	0x2e, r24	; 46
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    183e:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_256:
						CLEAR_BIT(TCCR1B,CS10);
						CLEAR_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);
						break;
    1840:	08 95       	ret
					case F_CPU_1024:
						SET_BIT(TCCR1B,CS10);
    1842:	8e b5       	in	r24, 0x2e	; 46
    1844:	81 60       	ori	r24, 0x01	; 1
    1846:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS11);
    1848:	8e b5       	in	r24, 0x2e	; 46
    184a:	8d 7f       	andi	r24, 0xFD	; 253
    184c:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS12);	
    184e:	8e b5       	in	r24, 0x2e	; 46
    1850:	84 60       	ori	r24, 0x04	; 4
    1852:	8e bd       	out	0x2e, r24	; 46
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    1854:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_1024:
						SET_BIT(TCCR1B,CS10);
						CLEAR_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);	
						break;
    1856:	08 95       	ret
					case TIMER_EXTERNAL_CLK_FALLING_EDGE:
						CLEAR_BIT(TCCR1B,CS10);
    1858:	8e b5       	in	r24, 0x2e	; 46
    185a:	8e 7f       	andi	r24, 0xFE	; 254
    185c:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS11);
    185e:	8e b5       	in	r24, 0x2e	; 46
    1860:	82 60       	ori	r24, 0x02	; 2
    1862:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS12);
    1864:	8e b5       	in	r24, 0x2e	; 46
    1866:	84 60       	ori	r24, 0x04	; 4
    1868:	8e bd       	out	0x2e, r24	; 46
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    186a:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case TIMER_EXTERNAL_CLK_FALLING_EDGE:
						CLEAR_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);
						break;
    186c:	08 95       	ret
					case TIMER_EXTERNAL_CLK_RISING_EDGE:
						SET_BIT(TCCR1B,CS10);
    186e:	8e b5       	in	r24, 0x2e	; 46
    1870:	81 60       	ori	r24, 0x01	; 1
    1872:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS11);
    1874:	8e b5       	in	r24, 0x2e	; 46
    1876:	82 60       	ori	r24, 0x02	; 2
    1878:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS12);
    187a:	8e b5       	in	r24, 0x2e	; 46
    187c:	84 60       	ori	r24, 0x04	; 4
    187e:	8e bd       	out	0x2e, r24	; 46
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    1880:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case TIMER_EXTERNAL_CLK_RISING_EDGE:
						SET_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);
						break;
    1882:	08 95       	ret
						break;
				}			
				break;
				
			case Timer2:
				switch(en_a_timer_clk)
    1884:	86 2f       	mov	r24, r22
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	88 30       	cpi	r24, 0x08	; 8
    188a:	91 05       	cpc	r25, r1
    188c:	08 f0       	brcs	.+2      	; 0x1890 <TIMERx_selectClk+0x1b4>
    188e:	67 c0       	rjmp	.+206    	; 0x195e <TIMERx_selectClk+0x282>
    1890:	fc 01       	movw	r30, r24
    1892:	ea 5b       	subi	r30, 0xBA	; 186
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__tablejump2__>
				{
					case NO_CLOCK:
						CLEAR_BIT(TCCR2,CS20);
    189a:	85 b5       	in	r24, 0x25	; 37
    189c:	8b 7f       	andi	r24, 0xFB	; 251
    189e:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS21);
    18a0:	85 b5       	in	r24, 0x25	; 37
    18a2:	8d 7f       	andi	r24, 0xFD	; 253
    18a4:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS22);
    18a6:	85 b5       	in	r24, 0x25	; 37
    18a8:	8e 7f       	andi	r24, 0xFE	; 254
    18aa:	85 bd       	out	0x25, r24	; 37
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    18ac:	81 e0       	ldi	r24, 0x01	; 1
				{
					case NO_CLOCK:
						CLEAR_BIT(TCCR2,CS20);
						CLEAR_BIT(TCCR2,CS21);
						CLEAR_BIT(TCCR2,CS22);
						break;
    18ae:	08 95       	ret
					case F_CPU_CLOCK:
						SET_BIT(TCCR2,CS20);
    18b0:	85 b5       	in	r24, 0x25	; 37
    18b2:	84 60       	ori	r24, 0x04	; 4
    18b4:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS21);
    18b6:	85 b5       	in	r24, 0x25	; 37
    18b8:	8d 7f       	andi	r24, 0xFD	; 253
    18ba:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS22);
    18bc:	85 b5       	in	r24, 0x25	; 37
    18be:	8e 7f       	andi	r24, 0xFE	; 254
    18c0:	85 bd       	out	0x25, r24	; 37
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_CLOCK:
						SET_BIT(TCCR2,CS20);
						CLEAR_BIT(TCCR2,CS21);
						CLEAR_BIT(TCCR2,CS22);
						break;
    18c4:	08 95       	ret
					case F_CPU_8:
						CLEAR_BIT(TCCR2,CS20);
    18c6:	85 b5       	in	r24, 0x25	; 37
    18c8:	8b 7f       	andi	r24, 0xFB	; 251
    18ca:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS21);
    18cc:	85 b5       	in	r24, 0x25	; 37
    18ce:	82 60       	ori	r24, 0x02	; 2
    18d0:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS22);
    18d2:	85 b5       	in	r24, 0x25	; 37
    18d4:	8e 7f       	andi	r24, 0xFE	; 254
    18d6:	85 bd       	out	0x25, r24	; 37
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_8:
						CLEAR_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						CLEAR_BIT(TCCR2,CS22);
						break;
    18da:	08 95       	ret
					case F_CPU_32:
						SET_BIT(TCCR2,CS20);
    18dc:	85 b5       	in	r24, 0x25	; 37
    18de:	84 60       	ori	r24, 0x04	; 4
    18e0:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS21);
    18e2:	85 b5       	in	r24, 0x25	; 37
    18e4:	82 60       	ori	r24, 0x02	; 2
    18e6:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS22);
    18e8:	85 b5       	in	r24, 0x25	; 37
    18ea:	8e 7f       	andi	r24, 0xFE	; 254
    18ec:	85 bd       	out	0x25, r24	; 37
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_32:
						SET_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						CLEAR_BIT(TCCR2,CS22);
						break;
    18f0:	08 95       	ret
					case F_CPU_64:
						CLEAR_BIT(TCCR2,CS20);
    18f2:	85 b5       	in	r24, 0x25	; 37
    18f4:	8b 7f       	andi	r24, 0xFB	; 251
    18f6:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS21);
    18f8:	85 b5       	in	r24, 0x25	; 37
    18fa:	8d 7f       	andi	r24, 0xFD	; 253
    18fc:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS22);
    18fe:	85 b5       	in	r24, 0x25	; 37
    1900:	81 60       	ori	r24, 0x01	; 1
    1902:	85 bd       	out	0x25, r24	; 37
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    1904:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_64:
						CLEAR_BIT(TCCR2,CS20);
						CLEAR_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);
						break;
    1906:	08 95       	ret
					case F_CPU_128:
						SET_BIT(TCCR2,CS20);
    1908:	85 b5       	in	r24, 0x25	; 37
    190a:	84 60       	ori	r24, 0x04	; 4
    190c:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS21);
    190e:	85 b5       	in	r24, 0x25	; 37
    1910:	8d 7f       	andi	r24, 0xFD	; 253
    1912:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS22);
    1914:	85 b5       	in	r24, 0x25	; 37
    1916:	81 60       	ori	r24, 0x01	; 1
    1918:	85 bd       	out	0x25, r24	; 37
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    191a:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_128:
						SET_BIT(TCCR2,CS20);
						CLEAR_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);
						break;
    191c:	08 95       	ret
					case F_CPU_256:
						CLEAR_BIT(TCCR2,CS20);
    191e:	85 b5       	in	r24, 0x25	; 37
    1920:	8b 7f       	andi	r24, 0xFB	; 251
    1922:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS21);
    1924:	85 b5       	in	r24, 0x25	; 37
    1926:	82 60       	ori	r24, 0x02	; 2
    1928:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS22);
    192a:	85 b5       	in	r24, 0x25	; 37
    192c:	81 60       	ori	r24, 0x01	; 1
    192e:	85 bd       	out	0x25, r24	; 37
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    1930:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_256:
						CLEAR_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);
						break;
    1932:	08 95       	ret
					case F_CPU_1024:
						SET_BIT(TCCR2,CS20);
    1934:	85 b5       	in	r24, 0x25	; 37
    1936:	84 60       	ori	r24, 0x04	; 4
    1938:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS21);
    193a:	85 b5       	in	r24, 0x25	; 37
    193c:	82 60       	ori	r24, 0x02	; 2
    193e:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS22);	
    1940:	85 b5       	in	r24, 0x25	; 37
    1942:	81 60       	ori	r24, 0x01	; 1
    1944:	85 bd       	out	0x25, r24	; 37
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    1946:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_1024:
						SET_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);	
						break;
    1948:	08 95       	ret
static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
	if( (en_a_timer_type >= INVALID_TIMER_TYPE) || (en_a_timer_clk >= INVALID_TIMER_CLK) )
	{
		l_ret = E_NOT_OK;
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	08 95       	ret
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	08 95       	ret
						break;
				}
				break;
				
			default:
				l_ret |= E_NOT_OK;
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	08 95       	ret
						SET_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);
						break;
					default:
						l_ret = E_NOT_OK;
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	08 95       	ret
						SET_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);
						break;
					default:
						l_ret = E_NOT_OK;
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	08 95       	ret
						SET_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);	
						break;
					default:
						l_ret = E_NOT_OK;
    195e:	80 e0       	ldi	r24, 0x00	; 0
				l_ret |= E_NOT_OK;
				break;
		}
	}
	return l_ret;
}
    1960:	08 95       	ret

00001962 <TIMERx_setTimerMode>:


static Std_ReturnType TIMERx_setTimerMode(const Timer_Config_t *stPtr_a_Config)
{
	Std_ReturnType l_ret = E_OK;
	if( (stPtr_a_Config == NULL) || (stPtr_a_Config->timer_type >= INVALID_TIMER_TYPE) || (stPtr_a_Config->timer_mode >= INVALID_TIMER_MODE) ||
    1962:	00 97       	sbiw	r24, 0x00	; 0
    1964:	09 f4       	brne	.+2      	; 0x1968 <TIMERx_setTimerMode+0x6>
    1966:	80 c2       	rjmp	.+1280   	; 0x1e68 <TIMERx_setTimerMode+0x506>
    1968:	fc 01       	movw	r30, r24
    196a:	20 81       	ld	r18, Z
    196c:	23 30       	cpi	r18, 0x03	; 3
    196e:	08 f0       	brcs	.+2      	; 0x1972 <TIMERx_setTimerMode+0x10>
    1970:	7d c2       	rjmp	.+1274   	; 0x1e6c <TIMERx_setTimerMode+0x50a>
    1972:	32 81       	ldd	r19, Z+2	; 0x02
    1974:	34 30       	cpi	r19, 0x04	; 4
    1976:	08 f0       	brcs	.+2      	; 0x197a <TIMERx_setTimerMode+0x18>
    1978:	7b c2       	rjmp	.+1270   	; 0x1e70 <TIMERx_setTimerMode+0x50e>
	    (stPtr_a_Config->output_compare_mode >=CTC_INVALID_TIMER_OUTPUT_COMPARE_MODE ) )
    197a:	43 81       	ldd	r20, Z+3	; 0x03


static Std_ReturnType TIMERx_setTimerMode(const Timer_Config_t *stPtr_a_Config)
{
	Std_ReturnType l_ret = E_OK;
	if( (stPtr_a_Config == NULL) || (stPtr_a_Config->timer_type >= INVALID_TIMER_TYPE) || (stPtr_a_Config->timer_mode >= INVALID_TIMER_MODE) ||
    197c:	44 30       	cpi	r20, 0x04	; 4
    197e:	08 f0       	brcs	.+2      	; 0x1982 <TIMERx_setTimerMode+0x20>
    1980:	79 c2       	rjmp	.+1266   	; 0x1e74 <TIMERx_setTimerMode+0x512>
	{
		l_ret = E_NOT_OK;
	}
	else
	{
		switch(stPtr_a_Config->timer_type)
    1982:	21 30       	cpi	r18, 0x01	; 1
    1984:	09 f4       	brne	.+2      	; 0x1988 <TIMERx_setTimerMode+0x26>
    1986:	a6 c0       	rjmp	.+332    	; 0x1ad4 <TIMERx_setTimerMode+0x172>
    1988:	20 f0       	brcs	.+8      	; 0x1992 <TIMERx_setTimerMode+0x30>
    198a:	22 30       	cpi	r18, 0x02	; 2
    198c:	09 f4       	brne	.+2      	; 0x1990 <TIMERx_setTimerMode+0x2e>
    198e:	cb c1       	rjmp	.+918    	; 0x1d26 <TIMERx_setTimerMode+0x3c4>
    1990:	73 c2       	rjmp	.+1254   	; 0x1e78 <TIMERx_setTimerMode+0x516>
		{
			case Timer0:
				switch(stPtr_a_Config->timer_mode)
    1992:	31 30       	cpi	r19, 0x01	; 1
    1994:	d9 f0       	breq	.+54     	; 0x19cc <TIMERx_setTimerMode+0x6a>
    1996:	30 f0       	brcs	.+12     	; 0x19a4 <TIMERx_setTimerMode+0x42>
    1998:	32 30       	cpi	r19, 0x02	; 2
    199a:	09 f4       	brne	.+2      	; 0x199e <TIMERx_setTimerMode+0x3c>
    199c:	65 c0       	rjmp	.+202    	; 0x1a68 <TIMERx_setTimerMode+0x106>
    199e:	33 30       	cpi	r19, 0x03	; 3
    19a0:	e1 f1       	breq	.+120    	; 0x1a1a <TIMERx_setTimerMode+0xb8>
    19a2:	6c c2       	rjmp	.+1240   	; 0x1e7c <TIMERx_setTimerMode+0x51a>
				{
					case TIMER_NORMAL_MODE:
						/*Make FOC0 to be Active as it is overflow mode(for non-PWM mode)*/
						SET_BIT(TCCR0,FOC0);
    19a4:	83 b7       	in	r24, 0x33	; 51
    19a6:	80 68       	ori	r24, 0x80	; 128
    19a8:	83 bf       	out	0x33, r24	; 51
						/*Normal Overflow mode*/
						CLEAR_BIT(TCCR0,WGM00);
    19aa:	83 b7       	in	r24, 0x33	; 51
    19ac:	8f 7b       	andi	r24, 0xBF	; 191
    19ae:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,WGM01);
    19b0:	83 b7       	in	r24, 0x33	; 51
    19b2:	87 7f       	andi	r24, 0xF7	; 247
    19b4:	83 bf       	out	0x33, r24	; 51
						/*Normal port operation, OC0 disconnected*/
						CLEAR_BIT(TCCR0,COM00);
    19b6:	83 b7       	in	r24, 0x33	; 51
    19b8:	8f 7e       	andi	r24, 0xEF	; 239
    19ba:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,COM01);
    19bc:	83 b7       	in	r24, 0x33	; 51
    19be:	8f 7d       	andi	r24, 0xDF	; 223
    19c0:	83 bf       	out	0x33, r24	; 51
						/* Enable Timer0 overflow interrupt*/
						SET_BIT(TIMSK,TOIE0);
    19c2:	89 b7       	in	r24, 0x39	; 57
    19c4:	81 60       	ori	r24, 0x01	; 1
    19c6:	89 bf       	out	0x39, r24	; 57
}


static Std_ReturnType TIMERx_setTimerMode(const Timer_Config_t *stPtr_a_Config)
{
	Std_ReturnType l_ret = E_OK;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
						/*Normal port operation, OC0 disconnected*/
						CLEAR_BIT(TCCR0,COM00);
						CLEAR_BIT(TCCR0,COM01);
						/* Enable Timer0 overflow interrupt*/
						SET_BIT(TIMSK,TOIE0);
						break;
    19ca:	08 95       	ret
					case TIMER_PHASE_CORRECT_PWM_MODE:
						/*PWM Phase Correct*/
						SET_BIT(TCCR0,WGM00);
    19cc:	23 b7       	in	r18, 0x33	; 51
    19ce:	20 64       	ori	r18, 0x40	; 64
    19d0:	23 bf       	out	0x33, r18	; 51
						CLEAR_BIT(TCCR0,WGM01);
    19d2:	23 b7       	in	r18, 0x33	; 51
    19d4:	27 7f       	andi	r18, 0xF7	; 247
    19d6:	23 bf       	out	0x33, r18	; 51
						/*Compare Output Mode, Phase Correct PWM Mode*/
						switch(stPtr_a_Config->phase_correct_pwm_mode)
    19d8:	fc 01       	movw	r30, r24
    19da:	25 81       	ldd	r18, Z+5	; 0x05
    19dc:	22 30       	cpi	r18, 0x02	; 2
    19de:	59 f0       	breq	.+22     	; 0x19f6 <TIMERx_setTimerMode+0x94>
    19e0:	23 30       	cpi	r18, 0x03	; 3
    19e2:	81 f0       	breq	.+32     	; 0x1a04 <TIMERx_setTimerMode+0xa2>
    19e4:	21 11       	cpse	r18, r1
    19e6:	14 c0       	rjmp	.+40     	; 0x1a10 <TIMERx_setTimerMode+0xae>
						{
							case PC_Output_Compare_Mode_DISCONNECTED:
								/* Normal port operation, OC0 disconnected.*/
								CLEAR_BIT(TCCR0,COM00);
    19e8:	23 b7       	in	r18, 0x33	; 51
    19ea:	2f 7e       	andi	r18, 0xEF	; 239
    19ec:	23 bf       	out	0x33, r18	; 51
								CLEAR_BIT(TCCR0,COM01);
    19ee:	23 b7       	in	r18, 0x33	; 51
    19f0:	2f 7d       	andi	r18, 0xDF	; 223
    19f2:	23 bf       	out	0x33, r18	; 51
								break;
    19f4:	0d c0       	rjmp	.+26     	; 0x1a10 <TIMERx_setTimerMode+0xae>
							case PC_Output_Compare_Mode_NON_INVERTED:
								/*Clear OC0 on compare match when up-counting Set OC0 on compare match when down counting*/
								CLEAR_BIT(TCCR0,COM00);
    19f6:	23 b7       	in	r18, 0x33	; 51
    19f8:	2f 7e       	andi	r18, 0xEF	; 239
    19fa:	23 bf       	out	0x33, r18	; 51
								SET_BIT(TCCR0,COM01);
    19fc:	23 b7       	in	r18, 0x33	; 51
    19fe:	20 62       	ori	r18, 0x20	; 32
    1a00:	23 bf       	out	0x33, r18	; 51
								break;
    1a02:	06 c0       	rjmp	.+12     	; 0x1a10 <TIMERx_setTimerMode+0xae>
							case PC_Output_Compare_Mode_INVERTED:
							/*Set OC0 on compare match when up-counting Clear OC0 on compare match when down counting*/
								SET_BIT(TCCR0,COM00);
    1a04:	23 b7       	in	r18, 0x33	; 51
    1a06:	20 61       	ori	r18, 0x10	; 16
    1a08:	23 bf       	out	0x33, r18	; 51
								SET_BIT(TCCR0,COM01);
    1a0a:	23 b7       	in	r18, 0x33	; 51
    1a0c:	20 62       	ori	r18, 0x20	; 32
    1a0e:	23 bf       	out	0x33, r18	; 51
							default: 
								l_ret |= E_NOT_OK;
								break;
						}
						 /*The Output Compare Register contains an 8-bit value that is continuously compared with the  counter value (TCNT0) */
						 OCR0 =(uint8_t) stPtr_a_Config->timer_compare_MatchValue & U8_BIT_REG_MASK;
    1a10:	fc 01       	movw	r30, r24
    1a12:	80 85       	ldd	r24, Z+8	; 0x08
    1a14:	8c bf       	out	0x3c, r24	; 60
						break;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	08 95       	ret
						
					case TIMER_FAST_PWM_MODE:
						/*Fast PWM*/
						SET_BIT(TCCR0,WGM00);
    1a1a:	23 b7       	in	r18, 0x33	; 51
    1a1c:	20 64       	ori	r18, 0x40	; 64
    1a1e:	23 bf       	out	0x33, r18	; 51
						SET_BIT(TCCR0,WGM01);
    1a20:	23 b7       	in	r18, 0x33	; 51
    1a22:	28 60       	ori	r18, 0x08	; 8
    1a24:	23 bf       	out	0x33, r18	; 51
						/*Compare Output Mode, Fast PWM Mode*/
						switch(stPtr_a_Config->fast_pwm_mode)
    1a26:	fc 01       	movw	r30, r24
    1a28:	24 81       	ldd	r18, Z+4	; 0x04
    1a2a:	22 30       	cpi	r18, 0x02	; 2
    1a2c:	59 f0       	breq	.+22     	; 0x1a44 <TIMERx_setTimerMode+0xe2>
    1a2e:	23 30       	cpi	r18, 0x03	; 3
    1a30:	81 f0       	breq	.+32     	; 0x1a52 <TIMERx_setTimerMode+0xf0>
    1a32:	21 11       	cpse	r18, r1
    1a34:	14 c0       	rjmp	.+40     	; 0x1a5e <TIMERx_setTimerMode+0xfc>
						{
							case FAST_Output_Compare_Mode_DISCONNECTED:
								/* Normal port operation, OC0 disconnected.*/
								CLEAR_BIT(TCCR0,COM00);
    1a36:	23 b7       	in	r18, 0x33	; 51
    1a38:	2f 7e       	andi	r18, 0xEF	; 239
    1a3a:	23 bf       	out	0x33, r18	; 51
								CLEAR_BIT(TCCR0,COM01);
    1a3c:	23 b7       	in	r18, 0x33	; 51
    1a3e:	2f 7d       	andi	r18, 0xDF	; 223
    1a40:	23 bf       	out	0x33, r18	; 51
								break;
    1a42:	0d c0       	rjmp	.+26     	; 0x1a5e <TIMERx_setTimerMode+0xfc>
							case FAST_Output_Compare_Mode_NON_INVERTED:
								/*Clear OC0 on compare match, set OC0 at BOTTOM*/
								CLEAR_BIT(TCCR0,COM00);
    1a44:	23 b7       	in	r18, 0x33	; 51
    1a46:	2f 7e       	andi	r18, 0xEF	; 239
    1a48:	23 bf       	out	0x33, r18	; 51
								SET_BIT(TCCR0,COM01);
    1a4a:	23 b7       	in	r18, 0x33	; 51
    1a4c:	20 62       	ori	r18, 0x20	; 32
    1a4e:	23 bf       	out	0x33, r18	; 51
								break;
    1a50:	06 c0       	rjmp	.+12     	; 0x1a5e <TIMERx_setTimerMode+0xfc>
							case FAST_Output_Compare_Mode_INVERTED:
							/*Set OC0 on compare match, clear OC0 at BOTTOM*/
								SET_BIT(TCCR0,COM00);
    1a52:	23 b7       	in	r18, 0x33	; 51
    1a54:	20 61       	ori	r18, 0x10	; 16
    1a56:	23 bf       	out	0x33, r18	; 51
								SET_BIT(TCCR0,COM01);
    1a58:	23 b7       	in	r18, 0x33	; 51
    1a5a:	20 62       	ori	r18, 0x20	; 32
    1a5c:	23 bf       	out	0x33, r18	; 51
							default: 
								l_ret |= E_NOT_OK;
								break;
						}
						 /*The Output Compare Register contains an 8-bit value that is continuously compared with the  counter value (TCNT0) */
						 OCR0 = stPtr_a_Config->timer_compare_MatchValue & U8_BIT_REG_MASK;
    1a5e:	fc 01       	movw	r30, r24
    1a60:	80 85       	ldd	r24, Z+8	; 0x08
    1a62:	8c bf       	out	0x3c, r24	; 60
						break;
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	08 95       	ret
						
					case TIMER_CTC_MODE:
						/*Make FOC0 to be Active as it is CTC mode(for non-PWM mode)*/
						SET_BIT(TCCR0,FOC0);
    1a68:	23 b7       	in	r18, 0x33	; 51
    1a6a:	20 68       	ori	r18, 0x80	; 128
    1a6c:	23 bf       	out	0x33, r18	; 51
						/*CTC Mode, non-PWM Mode*/
						CLEAR_BIT(TCCR0,WGM00);
    1a6e:	23 b7       	in	r18, 0x33	; 51
    1a70:	2f 7b       	andi	r18, 0xBF	; 191
    1a72:	23 bf       	out	0x33, r18	; 51
						SET_BIT(TCCR0,WGM01);
    1a74:	23 b7       	in	r18, 0x33	; 51
    1a76:	28 60       	ori	r18, 0x08	; 8
    1a78:	23 bf       	out	0x33, r18	; 51
						/*Compare Output Mode, non-PWM Mode*/
						switch(stPtr_a_Config->output_compare_mode)
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	23 81       	ldd	r18, Z+3	; 0x03
    1a7e:	21 30       	cpi	r18, 0x01	; 1
    1a80:	69 f0       	breq	.+26     	; 0x1a9c <TIMERx_setTimerMode+0x13a>
    1a82:	28 f0       	brcs	.+10     	; 0x1a8e <TIMERx_setTimerMode+0x12c>
    1a84:	22 30       	cpi	r18, 0x02	; 2
    1a86:	89 f0       	breq	.+34     	; 0x1aaa <TIMERx_setTimerMode+0x148>
    1a88:	23 30       	cpi	r18, 0x03	; 3
    1a8a:	b1 f0       	breq	.+44     	; 0x1ab8 <TIMERx_setTimerMode+0x156>
    1a8c:	1b c0       	rjmp	.+54     	; 0x1ac4 <TIMERx_setTimerMode+0x162>
						{
							case CTC_Output_Compare_Mode_DISCONNECTED:
								/* Normal port operation, OC0 disconnected.*/
								CLEAR_BIT(TCCR0,COM00);
    1a8e:	23 b7       	in	r18, 0x33	; 51
    1a90:	2f 7e       	andi	r18, 0xEF	; 239
    1a92:	23 bf       	out	0x33, r18	; 51
								CLEAR_BIT(TCCR0,COM01);
    1a94:	23 b7       	in	r18, 0x33	; 51
    1a96:	2f 7d       	andi	r18, 0xDF	; 223
    1a98:	23 bf       	out	0x33, r18	; 51
								break;
    1a9a:	14 c0       	rjmp	.+40     	; 0x1ac4 <TIMERx_setTimerMode+0x162>
							case CTC_Output_Compare_Mode_TOGGLE:
								/* Toggle OC0 on compare match*/
								SET_BIT(TCCR0,COM00);
    1a9c:	23 b7       	in	r18, 0x33	; 51
    1a9e:	20 61       	ori	r18, 0x10	; 16
    1aa0:	23 bf       	out	0x33, r18	; 51
								CLEAR_BIT(TCCR0,COM01);
    1aa2:	23 b7       	in	r18, 0x33	; 51
    1aa4:	2f 7d       	andi	r18, 0xDF	; 223
    1aa6:	23 bf       	out	0x33, r18	; 51
								break;
    1aa8:	0d c0       	rjmp	.+26     	; 0x1ac4 <TIMERx_setTimerMode+0x162>
							case CTC_Output_Compare_Mode_CLEAR:
								/*Clear OC0 on compare match*/
								CLEAR_BIT(TCCR0,COM00);
    1aaa:	23 b7       	in	r18, 0x33	; 51
    1aac:	2f 7e       	andi	r18, 0xEF	; 239
    1aae:	23 bf       	out	0x33, r18	; 51
								SET_BIT(TCCR0,COM01);
    1ab0:	23 b7       	in	r18, 0x33	; 51
    1ab2:	20 62       	ori	r18, 0x20	; 32
    1ab4:	23 bf       	out	0x33, r18	; 51
								break;
    1ab6:	06 c0       	rjmp	.+12     	; 0x1ac4 <TIMERx_setTimerMode+0x162>
							case CTC_Output_Compare_SET:
							/*Set OC0 on compare match*/
								SET_BIT(TCCR0,COM00);
    1ab8:	23 b7       	in	r18, 0x33	; 51
    1aba:	20 61       	ori	r18, 0x10	; 16
    1abc:	23 bf       	out	0x33, r18	; 51
								SET_BIT(TCCR0,COM01);
    1abe:	23 b7       	in	r18, 0x33	; 51
    1ac0:	20 62       	ori	r18, 0x20	; 32
    1ac2:	23 bf       	out	0x33, r18	; 51
							default: 
								l_ret |= E_NOT_OK;
								break;
						}
					    /*The Output Compare Register contains an 8-bit value that is continuously compared with the  counter value (TCNT0) */
						OCR0 = stPtr_a_Config->timer_compare_MatchValue & U8_BIT_REG_MASK;	
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	80 85       	ldd	r24, Z+8	; 0x08
    1ac8:	8c bf       	out	0x3c, r24	; 60
						/* Enable Timer0 CTC mode interrupt*/
						SET_BIT(TIMSK,OCIE0);
    1aca:	89 b7       	in	r24, 0x39	; 57
    1acc:	82 60       	ori	r24, 0x02	; 2
    1ace:	89 bf       	out	0x39, r24	; 57
						break;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	08 95       	ret
						break;
				}
				break;
				
			case Timer1:
				switch(stPtr_a_Config->timer_mode)
    1ad4:	31 30       	cpi	r19, 0x01	; 1
    1ad6:	59 f1       	breq	.+86     	; 0x1b2e <TIMERx_setTimerMode+0x1cc>
    1ad8:	38 f0       	brcs	.+14     	; 0x1ae8 <TIMERx_setTimerMode+0x186>
    1ada:	32 30       	cpi	r19, 0x02	; 2
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <TIMERx_setTimerMode+0x17e>
    1ade:	c9 c0       	rjmp	.+402    	; 0x1c72 <TIMERx_setTimerMode+0x310>
    1ae0:	33 30       	cpi	r19, 0x03	; 3
    1ae2:	09 f4       	brne	.+2      	; 0x1ae6 <TIMERx_setTimerMode+0x184>
    1ae4:	75 c0       	rjmp	.+234    	; 0x1bd0 <TIMERx_setTimerMode+0x26e>
    1ae6:	cc c1       	rjmp	.+920    	; 0x1e80 <TIMERx_setTimerMode+0x51e>
				{
					case TIMER_NORMAL_MODE:
						/*Make FOC1A,FOC1B to be Active as it is overflow mode(for non-PWM mode)*/
						SET_BIT(TCCR1A,FOC1A);
    1ae8:	8f b5       	in	r24, 0x2f	; 47
    1aea:	88 60       	ori	r24, 0x08	; 8
    1aec:	8f bd       	out	0x2f, r24	; 47
						SET_BIT(TCCR1A,FOC1B);
    1aee:	8f b5       	in	r24, 0x2f	; 47
    1af0:	84 60       	ori	r24, 0x04	; 4
    1af2:	8f bd       	out	0x2f, r24	; 47
						/*Normal Overflow mode*/
						CLEAR_BIT(TCCR1A,WGM10);
    1af4:	8f b5       	in	r24, 0x2f	; 47
    1af6:	8e 7f       	andi	r24, 0xFE	; 254
    1af8:	8f bd       	out	0x2f, r24	; 47
						CLEAR_BIT(TCCR1A,WGM11);
    1afa:	8f b5       	in	r24, 0x2f	; 47
    1afc:	8d 7f       	andi	r24, 0xFD	; 253
    1afe:	8f bd       	out	0x2f, r24	; 47
						CLEAR_BIT(TCCR1B,WGM12);
    1b00:	8e b5       	in	r24, 0x2e	; 46
    1b02:	8f 7e       	andi	r24, 0xEF	; 239
    1b04:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,WGM13);
    1b06:	8e b5       	in	r24, 0x2e	; 46
    1b08:	87 7f       	andi	r24, 0xF7	; 247
    1b0a:	8e bd       	out	0x2e, r24	; 46
						/*Normal port operation, OC1A/OC1B disconnected.*/
						CLEAR_BIT(TCCR1A,COM1A0);
    1b0c:	8f b5       	in	r24, 0x2f	; 47
    1b0e:	8f 7b       	andi	r24, 0xBF	; 191
    1b10:	8f bd       	out	0x2f, r24	; 47
						CLEAR_BIT(TCCR1A,COM1A1);
    1b12:	8f b5       	in	r24, 0x2f	; 47
    1b14:	8f 77       	andi	r24, 0x7F	; 127
    1b16:	8f bd       	out	0x2f, r24	; 47
						CLEAR_BIT(TCCR1A,COM1B0);
    1b18:	8f b5       	in	r24, 0x2f	; 47
    1b1a:	8f 7e       	andi	r24, 0xEF	; 239
    1b1c:	8f bd       	out	0x2f, r24	; 47
						CLEAR_BIT(TCCR1A,COM1B1);
    1b1e:	8f b5       	in	r24, 0x2f	; 47
    1b20:	8f 7d       	andi	r24, 0xDF	; 223
    1b22:	8f bd       	out	0x2f, r24	; 47
						/* Enable Timer0 overflow interrupt*/
						SET_BIT(TIMSK,TOIE1);
    1b24:	89 b7       	in	r24, 0x39	; 57
    1b26:	84 60       	ori	r24, 0x04	; 4
    1b28:	89 bf       	out	0x39, r24	; 57
}


static Std_ReturnType TIMERx_setTimerMode(const Timer_Config_t *stPtr_a_Config)
{
	Std_ReturnType l_ret = E_OK;
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
						CLEAR_BIT(TCCR1A,COM1A1);
						CLEAR_BIT(TCCR1A,COM1B0);
						CLEAR_BIT(TCCR1A,COM1B1);
						/* Enable Timer0 overflow interrupt*/
						SET_BIT(TIMSK,TOIE1);
						break;
    1b2c:	08 95       	ret
					case TIMER_PHASE_CORRECT_PWM_MODE:
						/*PWM Phase Correct 8-bit,top= 0x00FF ,Update of OCR1A at TOP,TOV1 Flag Set on BOTTOM*/
						SET_BIT(TCCR1A,WGM10);
    1b2e:	2f b5       	in	r18, 0x2f	; 47
    1b30:	21 60       	ori	r18, 0x01	; 1
    1b32:	2f bd       	out	0x2f, r18	; 47
						CLEAR_BIT(TCCR1A,WGM11);
    1b34:	2f b5       	in	r18, 0x2f	; 47
    1b36:	2d 7f       	andi	r18, 0xFD	; 253
    1b38:	2f bd       	out	0x2f, r18	; 47
						CLEAR_BIT(TCCR1B,WGM12);
    1b3a:	2e b5       	in	r18, 0x2e	; 46
    1b3c:	2f 7e       	andi	r18, 0xEF	; 239
    1b3e:	2e bd       	out	0x2e, r18	; 46
						CLEAR_BIT(TCCR1B,WGM13);
    1b40:	2e b5       	in	r18, 0x2e	; 46
    1b42:	27 7f       	andi	r18, 0xF7	; 247
    1b44:	2e bd       	out	0x2e, r18	; 46
						/*Compare Output Mode, Phase Correct PWM Mode*/
						switch(stPtr_a_Config->phase_correct_pwm_mode)
    1b46:	fc 01       	movw	r30, r24
    1b48:	25 81       	ldd	r18, Z+5	; 0x05
    1b4a:	21 30       	cpi	r18, 0x01	; 1
    1b4c:	99 f0       	breq	.+38     	; 0x1b74 <TIMERx_setTimerMode+0x212>
    1b4e:	28 f0       	brcs	.+10     	; 0x1b5a <TIMERx_setTimerMode+0x1f8>
    1b50:	22 30       	cpi	r18, 0x02	; 2
    1b52:	e9 f0       	breq	.+58     	; 0x1b8e <TIMERx_setTimerMode+0x22c>
    1b54:	23 30       	cpi	r18, 0x03	; 3
    1b56:	41 f1       	breq	.+80     	; 0x1ba8 <TIMERx_setTimerMode+0x246>
    1b58:	33 c0       	rjmp	.+102    	; 0x1bc0 <TIMERx_setTimerMode+0x25e>
						{
							case PC_Output_Compare_Mode_DISCONNECTED:
								/*Normal port operation, OC1A/OC1B disconnected.*/
								CLEAR_BIT(TCCR1A,COM1A0);
    1b5a:	2f b5       	in	r18, 0x2f	; 47
    1b5c:	2f 7b       	andi	r18, 0xBF	; 191
    1b5e:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1A1);
    1b60:	2f b5       	in	r18, 0x2f	; 47
    1b62:	2f 77       	andi	r18, 0x7F	; 127
    1b64:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1B0);
    1b66:	2f b5       	in	r18, 0x2f	; 47
    1b68:	2f 7e       	andi	r18, 0xEF	; 239
    1b6a:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1B1);
    1b6c:	2f b5       	in	r18, 0x2f	; 47
    1b6e:	2f 7d       	andi	r18, 0xDF	; 223
    1b70:	2f bd       	out	0x2f, r18	; 47
								break;
    1b72:	26 c0       	rjmp	.+76     	; 0x1bc0 <TIMERx_setTimerMode+0x25e>
							case PC_Output_Compare_Mode_TOGGLE:
								/* Toggle OC1A on Compare Match, OC1B disconnected (normal port operation).
								 * For all other WGM13:0 settings, normal port operation, OC1A/OC1B disconnected
								 */
								SET_BIT(TCCR1A,COM1A0);
    1b74:	2f b5       	in	r18, 0x2f	; 47
    1b76:	20 64       	ori	r18, 0x40	; 64
    1b78:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1A1);
    1b7a:	2f b5       	in	r18, 0x2f	; 47
    1b7c:	2f 77       	andi	r18, 0x7F	; 127
    1b7e:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1B0);
    1b80:	2f b5       	in	r18, 0x2f	; 47
    1b82:	20 61       	ori	r18, 0x10	; 16
    1b84:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1B1);
    1b86:	2f b5       	in	r18, 0x2f	; 47
    1b88:	2f 7d       	andi	r18, 0xDF	; 223
    1b8a:	2f bd       	out	0x2f, r18	; 47
								break;
    1b8c:	19 c0       	rjmp	.+50     	; 0x1bc0 <TIMERx_setTimerMode+0x25e>
							case PC_Output_Compare_Mode_NON_INVERTED:
								/*Clear OC1A/OC1B on compare match when up-counting. Set OC1A/OC1B on compare
								* match when down counting. (non-inverting mode)
								*/
								CLEAR_BIT(TCCR1A,COM1A0);
    1b8e:	2f b5       	in	r18, 0x2f	; 47
    1b90:	2f 7b       	andi	r18, 0xBF	; 191
    1b92:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1A1);
    1b94:	2f b5       	in	r18, 0x2f	; 47
    1b96:	20 68       	ori	r18, 0x80	; 128
    1b98:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1B0);
    1b9a:	2f b5       	in	r18, 0x2f	; 47
    1b9c:	2f 7e       	andi	r18, 0xEF	; 239
    1b9e:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1B1);
    1ba0:	2f b5       	in	r18, 0x2f	; 47
    1ba2:	20 62       	ori	r18, 0x20	; 32
    1ba4:	2f bd       	out	0x2f, r18	; 47
								break;
    1ba6:	0c c0       	rjmp	.+24     	; 0x1bc0 <TIMERx_setTimerMode+0x25e>
							case PC_Output_Compare_Mode_INVERTED:
								/* Set OC1A/OC1B on compare match when up-counting. Clear OC1A/OC1B on compare
								* match when down counting,(inverting mode)
								*/
								SET_BIT(TCCR1A,COM1A0);
    1ba8:	2f b5       	in	r18, 0x2f	; 47
    1baa:	20 64       	ori	r18, 0x40	; 64
    1bac:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1A1);
    1bae:	2f b5       	in	r18, 0x2f	; 47
    1bb0:	20 68       	ori	r18, 0x80	; 128
    1bb2:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1B0);
    1bb4:	2f b5       	in	r18, 0x2f	; 47
    1bb6:	20 61       	ori	r18, 0x10	; 16
    1bb8:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1B1);
    1bba:	2f b5       	in	r18, 0x2f	; 47
    1bbc:	20 62       	ori	r18, 0x20	; 32
    1bbe:	2f bd       	out	0x2f, r18	; 47
							default: 
								l_ret |= E_NOT_OK;
								break;
						}
						/*The Output Compare Register contains an 16-bit value that is continuously compared with the  counter value (TCNT1) */
						OCR1AL = (uint8_t)stPtr_a_Config->timer_compare_MatchValue & U8_BIT_REG_MASK;
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	20 85       	ldd	r18, Z+8	; 0x08
    1bc4:	2a bd       	out	0x2a, r18	; 42
						OCR1AH = (uint8_t)(stPtr_a_Config->timer_compare_MatchValue >> U8_BIT_REG_MASK) & U8_BIT_REG_MASK;
    1bc6:	80 85       	ldd	r24, Z+8	; 0x08
    1bc8:	91 85       	ldd	r25, Z+9	; 0x09
    1bca:	8b bd       	out	0x2b, r24	; 43
						break;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	08 95       	ret
						
					case TIMER_FAST_PWM_MODE:
						/*Fast PWM 8-bit,top= 0x00FF ,Update of OCR1A at BOTTOM,TOV1 Flag Set on TOP*/
						SET_BIT(TCCR1A,WGM10);
    1bd0:	2f b5       	in	r18, 0x2f	; 47
    1bd2:	21 60       	ori	r18, 0x01	; 1
    1bd4:	2f bd       	out	0x2f, r18	; 47
						CLEAR_BIT(TCCR1A,WGM11);
    1bd6:	2f b5       	in	r18, 0x2f	; 47
    1bd8:	2d 7f       	andi	r18, 0xFD	; 253
    1bda:	2f bd       	out	0x2f, r18	; 47
						SET_BIT(TCCR1B,WGM12);
    1bdc:	2e b5       	in	r18, 0x2e	; 46
    1bde:	20 61       	ori	r18, 0x10	; 16
    1be0:	2e bd       	out	0x2e, r18	; 46
						CLEAR_BIT(TCCR1B,WGM13);
    1be2:	2e b5       	in	r18, 0x2e	; 46
    1be4:	27 7f       	andi	r18, 0xF7	; 247
    1be6:	2e bd       	out	0x2e, r18	; 46
						/*Compare Output Mode, Fast PWM Mode*/
						switch(stPtr_a_Config->fast_pwm_mode)
    1be8:	fc 01       	movw	r30, r24
    1bea:	24 81       	ldd	r18, Z+4	; 0x04
    1bec:	21 30       	cpi	r18, 0x01	; 1
    1bee:	99 f0       	breq	.+38     	; 0x1c16 <TIMERx_setTimerMode+0x2b4>
    1bf0:	28 f0       	brcs	.+10     	; 0x1bfc <TIMERx_setTimerMode+0x29a>
    1bf2:	22 30       	cpi	r18, 0x02	; 2
    1bf4:	e9 f0       	breq	.+58     	; 0x1c30 <TIMERx_setTimerMode+0x2ce>
    1bf6:	23 30       	cpi	r18, 0x03	; 3
    1bf8:	41 f1       	breq	.+80     	; 0x1c4a <TIMERx_setTimerMode+0x2e8>
    1bfa:	33 c0       	rjmp	.+102    	; 0x1c62 <TIMERx_setTimerMode+0x300>
						{
							case FAST_Output_Compare_Mode_DISCONNECTED:
								/*Normal port operation, OC1A/OC1B disconnected.*/
								CLEAR_BIT(TCCR1A,COM1A0);
    1bfc:	2f b5       	in	r18, 0x2f	; 47
    1bfe:	2f 7b       	andi	r18, 0xBF	; 191
    1c00:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1A1);
    1c02:	2f b5       	in	r18, 0x2f	; 47
    1c04:	2f 77       	andi	r18, 0x7F	; 127
    1c06:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1B0);
    1c08:	2f b5       	in	r18, 0x2f	; 47
    1c0a:	2f 7e       	andi	r18, 0xEF	; 239
    1c0c:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1B1);
    1c0e:	2f b5       	in	r18, 0x2f	; 47
    1c10:	2f 7d       	andi	r18, 0xDF	; 223
    1c12:	2f bd       	out	0x2f, r18	; 47
								break;
    1c14:	26 c0       	rjmp	.+76     	; 0x1c62 <TIMERx_setTimerMode+0x300>
							case FAST_Output_Compare_Mode_TOGGLE:
								/* Toggle OC1A on Compare Match, OC1B disconnected (normal port operation).
								 * For all other WGM13:0 settings, normal port operation, OC1A/OC1B disconnected
								 */
								SET_BIT(TCCR1A,COM1A0);
    1c16:	2f b5       	in	r18, 0x2f	; 47
    1c18:	20 64       	ori	r18, 0x40	; 64
    1c1a:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1A1);
    1c1c:	2f b5       	in	r18, 0x2f	; 47
    1c1e:	2f 77       	andi	r18, 0x7F	; 127
    1c20:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1B0);
    1c22:	2f b5       	in	r18, 0x2f	; 47
    1c24:	20 61       	ori	r18, 0x10	; 16
    1c26:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1B1);
    1c28:	2f b5       	in	r18, 0x2f	; 47
    1c2a:	2f 7d       	andi	r18, 0xDF	; 223
    1c2c:	2f bd       	out	0x2f, r18	; 47
								break;
    1c2e:	19 c0       	rjmp	.+50     	; 0x1c62 <TIMERx_setTimerMode+0x300>
							case FAST_Output_Compare_Mode_NON_INVERTED:
								/*Clear OC1A/OC1B on compare match, setOC1A/OC1B at BOTTOM, (non-inverting mode)*/
								CLEAR_BIT(TCCR1A,COM1A0);
    1c30:	2f b5       	in	r18, 0x2f	; 47
    1c32:	2f 7b       	andi	r18, 0xBF	; 191
    1c34:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1A1);
    1c36:	2f b5       	in	r18, 0x2f	; 47
    1c38:	20 68       	ori	r18, 0x80	; 128
    1c3a:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1B0);
    1c3c:	2f b5       	in	r18, 0x2f	; 47
    1c3e:	2f 7e       	andi	r18, 0xEF	; 239
    1c40:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1B1);
    1c42:	2f b5       	in	r18, 0x2f	; 47
    1c44:	20 62       	ori	r18, 0x20	; 32
    1c46:	2f bd       	out	0x2f, r18	; 47
								break;
    1c48:	0c c0       	rjmp	.+24     	; 0x1c62 <TIMERx_setTimerMode+0x300>
							case FAST_Output_Compare_Mode_INVERTED:
							/* Set OC1A/OC1B on compare match, clear OC1A/OC1B at BOTTOM,(inverting mode)*/
								SET_BIT(TCCR1A,COM1A0);
    1c4a:	2f b5       	in	r18, 0x2f	; 47
    1c4c:	20 64       	ori	r18, 0x40	; 64
    1c4e:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1A1);
    1c50:	2f b5       	in	r18, 0x2f	; 47
    1c52:	20 68       	ori	r18, 0x80	; 128
    1c54:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1B0);
    1c56:	2f b5       	in	r18, 0x2f	; 47
    1c58:	20 61       	ori	r18, 0x10	; 16
    1c5a:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1B1);
    1c5c:	2f b5       	in	r18, 0x2f	; 47
    1c5e:	20 62       	ori	r18, 0x20	; 32
    1c60:	2f bd       	out	0x2f, r18	; 47
							default: 
								l_ret |= E_NOT_OK;
								break;
						}
						/*The Output Compare Register contains an 16-bit value that is continuously compared with the  counter value (TCNT1) */
						OCR1AL = (uint8_t)stPtr_a_Config->timer_compare_MatchValue & U8_BIT_REG_MASK;
    1c62:	fc 01       	movw	r30, r24
    1c64:	20 85       	ldd	r18, Z+8	; 0x08
    1c66:	2a bd       	out	0x2a, r18	; 42
						OCR1AH = (uint8_t)(stPtr_a_Config->timer_compare_MatchValue >> U8_BIT_REG_MASK) & U8_BIT_REG_MASK;
    1c68:	80 85       	ldd	r24, Z+8	; 0x08
    1c6a:	91 85       	ldd	r25, Z+9	; 0x09
    1c6c:	8b bd       	out	0x2b, r24	; 43
						break;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	08 95       	ret
						
					case TIMER_CTC_MODE:
						/*Make FOC1A,FOC1B to be Active as it is overflow mode(for non-PWM mode)*/
						SET_BIT(TCCR1A,FOC1A);
    1c72:	2f b5       	in	r18, 0x2f	; 47
    1c74:	28 60       	ori	r18, 0x08	; 8
    1c76:	2f bd       	out	0x2f, r18	; 47
						SET_BIT(TCCR1A,FOC1B);
    1c78:	2f b5       	in	r18, 0x2f	; 47
    1c7a:	24 60       	ori	r18, 0x04	; 4
    1c7c:	2f bd       	out	0x2f, r18	; 47
						/*CTC Mode, non-PWM Mode*/
						CLEAR_BIT(TCCR1A,WGM10);
    1c7e:	2f b5       	in	r18, 0x2f	; 47
    1c80:	2e 7f       	andi	r18, 0xFE	; 254
    1c82:	2f bd       	out	0x2f, r18	; 47
						CLEAR_BIT(TCCR1A,WGM11);
    1c84:	2f b5       	in	r18, 0x2f	; 47
    1c86:	2d 7f       	andi	r18, 0xFD	; 253
    1c88:	2f bd       	out	0x2f, r18	; 47
						SET_BIT(TCCR1B,WGM12);
    1c8a:	2e b5       	in	r18, 0x2e	; 46
    1c8c:	20 61       	ori	r18, 0x10	; 16
    1c8e:	2e bd       	out	0x2e, r18	; 46
						CLEAR_BIT(TCCR1B,WGM13);
    1c90:	2e b5       	in	r18, 0x2e	; 46
    1c92:	27 7f       	andi	r18, 0xF7	; 247
    1c94:	2e bd       	out	0x2e, r18	; 46
						/*Compare Output Mode, non-PWM Mode*/
						switch(stPtr_a_Config->output_compare_mode)
    1c96:	fc 01       	movw	r30, r24
    1c98:	23 81       	ldd	r18, Z+3	; 0x03
    1c9a:	21 30       	cpi	r18, 0x01	; 1
    1c9c:	99 f0       	breq	.+38     	; 0x1cc4 <TIMERx_setTimerMode+0x362>
    1c9e:	28 f0       	brcs	.+10     	; 0x1caa <TIMERx_setTimerMode+0x348>
    1ca0:	22 30       	cpi	r18, 0x02	; 2
    1ca2:	e9 f0       	breq	.+58     	; 0x1cde <TIMERx_setTimerMode+0x37c>
    1ca4:	23 30       	cpi	r18, 0x03	; 3
    1ca6:	41 f1       	breq	.+80     	; 0x1cf8 <TIMERx_setTimerMode+0x396>
    1ca8:	33 c0       	rjmp	.+102    	; 0x1d10 <TIMERx_setTimerMode+0x3ae>
						{
							case CTC_Output_Compare_Mode_DISCONNECTED:
								/*Normal port operation, OC1A/OC1B disconnected.*/
								CLEAR_BIT(TCCR1A,COM1A0);
    1caa:	2f b5       	in	r18, 0x2f	; 47
    1cac:	2f 7b       	andi	r18, 0xBF	; 191
    1cae:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1A1);
    1cb0:	2f b5       	in	r18, 0x2f	; 47
    1cb2:	2f 77       	andi	r18, 0x7F	; 127
    1cb4:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1B0);
    1cb6:	2f b5       	in	r18, 0x2f	; 47
    1cb8:	2f 7e       	andi	r18, 0xEF	; 239
    1cba:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1B1);
    1cbc:	2f b5       	in	r18, 0x2f	; 47
    1cbe:	2f 7d       	andi	r18, 0xDF	; 223
    1cc0:	2f bd       	out	0x2f, r18	; 47
								break;
    1cc2:	26 c0       	rjmp	.+76     	; 0x1d10 <TIMERx_setTimerMode+0x3ae>
							case CTC_Output_Compare_Mode_TOGGLE:
								/* Toggle OC1A/OC1B on compare match*/
								SET_BIT(TCCR1A,COM1A0);
    1cc4:	2f b5       	in	r18, 0x2f	; 47
    1cc6:	20 64       	ori	r18, 0x40	; 64
    1cc8:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1A1);
    1cca:	2f b5       	in	r18, 0x2f	; 47
    1ccc:	2f 77       	andi	r18, 0x7F	; 127
    1cce:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1B0);
    1cd0:	2f b5       	in	r18, 0x2f	; 47
    1cd2:	20 61       	ori	r18, 0x10	; 16
    1cd4:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1B1);
    1cd6:	2f b5       	in	r18, 0x2f	; 47
    1cd8:	2f 7d       	andi	r18, 0xDF	; 223
    1cda:	2f bd       	out	0x2f, r18	; 47
								break;
    1cdc:	19 c0       	rjmp	.+50     	; 0x1d10 <TIMERx_setTimerMode+0x3ae>
							case CTC_Output_Compare_Mode_CLEAR:
								/*clear OC1A/OC1B on compare match (Set output to low level)*/
								CLEAR_BIT(TCCR1A,COM1A0);
    1cde:	2f b5       	in	r18, 0x2f	; 47
    1ce0:	2f 7b       	andi	r18, 0xBF	; 191
    1ce2:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1A1);
    1ce4:	2f b5       	in	r18, 0x2f	; 47
    1ce6:	20 68       	ori	r18, 0x80	; 128
    1ce8:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1B0);
    1cea:	2f b5       	in	r18, 0x2f	; 47
    1cec:	2f 7e       	andi	r18, 0xEF	; 239
    1cee:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1B1);
    1cf0:	2f b5       	in	r18, 0x2f	; 47
    1cf2:	20 62       	ori	r18, 0x20	; 32
    1cf4:	2f bd       	out	0x2f, r18	; 47
								break;
    1cf6:	0c c0       	rjmp	.+24     	; 0x1d10 <TIMERx_setTimerMode+0x3ae>
							case CTC_Output_Compare_SET:
							/* Set OC1A/OC1B on compare match (Set output to high level)*/
								SET_BIT(TCCR1A,COM1A0);
    1cf8:	2f b5       	in	r18, 0x2f	; 47
    1cfa:	20 64       	ori	r18, 0x40	; 64
    1cfc:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1A1);
    1cfe:	2f b5       	in	r18, 0x2f	; 47
    1d00:	20 68       	ori	r18, 0x80	; 128
    1d02:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1B0);
    1d04:	2f b5       	in	r18, 0x2f	; 47
    1d06:	20 61       	ori	r18, 0x10	; 16
    1d08:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1B1);
    1d0a:	2f b5       	in	r18, 0x2f	; 47
    1d0c:	20 62       	ori	r18, 0x20	; 32
    1d0e:	2f bd       	out	0x2f, r18	; 47
							default: 
								l_ret |= E_NOT_OK;
								break;
						}
					    /*The Output Compare Register contains an 16-bit value that is continuously compared with the  counter value (TCNT1) */
						OCR1AL = stPtr_a_Config->timer_compare_MatchValue & U8_BIT_REG_MASK;
    1d10:	fc 01       	movw	r30, r24
    1d12:	20 85       	ldd	r18, Z+8	; 0x08
    1d14:	2a bd       	out	0x2a, r18	; 42
						OCR1AH = (stPtr_a_Config->timer_compare_MatchValue >> U8_BIT_REG_MASK) & U8_BIT_REG_MASK;	
    1d16:	80 85       	ldd	r24, Z+8	; 0x08
    1d18:	91 85       	ldd	r25, Z+9	; 0x09
    1d1a:	8b bd       	out	0x2b, r24	; 43
						/* Enable Timer1 CTC-A mode interrupt*/
						SET_BIT(TIMSK,OCIE1A);
    1d1c:	89 b7       	in	r24, 0x39	; 57
    1d1e:	80 61       	ori	r24, 0x10	; 16
    1d20:	89 bf       	out	0x39, r24	; 57
						break;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	08 95       	ret
				}
				
				break;
				
			case Timer2:
				switch(stPtr_a_Config->timer_mode)
    1d26:	31 30       	cpi	r19, 0x01	; 1
    1d28:	d9 f0       	breq	.+54     	; 0x1d60 <TIMERx_setTimerMode+0x3fe>
    1d2a:	30 f0       	brcs	.+12     	; 0x1d38 <TIMERx_setTimerMode+0x3d6>
    1d2c:	32 30       	cpi	r19, 0x02	; 2
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <TIMERx_setTimerMode+0x3d0>
    1d30:	65 c0       	rjmp	.+202    	; 0x1dfc <TIMERx_setTimerMode+0x49a>
    1d32:	33 30       	cpi	r19, 0x03	; 3
    1d34:	e1 f1       	breq	.+120    	; 0x1dae <TIMERx_setTimerMode+0x44c>
    1d36:	a6 c0       	rjmp	.+332    	; 0x1e84 <TIMERx_setTimerMode+0x522>
				{
					case TIMER_NORMAL_MODE:
						/*Make FOC2 to be Active as it is overflow mode(for non-PWM mode)*/
						SET_BIT(TCCR2,FOC2);
    1d38:	85 b5       	in	r24, 0x25	; 37
    1d3a:	80 68       	ori	r24, 0x80	; 128
    1d3c:	85 bd       	out	0x25, r24	; 37
						/*Normal Overflow mode*/
						CLEAR_BIT(TCCR2,WGM20);
    1d3e:	85 b5       	in	r24, 0x25	; 37
    1d40:	8f 7b       	andi	r24, 0xBF	; 191
    1d42:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,WGM21);
    1d44:	85 b5       	in	r24, 0x25	; 37
    1d46:	87 7f       	andi	r24, 0xF7	; 247
    1d48:	85 bd       	out	0x25, r24	; 37
						/*Normal port operation, OC2 disconnected*/
						CLEAR_BIT(TCCR2,COM20);
    1d4a:	85 b5       	in	r24, 0x25	; 37
    1d4c:	8f 7e       	andi	r24, 0xEF	; 239
    1d4e:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,COM21);
    1d50:	85 b5       	in	r24, 0x25	; 37
    1d52:	8f 7d       	andi	r24, 0xDF	; 223
    1d54:	85 bd       	out	0x25, r24	; 37
						/* Enable Timer2 overflow interrupt*/
						SET_BIT(TIMSK,TOIE2);
    1d56:	89 b7       	in	r24, 0x39	; 57
    1d58:	80 64       	ori	r24, 0x40	; 64
    1d5a:	89 bf       	out	0x39, r24	; 57
}


static Std_ReturnType TIMERx_setTimerMode(const Timer_Config_t *stPtr_a_Config)
{
	Std_ReturnType l_ret = E_OK;
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
						/*Normal port operation, OC2 disconnected*/
						CLEAR_BIT(TCCR2,COM20);
						CLEAR_BIT(TCCR2,COM21);
						/* Enable Timer2 overflow interrupt*/
						SET_BIT(TIMSK,TOIE2);
						break;
    1d5e:	08 95       	ret
					case TIMER_PHASE_CORRECT_PWM_MODE:
						/*PWM Phase Correct*/
						SET_BIT(TCCR2,WGM20);
    1d60:	25 b5       	in	r18, 0x25	; 37
    1d62:	20 64       	ori	r18, 0x40	; 64
    1d64:	25 bd       	out	0x25, r18	; 37
						CLEAR_BIT(TCCR2,WGM21);
    1d66:	25 b5       	in	r18, 0x25	; 37
    1d68:	27 7f       	andi	r18, 0xF7	; 247
    1d6a:	25 bd       	out	0x25, r18	; 37
						/*Compare Output Mode, Phase Correct PWM Mode*/
						switch(stPtr_a_Config->phase_correct_pwm_mode)
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	25 81       	ldd	r18, Z+5	; 0x05
    1d70:	22 30       	cpi	r18, 0x02	; 2
    1d72:	59 f0       	breq	.+22     	; 0x1d8a <TIMERx_setTimerMode+0x428>
    1d74:	23 30       	cpi	r18, 0x03	; 3
    1d76:	81 f0       	breq	.+32     	; 0x1d98 <TIMERx_setTimerMode+0x436>
    1d78:	21 11       	cpse	r18, r1
    1d7a:	14 c0       	rjmp	.+40     	; 0x1da4 <TIMERx_setTimerMode+0x442>
						{
							case PC_Output_Compare_Mode_DISCONNECTED:
								/* Normal port operation, OC2 disconnected.*/
								CLEAR_BIT(TCCR2,COM20);
    1d7c:	25 b5       	in	r18, 0x25	; 37
    1d7e:	2f 7e       	andi	r18, 0xEF	; 239
    1d80:	25 bd       	out	0x25, r18	; 37
								CLEAR_BIT(TCCR2,COM21);
    1d82:	25 b5       	in	r18, 0x25	; 37
    1d84:	2f 7d       	andi	r18, 0xDF	; 223
    1d86:	25 bd       	out	0x25, r18	; 37
								break;
    1d88:	0d c0       	rjmp	.+26     	; 0x1da4 <TIMERx_setTimerMode+0x442>
							case PC_Output_Compare_Mode_NON_INVERTED:
								/*Clear OC2 on compare match when up-counting Set OC2 on compare match when down counting*/
								CLEAR_BIT(TCCR2,COM20);
    1d8a:	25 b5       	in	r18, 0x25	; 37
    1d8c:	2f 7e       	andi	r18, 0xEF	; 239
    1d8e:	25 bd       	out	0x25, r18	; 37
								SET_BIT(TCCR2,COM21);
    1d90:	25 b5       	in	r18, 0x25	; 37
    1d92:	20 62       	ori	r18, 0x20	; 32
    1d94:	25 bd       	out	0x25, r18	; 37
								break;
    1d96:	06 c0       	rjmp	.+12     	; 0x1da4 <TIMERx_setTimerMode+0x442>
							case PC_Output_Compare_Mode_INVERTED:
							/*Set OC2 on compare match when up-counting Clear OC2 on compare match when down counting*/
								SET_BIT(TCCR2,COM20);
    1d98:	25 b5       	in	r18, 0x25	; 37
    1d9a:	20 61       	ori	r18, 0x10	; 16
    1d9c:	25 bd       	out	0x25, r18	; 37
								SET_BIT(TCCR2,COM21);
    1d9e:	25 b5       	in	r18, 0x25	; 37
    1da0:	20 62       	ori	r18, 0x20	; 32
    1da2:	25 bd       	out	0x25, r18	; 37
							default: 
								l_ret |= E_NOT_OK;
								break;
						}
						/*The Output Compare Register contains an 8-bit value that is continuously compared with the  counter value (TCNT2) */
						OCR2 = (uint8_t)stPtr_a_Config->timer_compare_MatchValue & U8_BIT_REG_MASK;
    1da4:	fc 01       	movw	r30, r24
    1da6:	80 85       	ldd	r24, Z+8	; 0x08
    1da8:	83 bd       	out	0x23, r24	; 35
						break;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	08 95       	ret
						
					case TIMER_FAST_PWM_MODE:
						/*Fast PWM*/
						SET_BIT(TCCR2,WGM20);
    1dae:	25 b5       	in	r18, 0x25	; 37
    1db0:	20 64       	ori	r18, 0x40	; 64
    1db2:	25 bd       	out	0x25, r18	; 37
						SET_BIT(TCCR2,WGM21);
    1db4:	25 b5       	in	r18, 0x25	; 37
    1db6:	28 60       	ori	r18, 0x08	; 8
    1db8:	25 bd       	out	0x25, r18	; 37
						/*Compare Output Mode, Fast PWM Mode*/
						switch(stPtr_a_Config->fast_pwm_mode)
    1dba:	fc 01       	movw	r30, r24
    1dbc:	24 81       	ldd	r18, Z+4	; 0x04
    1dbe:	22 30       	cpi	r18, 0x02	; 2
    1dc0:	59 f0       	breq	.+22     	; 0x1dd8 <TIMERx_setTimerMode+0x476>
    1dc2:	23 30       	cpi	r18, 0x03	; 3
    1dc4:	81 f0       	breq	.+32     	; 0x1de6 <TIMERx_setTimerMode+0x484>
    1dc6:	21 11       	cpse	r18, r1
    1dc8:	14 c0       	rjmp	.+40     	; 0x1df2 <TIMERx_setTimerMode+0x490>
						{
							case FAST_Output_Compare_Mode_DISCONNECTED:
								/* Normal port operation, OC2 disconnected.*/
								CLEAR_BIT(TCCR2,COM20);
    1dca:	25 b5       	in	r18, 0x25	; 37
    1dcc:	2f 7e       	andi	r18, 0xEF	; 239
    1dce:	25 bd       	out	0x25, r18	; 37
								CLEAR_BIT(TCCR2,COM21);
    1dd0:	25 b5       	in	r18, 0x25	; 37
    1dd2:	2f 7d       	andi	r18, 0xDF	; 223
    1dd4:	25 bd       	out	0x25, r18	; 37
								break;
    1dd6:	0d c0       	rjmp	.+26     	; 0x1df2 <TIMERx_setTimerMode+0x490>
							case FAST_Output_Compare_Mode_NON_INVERTED:
								/*Clear OC2 on compare match, set OC2 at BOTTOM*/
								CLEAR_BIT(TCCR2,COM20);
    1dd8:	25 b5       	in	r18, 0x25	; 37
    1dda:	2f 7e       	andi	r18, 0xEF	; 239
    1ddc:	25 bd       	out	0x25, r18	; 37
								SET_BIT(TCCR2,COM21);
    1dde:	25 b5       	in	r18, 0x25	; 37
    1de0:	20 62       	ori	r18, 0x20	; 32
    1de2:	25 bd       	out	0x25, r18	; 37
								break;
    1de4:	06 c0       	rjmp	.+12     	; 0x1df2 <TIMERx_setTimerMode+0x490>
							case FAST_Output_Compare_Mode_INVERTED:
							/*Set OC2 on compare match, clear OC2 at BOTTOM*/
								SET_BIT(TCCR2,COM20);
    1de6:	25 b5       	in	r18, 0x25	; 37
    1de8:	20 61       	ori	r18, 0x10	; 16
    1dea:	25 bd       	out	0x25, r18	; 37
								SET_BIT(TCCR2,COM21);
    1dec:	25 b5       	in	r18, 0x25	; 37
    1dee:	20 62       	ori	r18, 0x20	; 32
    1df0:	25 bd       	out	0x25, r18	; 37
							default: 
								l_ret |= E_NOT_OK;
								break;
						}
						 /*The Output Compare Register contains an 8-bit value that is continuously compared with the  counter value (TCNT2) */
						 OCR2 =(uint8_t) stPtr_a_Config->timer_compare_MatchValue & U8_BIT_REG_MASK;
    1df2:	fc 01       	movw	r30, r24
    1df4:	80 85       	ldd	r24, Z+8	; 0x08
    1df6:	83 bd       	out	0x23, r24	; 35
						break;
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	08 95       	ret
						
					case TIMER_CTC_MODE:
						/*Make FOC2 to be Active as it is CTC mode(for non-PWM mode)*/
						SET_BIT(TCCR2,FOC2);
    1dfc:	25 b5       	in	r18, 0x25	; 37
    1dfe:	20 68       	ori	r18, 0x80	; 128
    1e00:	25 bd       	out	0x25, r18	; 37
						/*CTC Mode, non-PWM Mode*/
						CLEAR_BIT(TCCR2,WGM20);
    1e02:	25 b5       	in	r18, 0x25	; 37
    1e04:	2f 7b       	andi	r18, 0xBF	; 191
    1e06:	25 bd       	out	0x25, r18	; 37
						SET_BIT(TCCR2,WGM21);
    1e08:	25 b5       	in	r18, 0x25	; 37
    1e0a:	28 60       	ori	r18, 0x08	; 8
    1e0c:	25 bd       	out	0x25, r18	; 37
						/*Compare Output Mode, non-PWM Mode*/
						switch(stPtr_a_Config->output_compare_mode)
    1e0e:	fc 01       	movw	r30, r24
    1e10:	23 81       	ldd	r18, Z+3	; 0x03
    1e12:	21 30       	cpi	r18, 0x01	; 1
    1e14:	69 f0       	breq	.+26     	; 0x1e30 <TIMERx_setTimerMode+0x4ce>
    1e16:	28 f0       	brcs	.+10     	; 0x1e22 <TIMERx_setTimerMode+0x4c0>
    1e18:	22 30       	cpi	r18, 0x02	; 2
    1e1a:	89 f0       	breq	.+34     	; 0x1e3e <TIMERx_setTimerMode+0x4dc>
    1e1c:	23 30       	cpi	r18, 0x03	; 3
    1e1e:	b1 f0       	breq	.+44     	; 0x1e4c <TIMERx_setTimerMode+0x4ea>
    1e20:	1b c0       	rjmp	.+54     	; 0x1e58 <TIMERx_setTimerMode+0x4f6>
						{
							case CTC_Output_Compare_Mode_DISCONNECTED:
								/* Normal port operation, OC2 disconnected.*/
								CLEAR_BIT(TCCR2,COM20);
    1e22:	25 b5       	in	r18, 0x25	; 37
    1e24:	2f 7e       	andi	r18, 0xEF	; 239
    1e26:	25 bd       	out	0x25, r18	; 37
								CLEAR_BIT(TCCR2,COM21);
    1e28:	25 b5       	in	r18, 0x25	; 37
    1e2a:	2f 7d       	andi	r18, 0xDF	; 223
    1e2c:	25 bd       	out	0x25, r18	; 37
								break;
    1e2e:	14 c0       	rjmp	.+40     	; 0x1e58 <TIMERx_setTimerMode+0x4f6>
							case CTC_Output_Compare_Mode_TOGGLE:
								/* Toggle OC2 on compare match*/
								SET_BIT(TCCR2,COM20);
    1e30:	25 b5       	in	r18, 0x25	; 37
    1e32:	20 61       	ori	r18, 0x10	; 16
    1e34:	25 bd       	out	0x25, r18	; 37
								CLEAR_BIT(TCCR2,COM21);
    1e36:	25 b5       	in	r18, 0x25	; 37
    1e38:	2f 7d       	andi	r18, 0xDF	; 223
    1e3a:	25 bd       	out	0x25, r18	; 37
								break;
    1e3c:	0d c0       	rjmp	.+26     	; 0x1e58 <TIMERx_setTimerMode+0x4f6>
							case CTC_Output_Compare_Mode_CLEAR:
								/*Clear OC2 on compare match*/
								CLEAR_BIT(TCCR2,COM20);
    1e3e:	25 b5       	in	r18, 0x25	; 37
    1e40:	2f 7e       	andi	r18, 0xEF	; 239
    1e42:	25 bd       	out	0x25, r18	; 37
								SET_BIT(TCCR2,COM21);
    1e44:	25 b5       	in	r18, 0x25	; 37
    1e46:	20 62       	ori	r18, 0x20	; 32
    1e48:	25 bd       	out	0x25, r18	; 37
								break;
    1e4a:	06 c0       	rjmp	.+12     	; 0x1e58 <TIMERx_setTimerMode+0x4f6>
							case CTC_Output_Compare_SET:
							/*Set OC2 on compare match*/
								SET_BIT(TCCR2,COM20);
    1e4c:	25 b5       	in	r18, 0x25	; 37
    1e4e:	20 61       	ori	r18, 0x10	; 16
    1e50:	25 bd       	out	0x25, r18	; 37
								SET_BIT(TCCR2,COM21);
    1e52:	25 b5       	in	r18, 0x25	; 37
    1e54:	20 62       	ori	r18, 0x20	; 32
    1e56:	25 bd       	out	0x25, r18	; 37
							default: 
								l_ret |= E_NOT_OK;
								break;
						}
					     /*The Output Compare Register contains an 8-bit value that is continuously compared with the  counter value (TCNT2) */
					     OCR2 =(uint8_t) stPtr_a_Config->timer_compare_MatchValue & U8_BIT_REG_MASK;
    1e58:	fc 01       	movw	r30, r24
    1e5a:	80 85       	ldd	r24, Z+8	; 0x08
    1e5c:	83 bd       	out	0x23, r24	; 35
						/* Enable Timer0 CTC mode interrupt*/
						SET_BIT(TIMSK,OCIE2);
    1e5e:	89 b7       	in	r24, 0x39	; 57
    1e60:	80 68       	ori	r24, 0x80	; 128
    1e62:	89 bf       	out	0x39, r24	; 57
						break;
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	08 95       	ret
{
	Std_ReturnType l_ret = E_OK;
	if( (stPtr_a_Config == NULL) || (stPtr_a_Config->timer_type >= INVALID_TIMER_TYPE) || (stPtr_a_Config->timer_mode >= INVALID_TIMER_MODE) ||
	    (stPtr_a_Config->output_compare_mode >=CTC_INVALID_TIMER_OUTPUT_COMPARE_MODE ) )
	{
		l_ret = E_NOT_OK;
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	08 95       	ret
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	08 95       	ret
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	08 95       	ret
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	08 95       	ret
				}
				
				break;
				
			default:
				l_ret = E_NOT_OK;
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	08 95       	ret
						OCR0 = stPtr_a_Config->timer_compare_MatchValue & U8_BIT_REG_MASK;	
						/* Enable Timer0 CTC mode interrupt*/
						SET_BIT(TIMSK,OCIE0);
						break;
					default:
						l_ret = E_NOT_OK;
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	08 95       	ret
						OCR1AH = (stPtr_a_Config->timer_compare_MatchValue >> U8_BIT_REG_MASK) & U8_BIT_REG_MASK;	
						/* Enable Timer1 CTC-A mode interrupt*/
						SET_BIT(TIMSK,OCIE1A);
						break;
					default:
						l_ret = E_NOT_OK;
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	08 95       	ret
					     OCR2 =(uint8_t) stPtr_a_Config->timer_compare_MatchValue & U8_BIT_REG_MASK;
						/* Enable Timer0 CTC mode interrupt*/
						SET_BIT(TIMSK,OCIE2);
						break;
					default:
						l_ret = E_NOT_OK;
    1e84:	80 e0       	ldi	r24, 0x00	; 0
				break;
		}
	}
	
	return l_ret;
}
    1e86:	08 95       	ret

00001e88 <__vector_11>:
static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk);
static Std_ReturnType TIMERx_setTimerMode(const Timer_Config_t *stPtr_a_Config);

/***********************Interrupt Service Routines for Timer0 *************************/
ISR(TIMER0_OVF_vect)
{
    1e88:	1f 92       	push	r1
    1e8a:	0f 92       	push	r0
    1e8c:	0f b6       	in	r0, 0x3f	; 63
    1e8e:	0f 92       	push	r0
    1e90:	11 24       	eor	r1, r1
    1e92:	2f 93       	push	r18
    1e94:	3f 93       	push	r19
    1e96:	4f 93       	push	r20
    1e98:	5f 93       	push	r21
    1e9a:	6f 93       	push	r22
    1e9c:	7f 93       	push	r23
    1e9e:	8f 93       	push	r24
    1ea0:	9f 93       	push	r25
    1ea2:	af 93       	push	r26
    1ea4:	bf 93       	push	r27
    1ea6:	ef 93       	push	r30
    1ea8:	ff 93       	push	r31
	if(g_Timer0_callBackPtr != NULL)
    1eaa:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <g_Timer0_callBackPtr>
    1eae:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <g_Timer0_callBackPtr+0x1>
    1eb2:	89 2b       	or	r24, r25
    1eb4:	41 f0       	breq	.+16     	; 0x1ec6 <__vector_11+0x3e>
	{
		/* The timer0 overflow  occurred (must be cleared in software) */
		 CLEAR_BIT(TIFR,TOV0);
    1eb6:	88 b7       	in	r24, 0x38	; 56
    1eb8:	8e 7f       	andi	r24, 0xFE	; 254
    1eba:	88 bf       	out	0x38, r24	; 56
		/* Call the Call Back function in the upper layer after the timer overflow*/
		(*g_Timer0_callBackPtr)();
    1ebc:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <g_Timer0_callBackPtr>
    1ec0:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <g_Timer0_callBackPtr+0x1>
    1ec4:	09 95       	icall
	}
}
    1ec6:	ff 91       	pop	r31
    1ec8:	ef 91       	pop	r30
    1eca:	bf 91       	pop	r27
    1ecc:	af 91       	pop	r26
    1ece:	9f 91       	pop	r25
    1ed0:	8f 91       	pop	r24
    1ed2:	7f 91       	pop	r23
    1ed4:	6f 91       	pop	r22
    1ed6:	5f 91       	pop	r21
    1ed8:	4f 91       	pop	r20
    1eda:	3f 91       	pop	r19
    1edc:	2f 91       	pop	r18
    1ede:	0f 90       	pop	r0
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	0f 90       	pop	r0
    1ee4:	1f 90       	pop	r1
    1ee6:	18 95       	reti

00001ee8 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    1ee8:	1f 92       	push	r1
    1eea:	0f 92       	push	r0
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	0f 92       	push	r0
    1ef0:	11 24       	eor	r1, r1
    1ef2:	2f 93       	push	r18
    1ef4:	3f 93       	push	r19
    1ef6:	4f 93       	push	r20
    1ef8:	5f 93       	push	r21
    1efa:	6f 93       	push	r22
    1efc:	7f 93       	push	r23
    1efe:	8f 93       	push	r24
    1f00:	9f 93       	push	r25
    1f02:	af 93       	push	r26
    1f04:	bf 93       	push	r27
    1f06:	ef 93       	push	r30
    1f08:	ff 93       	push	r31
	if(g_Timer0_callBackPtr != NULL)
    1f0a:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <g_Timer0_callBackPtr>
    1f0e:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <g_Timer0_callBackPtr+0x1>
    1f12:	89 2b       	or	r24, r25
    1f14:	41 f0       	breq	.+16     	; 0x1f26 <__vector_10+0x3e>
	{
		/* The timer0 compare match occurred (must be cleared in software) */
		CLEAR_BIT(TIFR,OCF0);
    1f16:	88 b7       	in	r24, 0x38	; 56
    1f18:	8d 7f       	andi	r24, 0xFD	; 253
    1f1a:	88 bf       	out	0x38, r24	; 56
		/* Call the Call Back function in the upper layer after the timer matches the compare value*/
		(*g_Timer0_callBackPtr)();
    1f1c:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <g_Timer0_callBackPtr>
    1f20:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <g_Timer0_callBackPtr+0x1>
    1f24:	09 95       	icall
	}
}
    1f26:	ff 91       	pop	r31
    1f28:	ef 91       	pop	r30
    1f2a:	bf 91       	pop	r27
    1f2c:	af 91       	pop	r26
    1f2e:	9f 91       	pop	r25
    1f30:	8f 91       	pop	r24
    1f32:	7f 91       	pop	r23
    1f34:	6f 91       	pop	r22
    1f36:	5f 91       	pop	r21
    1f38:	4f 91       	pop	r20
    1f3a:	3f 91       	pop	r19
    1f3c:	2f 91       	pop	r18
    1f3e:	0f 90       	pop	r0
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	0f 90       	pop	r0
    1f44:	1f 90       	pop	r1
    1f46:	18 95       	reti

00001f48 <__vector_9>:
/***********************Interrupt Service Routines for Timer1 *************************/
ISR(TIMER1_OVF_vect)
{
    1f48:	1f 92       	push	r1
    1f4a:	0f 92       	push	r0
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	0f 92       	push	r0
    1f50:	11 24       	eor	r1, r1
    1f52:	2f 93       	push	r18
    1f54:	3f 93       	push	r19
    1f56:	4f 93       	push	r20
    1f58:	5f 93       	push	r21
    1f5a:	6f 93       	push	r22
    1f5c:	7f 93       	push	r23
    1f5e:	8f 93       	push	r24
    1f60:	9f 93       	push	r25
    1f62:	af 93       	push	r26
    1f64:	bf 93       	push	r27
    1f66:	ef 93       	push	r30
    1f68:	ff 93       	push	r31
	if(g_Timer1_callBackPtr != NULL)
    1f6a:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <g_Timer1_callBackPtr>
    1f6e:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <g_Timer1_callBackPtr+0x1>
    1f72:	89 2b       	or	r24, r25
    1f74:	41 f0       	breq	.+16     	; 0x1f86 <__vector_9+0x3e>
	{
		/* The timer0 overflow  occurred (must be cleared in software) */
		CLEAR_BIT(TIFR,TOV1);
    1f76:	88 b7       	in	r24, 0x38	; 56
    1f78:	8b 7f       	andi	r24, 0xFB	; 251
    1f7a:	88 bf       	out	0x38, r24	; 56
		/* Call the Call Back function in the upper layer after the timer overflow*/
		(*g_Timer1_callBackPtr)();
    1f7c:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <g_Timer1_callBackPtr>
    1f80:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <g_Timer1_callBackPtr+0x1>
    1f84:	09 95       	icall
	}
}
    1f86:	ff 91       	pop	r31
    1f88:	ef 91       	pop	r30
    1f8a:	bf 91       	pop	r27
    1f8c:	af 91       	pop	r26
    1f8e:	9f 91       	pop	r25
    1f90:	8f 91       	pop	r24
    1f92:	7f 91       	pop	r23
    1f94:	6f 91       	pop	r22
    1f96:	5f 91       	pop	r21
    1f98:	4f 91       	pop	r20
    1f9a:	3f 91       	pop	r19
    1f9c:	2f 91       	pop	r18
    1f9e:	0f 90       	pop	r0
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	0f 90       	pop	r0
    1fa4:	1f 90       	pop	r1
    1fa6:	18 95       	reti

00001fa8 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1fa8:	1f 92       	push	r1
    1faa:	0f 92       	push	r0
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	0f 92       	push	r0
    1fb0:	11 24       	eor	r1, r1
    1fb2:	2f 93       	push	r18
    1fb4:	3f 93       	push	r19
    1fb6:	4f 93       	push	r20
    1fb8:	5f 93       	push	r21
    1fba:	6f 93       	push	r22
    1fbc:	7f 93       	push	r23
    1fbe:	8f 93       	push	r24
    1fc0:	9f 93       	push	r25
    1fc2:	af 93       	push	r26
    1fc4:	bf 93       	push	r27
    1fc6:	ef 93       	push	r30
    1fc8:	ff 93       	push	r31
	if(g_Timer1_callBackPtr != NULL)
    1fca:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <g_Timer1_callBackPtr>
    1fce:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <g_Timer1_callBackPtr+0x1>
    1fd2:	89 2b       	or	r24, r25
    1fd4:	41 f0       	breq	.+16     	; 0x1fe6 <__vector_7+0x3e>
	{
		/* The timer0 compare match occurred (must be cleared in software) */
		CLEAR_BIT(TIFR,OCF1A);
    1fd6:	88 b7       	in	r24, 0x38	; 56
    1fd8:	8f 7e       	andi	r24, 0xEF	; 239
    1fda:	88 bf       	out	0x38, r24	; 56
		/* Call the Call Back function in the upper layer after the timer matches the compare value*/
		(*g_Timer1_callBackPtr)();
    1fdc:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <g_Timer1_callBackPtr>
    1fe0:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <g_Timer1_callBackPtr+0x1>
    1fe4:	09 95       	icall
	}
}
    1fe6:	ff 91       	pop	r31
    1fe8:	ef 91       	pop	r30
    1fea:	bf 91       	pop	r27
    1fec:	af 91       	pop	r26
    1fee:	9f 91       	pop	r25
    1ff0:	8f 91       	pop	r24
    1ff2:	7f 91       	pop	r23
    1ff4:	6f 91       	pop	r22
    1ff6:	5f 91       	pop	r21
    1ff8:	4f 91       	pop	r20
    1ffa:	3f 91       	pop	r19
    1ffc:	2f 91       	pop	r18
    1ffe:	0f 90       	pop	r0
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	0f 90       	pop	r0
    2004:	1f 90       	pop	r1
    2006:	18 95       	reti

00002008 <__vector_5>:
/***********************Interrupt Service Routines for Timer2 *************************/
ISR(TIMER2_OVF_vect)
{
    2008:	1f 92       	push	r1
    200a:	0f 92       	push	r0
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	0f 92       	push	r0
    2010:	11 24       	eor	r1, r1
    2012:	2f 93       	push	r18
    2014:	3f 93       	push	r19
    2016:	4f 93       	push	r20
    2018:	5f 93       	push	r21
    201a:	6f 93       	push	r22
    201c:	7f 93       	push	r23
    201e:	8f 93       	push	r24
    2020:	9f 93       	push	r25
    2022:	af 93       	push	r26
    2024:	bf 93       	push	r27
    2026:	ef 93       	push	r30
    2028:	ff 93       	push	r31
	if(g_Timer2_callBackPtr != NULL)
    202a:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <g_Timer2_callBackPtr>
    202e:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <g_Timer2_callBackPtr+0x1>
    2032:	89 2b       	or	r24, r25
    2034:	41 f0       	breq	.+16     	; 0x2046 <__vector_5+0x3e>
	{
		/* The timer2 overflow  occurred (must be cleared in software) */
		CLEAR_BIT(TIFR,TOV2);
    2036:	88 b7       	in	r24, 0x38	; 56
    2038:	8f 7b       	andi	r24, 0xBF	; 191
    203a:	88 bf       	out	0x38, r24	; 56
		/* Call the Call Back function in the upper layer after the timer overflow*/
		(*g_Timer2_callBackPtr)();
    203c:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <g_Timer2_callBackPtr>
    2040:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <g_Timer2_callBackPtr+0x1>
    2044:	09 95       	icall
	}
}
    2046:	ff 91       	pop	r31
    2048:	ef 91       	pop	r30
    204a:	bf 91       	pop	r27
    204c:	af 91       	pop	r26
    204e:	9f 91       	pop	r25
    2050:	8f 91       	pop	r24
    2052:	7f 91       	pop	r23
    2054:	6f 91       	pop	r22
    2056:	5f 91       	pop	r21
    2058:	4f 91       	pop	r20
    205a:	3f 91       	pop	r19
    205c:	2f 91       	pop	r18
    205e:	0f 90       	pop	r0
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	0f 90       	pop	r0
    2064:	1f 90       	pop	r1
    2066:	18 95       	reti

00002068 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    2068:	1f 92       	push	r1
    206a:	0f 92       	push	r0
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	0f 92       	push	r0
    2070:	11 24       	eor	r1, r1
    2072:	2f 93       	push	r18
    2074:	3f 93       	push	r19
    2076:	4f 93       	push	r20
    2078:	5f 93       	push	r21
    207a:	6f 93       	push	r22
    207c:	7f 93       	push	r23
    207e:	8f 93       	push	r24
    2080:	9f 93       	push	r25
    2082:	af 93       	push	r26
    2084:	bf 93       	push	r27
    2086:	ef 93       	push	r30
    2088:	ff 93       	push	r31
	if(g_Timer2_callBackPtr != NULL)
    208a:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <g_Timer2_callBackPtr>
    208e:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <g_Timer2_callBackPtr+0x1>
    2092:	89 2b       	or	r24, r25
    2094:	41 f0       	breq	.+16     	; 0x20a6 <__vector_4+0x3e>
	{
		/* The timer2 compare match occurred (must be cleared in software) */
		CLEAR_BIT(TIFR,OCF2);
    2096:	88 b7       	in	r24, 0x38	; 56
    2098:	8f 77       	andi	r24, 0x7F	; 127
    209a:	88 bf       	out	0x38, r24	; 56
		/* Call the Call Back function in the upper layer after the timer matches the compare value*/
		(*g_Timer2_callBackPtr)();
    209c:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <g_Timer2_callBackPtr>
    20a0:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <g_Timer2_callBackPtr+0x1>
    20a4:	09 95       	icall
	}
}
    20a6:	ff 91       	pop	r31
    20a8:	ef 91       	pop	r30
    20aa:	bf 91       	pop	r27
    20ac:	af 91       	pop	r26
    20ae:	9f 91       	pop	r25
    20b0:	8f 91       	pop	r24
    20b2:	7f 91       	pop	r23
    20b4:	6f 91       	pop	r22
    20b6:	5f 91       	pop	r21
    20b8:	4f 91       	pop	r20
    20ba:	3f 91       	pop	r19
    20bc:	2f 91       	pop	r18
    20be:	0f 90       	pop	r0
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	0f 90       	pop	r0
    20c4:	1f 90       	pop	r1
    20c6:	18 95       	reti

000020c8 <TIMERx_setCallBack>:
/*****************************************************************************************/
Std_ReturnType TIMERx_setCallBack(volatile void(*a_fptr)(void), const TimerType_t en_a_timer_type )
{
	Std_ReturnType l_ret = E_OK;
	if( (en_a_timer_type >= INVALID_TIMER_TYPE) || (NULL==a_fptr) )
    20c8:	63 30       	cpi	r22, 0x03	; 3
    20ca:	d0 f4       	brcc	.+52     	; 0x2100 <TIMERx_setCallBack+0x38>
    20cc:	00 97       	sbiw	r24, 0x00	; 0
    20ce:	d1 f0       	breq	.+52     	; 0x2104 <TIMERx_setCallBack+0x3c>
	{
		l_ret = E_NOT_OK;
	}
	else
	{
		switch(en_a_timer_type)
    20d0:	61 30       	cpi	r22, 0x01	; 1
    20d2:	51 f0       	breq	.+20     	; 0x20e8 <TIMERx_setCallBack+0x20>
    20d4:	18 f0       	brcs	.+6      	; 0x20dc <TIMERx_setCallBack+0x14>
    20d6:	62 30       	cpi	r22, 0x02	; 2
    20d8:	69 f0       	breq	.+26     	; 0x20f4 <TIMERx_setCallBack+0x2c>
    20da:	16 c0       	rjmp	.+44     	; 0x2108 <TIMERx_setCallBack+0x40>
		{
			case Timer0:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				g_Timer0_callBackPtr = a_fptr;
    20dc:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <g_Timer0_callBackPtr+0x1>
    20e0:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <g_Timer0_callBackPtr>
	}
}
/*****************************************************************************************/
Std_ReturnType TIMERx_setCallBack(volatile void(*a_fptr)(void), const TimerType_t en_a_timer_type )
{
	Std_ReturnType l_ret = E_OK;
    20e4:	81 e0       	ldi	r24, 0x01	; 1
		switch(en_a_timer_type)
		{
			case Timer0:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				g_Timer0_callBackPtr = a_fptr;
				break;
    20e6:	08 95       	ret
			case Timer1:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				g_Timer1_callBackPtr = a_fptr;
    20e8:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <g_Timer1_callBackPtr+0x1>
    20ec:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <g_Timer1_callBackPtr>
	}
}
/*****************************************************************************************/
Std_ReturnType TIMERx_setCallBack(volatile void(*a_fptr)(void), const TimerType_t en_a_timer_type )
{
	Std_ReturnType l_ret = E_OK;
    20f0:	81 e0       	ldi	r24, 0x01	; 1
				g_Timer0_callBackPtr = a_fptr;
				break;
			case Timer1:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				g_Timer1_callBackPtr = a_fptr;
				break;
    20f2:	08 95       	ret
			case Timer2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				g_Timer2_callBackPtr = a_fptr;
    20f4:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <g_Timer2_callBackPtr+0x1>
    20f8:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <g_Timer2_callBackPtr>
	}
}
/*****************************************************************************************/
Std_ReturnType TIMERx_setCallBack(volatile void(*a_fptr)(void), const TimerType_t en_a_timer_type )
{
	Std_ReturnType l_ret = E_OK;
    20fc:	81 e0       	ldi	r24, 0x01	; 1
				g_Timer1_callBackPtr = a_fptr;
				break;
			case Timer2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				g_Timer2_callBackPtr = a_fptr;
				break;
    20fe:	08 95       	ret
Std_ReturnType TIMERx_setCallBack(volatile void(*a_fptr)(void), const TimerType_t en_a_timer_type )
{
	Std_ReturnType l_ret = E_OK;
	if( (en_a_timer_type >= INVALID_TIMER_TYPE) || (NULL==a_fptr) )
	{
		l_ret = E_NOT_OK;
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	08 95       	ret
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	08 95       	ret
			case Timer2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				g_Timer2_callBackPtr = a_fptr;
				break;
			default:
				l_ret = E_NOT_OK;
    2108:	80 e0       	ldi	r24, 0x00	; 0
				break;
		}
	}
	return l_ret;
}
    210a:	08 95       	ret

0000210c <TIMERx_init>:


Std_ReturnType TIMERx_init(const Timer_Config_t *stPtr_a_Config)
{
    210c:	cf 93       	push	r28
    210e:	df 93       	push	r29
	Std_ReturnType l_ret = E_OK;
	if((stPtr_a_Config == NULL) || (stPtr_a_Config->timer_type >= INVALID_TIMER_TYPE) || (stPtr_a_Config->timer_mode >= INVALID_TIMER_MODE) ||
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	09 f4       	brne	.+2      	; 0x2116 <TIMERx_init+0xa>
    2114:	48 c0       	rjmp	.+144    	; 0x21a6 <TIMERx_init+0x9a>
    2116:	fc 01       	movw	r30, r24
    2118:	20 81       	ld	r18, Z
    211a:	23 30       	cpi	r18, 0x03	; 3
    211c:	08 f0       	brcs	.+2      	; 0x2120 <TIMERx_init+0x14>
    211e:	45 c0       	rjmp	.+138    	; 0x21aa <TIMERx_init+0x9e>
    2120:	32 81       	ldd	r19, Z+2	; 0x02
    2122:	34 30       	cpi	r19, 0x04	; 4
    2124:	08 f0       	brcs	.+2      	; 0x2128 <TIMERx_init+0x1c>
    2126:	43 c0       	rjmp	.+134    	; 0x21ae <TIMERx_init+0xa2>
	(stPtr_a_Config->output_compare_mode >=CTC_INVALID_TIMER_OUTPUT_COMPARE_MODE ) || stPtr_a_Config->fast_pwm_mode >= FAST_INVALID_TIMER_FAST_PWM_MODE)
    2128:	33 81       	ldd	r19, Z+3	; 0x03


Std_ReturnType TIMERx_init(const Timer_Config_t *stPtr_a_Config)
{
	Std_ReturnType l_ret = E_OK;
	if((stPtr_a_Config == NULL) || (stPtr_a_Config->timer_type >= INVALID_TIMER_TYPE) || (stPtr_a_Config->timer_mode >= INVALID_TIMER_MODE) ||
    212a:	34 30       	cpi	r19, 0x04	; 4
    212c:	08 f0       	brcs	.+2      	; 0x2130 <TIMERx_init+0x24>
    212e:	41 c0       	rjmp	.+130    	; 0x21b2 <TIMERx_init+0xa6>
	(stPtr_a_Config->output_compare_mode >=CTC_INVALID_TIMER_OUTPUT_COMPARE_MODE ) || stPtr_a_Config->fast_pwm_mode >= FAST_INVALID_TIMER_FAST_PWM_MODE)
    2130:	34 81       	ldd	r19, Z+4	; 0x04
    2132:	34 30       	cpi	r19, 0x04	; 4
    2134:	08 f0       	brcs	.+2      	; 0x2138 <TIMERx_init+0x2c>
    2136:	3f c0       	rjmp	.+126    	; 0x21b6 <TIMERx_init+0xaa>
    2138:	ec 01       	movw	r28, r24
	{
		l_ret = E_NOT_OK;
	}
	else
	{
		switch(stPtr_a_Config->timer_type)
    213a:	21 30       	cpi	r18, 0x01	; 1
    213c:	99 f0       	breq	.+38     	; 0x2164 <TIMERx_init+0x58>
    213e:	18 f0       	brcs	.+6      	; 0x2146 <TIMERx_init+0x3a>
    2140:	22 30       	cpi	r18, 0x02	; 2
    2142:	29 f1       	breq	.+74     	; 0x218e <TIMERx_init+0x82>
    2144:	3a c0       	rjmp	.+116    	; 0x21ba <TIMERx_init+0xae>
		{
			case Timer0:
				/*Clear registers of Timer0 before processing any of them*/
				CLEAR_REG(TCNT0);
    2146:	12 be       	out	0x32, r1	; 50
				CLEAR_REG(TCCR0);
    2148:	13 be       	out	0x33, r1	; 51
				CLEAR_REG(OCR0);
    214a:	1c be       	out	0x3c, r1	; 60
				CLEAR_REG(TIMSK);
    214c:	19 be       	out	0x39, r1	; 57
				CLEAR_REG(TIFR);
    214e:	18 be       	out	0x38, r1	; 56
				/*Configure initial value in TCNT0 for Timer0 to start count from it*/
				TCNT0 = stPtr_a_Config->timer_InitialValue & U8_BIT_REG_MASK;
    2150:	86 81       	ldd	r24, Z+6	; 0x06
    2152:	82 bf       	out	0x32, r24	; 50
				/*Configure the TIMER mode value and enable the interrupt for this mode*/
				l_ret |= TIMERx_setTimerMode(stPtr_a_Config);
    2154:	cf 01       	movw	r24, r30
    2156:	0e 94 b1 0c 	call	0x1962	; 0x1962 <TIMERx_setTimerMode>
				/*Configure the TIMER Pre-scaler value for Timer0 clock*/
				l_ret = TIMERx_selectClk(Timer0,stPtr_a_Config->timer_clock);
    215a:	69 81       	ldd	r22, Y+1	; 0x01
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TIMERx_selectClk>
				break;
    2162:	2c c0       	rjmp	.+88     	; 0x21bc <TIMERx_init+0xb0>
			
			case Timer1:
				/*Clear registers of Timer1 before processing any of them*/
				CLEAR_REG(TCNT1L);
    2164:	1c bc       	out	0x2c, r1	; 44
				CLEAR_REG(TCNT1H);
    2166:	1d bc       	out	0x2d, r1	; 45
				CLEAR_REG(TCCR1A);
    2168:	1f bc       	out	0x2f, r1	; 47
				CLEAR_REG(TCCR1B);
    216a:	1e bc       	out	0x2e, r1	; 46
				CLEAR_REG(OCR1AH);
    216c:	1b bc       	out	0x2b, r1	; 43
				CLEAR_REG(OCR1AL);
    216e:	1a bc       	out	0x2a, r1	; 42
				CLEAR_REG(TIMSK);
    2170:	19 be       	out	0x39, r1	; 57
				CLEAR_REG(TIFR);
    2172:	18 be       	out	0x38, r1	; 56
				/*Configure initial value in TCNT1(high&low) for Timer0 to start count from it*/
				TCNT1L =(stPtr_a_Config->timer_InitialValue) & U8_BIT_REG_MASK;
    2174:	86 81       	ldd	r24, Z+6	; 0x06
    2176:	8c bd       	out	0x2c, r24	; 44
				TCNT1H = (stPtr_a_Config->timer_InitialValue >> U8_BIT_REG_MASK) & U8_BIT_REG_MASK;
    2178:	86 81       	ldd	r24, Z+6	; 0x06
    217a:	97 81       	ldd	r25, Z+7	; 0x07
    217c:	8d bd       	out	0x2d, r24	; 45
				/*Configure the TIMER mode value and enable the interrupt for this mode*/
				l_ret |= TIMERx_setTimerMode(stPtr_a_Config);
    217e:	cf 01       	movw	r24, r30
    2180:	0e 94 b1 0c 	call	0x1962	; 0x1962 <TIMERx_setTimerMode>
				/*Configure the TIMER Pre-scaler value for Timer1 clock*/
				l_ret = TIMERx_selectClk(Timer1,stPtr_a_Config->timer_clock);
    2184:	69 81       	ldd	r22, Y+1	; 0x01
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TIMERx_selectClk>
				break;
    218c:	17 c0       	rjmp	.+46     	; 0x21bc <TIMERx_init+0xb0>
			
			case Timer2:
				/*Clear registers of Timer2 before processing any of them*/
				CLEAR_REG(TCNT2);
    218e:	14 bc       	out	0x24, r1	; 36
				CLEAR_REG(TCCR2);
    2190:	15 bc       	out	0x25, r1	; 37
				CLEAR_REG(OCR2);
    2192:	13 bc       	out	0x23, r1	; 35
				CLEAR_REG(TIMSK);
    2194:	19 be       	out	0x39, r1	; 57
				CLEAR_REG(TIFR);
    2196:	18 be       	out	0x38, r1	; 56
				/*Configure initial value in TCNT for Timer2 to start count from it*/
				TCNT2 = stPtr_a_Config->timer_InitialValue & U8_BIT_REG_MASK;
    2198:	86 81       	ldd	r24, Z+6	; 0x06
    219a:	84 bd       	out	0x24, r24	; 36
				/*Configure the TIMER mode value and enable the interrupt for this mode*/
				l_ret |= TIMERx_setTimerMode(stPtr_a_Config);
    219c:	cf 01       	movw	r24, r30
    219e:	0e 94 b1 0c 	call	0x1962	; 0x1962 <TIMERx_setTimerMode>
    21a2:	81 60       	ori	r24, 0x01	; 1
				break;
    21a4:	0b c0       	rjmp	.+22     	; 0x21bc <TIMERx_init+0xb0>
{
	Std_ReturnType l_ret = E_OK;
	if((stPtr_a_Config == NULL) || (stPtr_a_Config->timer_type >= INVALID_TIMER_TYPE) || (stPtr_a_Config->timer_mode >= INVALID_TIMER_MODE) ||
	(stPtr_a_Config->output_compare_mode >=CTC_INVALID_TIMER_OUTPUT_COMPARE_MODE ) || stPtr_a_Config->fast_pwm_mode >= FAST_INVALID_TIMER_FAST_PWM_MODE)
	{
		l_ret = E_NOT_OK;
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	09 c0       	rjmp	.+18     	; 0x21bc <TIMERx_init+0xb0>
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	07 c0       	rjmp	.+14     	; 0x21bc <TIMERx_init+0xb0>
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	05 c0       	rjmp	.+10     	; 0x21bc <TIMERx_init+0xb0>
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	03 c0       	rjmp	.+6      	; 0x21bc <TIMERx_init+0xb0>
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	01 c0       	rjmp	.+2      	; 0x21bc <TIMERx_init+0xb0>
				/*Configure the TIMER mode value and enable the interrupt for this mode*/
				l_ret |= TIMERx_setTimerMode(stPtr_a_Config);
				break;
			
			default:
				l_ret |= E_NOT_OK;
    21ba:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}
	return l_ret;
}
    21bc:	df 91       	pop	r29
    21be:	cf 91       	pop	r28
    21c0:	08 95       	ret

000021c2 <TIMERx_start>:
Std_ReturnType TIMERx_start(const Timer_Config_t *stPtr_a_Config)
{
	Std_ReturnType l_ret = E_OK;
	if((stPtr_a_Config == NULL) || (stPtr_a_Config->timer_type >= INVALID_TIMER_TYPE) || (stPtr_a_Config->timer_mode >= INVALID_TIMER_MODE) ||
    21c2:	00 97       	sbiw	r24, 0x00	; 0
    21c4:	91 f0       	breq	.+36     	; 0x21ea <TIMERx_start+0x28>
    21c6:	fc 01       	movw	r30, r24
    21c8:	20 81       	ld	r18, Z
    21ca:	23 30       	cpi	r18, 0x03	; 3
    21cc:	80 f4       	brcc	.+32     	; 0x21ee <TIMERx_start+0x2c>
    21ce:	22 81       	ldd	r18, Z+2	; 0x02
    21d0:	24 30       	cpi	r18, 0x04	; 4
    21d2:	78 f4       	brcc	.+30     	; 0x21f2 <TIMERx_start+0x30>
	(stPtr_a_Config->output_compare_mode >=CTC_INVALID_TIMER_OUTPUT_COMPARE_MODE ) || stPtr_a_Config->fast_pwm_mode >= FAST_INVALID_TIMER_FAST_PWM_MODE)
    21d4:	23 81       	ldd	r18, Z+3	; 0x03
	return l_ret;
}
Std_ReturnType TIMERx_start(const Timer_Config_t *stPtr_a_Config)
{
	Std_ReturnType l_ret = E_OK;
	if((stPtr_a_Config == NULL) || (stPtr_a_Config->timer_type >= INVALID_TIMER_TYPE) || (stPtr_a_Config->timer_mode >= INVALID_TIMER_MODE) ||
    21d6:	24 30       	cpi	r18, 0x04	; 4
    21d8:	70 f4       	brcc	.+28     	; 0x21f6 <TIMERx_start+0x34>
	(stPtr_a_Config->output_compare_mode >=CTC_INVALID_TIMER_OUTPUT_COMPARE_MODE ) || stPtr_a_Config->fast_pwm_mode >= FAST_INVALID_TIMER_FAST_PWM_MODE)
    21da:	24 81       	ldd	r18, Z+4	; 0x04
    21dc:	24 30       	cpi	r18, 0x04	; 4
    21de:	68 f4       	brcc	.+26     	; 0x21fa <TIMERx_start+0x38>
		l_ret = E_NOT_OK;
	}
	else
	{
		/*Configure the TIMER Pre-scaler value for Timer0 clock*/
		l_ret = TIMERx_selectClk(Timer2,stPtr_a_Config->timer_clock);
    21e0:	61 81       	ldd	r22, Z+1	; 0x01
    21e2:	82 e0       	ldi	r24, 0x02	; 2
    21e4:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <TIMERx_selectClk>
    21e8:	08 95       	ret
{
	Std_ReturnType l_ret = E_OK;
	if((stPtr_a_Config == NULL) || (stPtr_a_Config->timer_type >= INVALID_TIMER_TYPE) || (stPtr_a_Config->timer_mode >= INVALID_TIMER_MODE) ||
	(stPtr_a_Config->output_compare_mode >=CTC_INVALID_TIMER_OUTPUT_COMPARE_MODE ) || stPtr_a_Config->fast_pwm_mode >= FAST_INVALID_TIMER_FAST_PWM_MODE)
	{
		l_ret = E_NOT_OK;
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	08 95       	ret
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	08 95       	ret
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	08 95       	ret
    21f6:	80 e0       	ldi	r24, 0x00	; 0
    21f8:	08 95       	ret
    21fa:	80 e0       	ldi	r24, 0x00	; 0
	{
		/*Configure the TIMER Pre-scaler value for Timer0 clock*/
		l_ret = TIMERx_selectClk(Timer2,stPtr_a_Config->timer_clock);
	}
	return l_ret;
}
    21fc:	08 95       	ret

000021fe <__tablejump2__>:
    21fe:	ee 0f       	add	r30, r30
    2200:	ff 1f       	adc	r31, r31
    2202:	05 90       	lpm	r0, Z+
    2204:	f4 91       	lpm	r31, Z
    2206:	e0 2d       	mov	r30, r0
    2208:	09 94       	ijmp

0000220a <_exit>:
    220a:	f8 94       	cli

0000220c <__stop_program>:
    220c:	ff cf       	rjmp	.-2      	; 0x220c <__stop_program>
