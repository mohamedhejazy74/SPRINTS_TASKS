
LED_sequence_V3.0_MISRA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002230  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00002230  000022c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800090  00800090  000022f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00002360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003430  00000000  00000000  000025e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f2f  00000000  00000000  00005a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002a35  00000000  00000000  00006947  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000066c  00000000  00000000  0000937c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000118e  00000000  00000000  000099e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022dc  00000000  00000000  0000ab76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  0000ce52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__ctors_end>
       4:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__vector_1>
       8:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__vector_2>
       c:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <__vector_3>
      10:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__vector_4>
      14:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <__vector_5>
      18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      1c:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__vector_7>
      20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      24:	0c 94 dc 0f 	jmp	0x1fb8	; 0x1fb8 <__vector_9>
      28:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <__vector_10>
      2c:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <__vector_11>
      30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      54:	e9 00       	.word	0x00e9	; ????
      56:	a7 01       	movw	r20, r14
      58:	91 02       	muls	r25, r17
      5a:	ad 03       	fmulsu	r18, r21
      5c:	fc 04       	cpc	r15, r12
      5e:	4b 06       	cpc	r4, r27
      60:	9a 07       	cpc	r25, r26
      62:	e9 08       	sbc	r14, r9
      64:	c2 0b       	sbc	r28, r18
      66:	cd 0b       	sbc	r28, r29
      68:	d8 0b       	sbc	r29, r24
      6a:	e6 0c       	add	r14, r6
      6c:	e3 0b       	sbc	r30, r19
      6e:	e6 0c       	add	r14, r6
      70:	ee 0b       	sbc	r30, r30
      72:	f9 0b       	sbc	r31, r25
      74:	04 0c       	add	r0, r4
      76:	0f 0c       	add	r0, r15
      78:	25 0c       	add	r2, r5
      7a:	30 0c       	add	r3, r0
      7c:	3b 0c       	add	r3, r11
      7e:	e8 0c       	add	r14, r8
      80:	46 0c       	add	r4, r6
      82:	e8 0c       	add	r14, r8
      84:	51 0c       	add	r5, r1
      86:	5c 0c       	add	r5, r12
      88:	67 0c       	add	r6, r7
      8a:	72 0c       	add	r7, r2
      8c:	88 0c       	add	r8, r8
      8e:	93 0c       	add	r9, r3
      90:	9e 0c       	add	r9, r14
      92:	a9 0c       	add	r10, r9
      94:	b4 0c       	add	r11, r4
      96:	bf 0c       	add	r11, r15
      98:	ca 0c       	add	r12, r10
      9a:	d5 0c       	add	r13, r5

0000009c <__ctors_end>:
      9c:	11 24       	eor	r1, r1
      9e:	1f be       	out	0x3f, r1	; 63
      a0:	cf e5       	ldi	r28, 0x5F	; 95
      a2:	d8 e0       	ldi	r29, 0x08	; 8
      a4:	de bf       	out	0x3e, r29	; 62
      a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
      a8:	10 e0       	ldi	r17, 0x00	; 0
      aa:	a0 e6       	ldi	r26, 0x60	; 96
      ac:	b0 e0       	ldi	r27, 0x00	; 0
      ae:	e0 e3       	ldi	r30, 0x30	; 48
      b0:	f2 e2       	ldi	r31, 0x22	; 34
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x10>
      b4:	05 90       	lpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a0 39       	cpi	r26, 0x90	; 144
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0xc>

000000be <__do_clear_bss>:
      be:	20 e0       	ldi	r18, 0x00	; 0
      c0:	a0 e9       	ldi	r26, 0x90	; 144
      c2:	b0 e0       	ldi	r27, 0x00	; 0
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	aa 3a       	cpi	r26, 0xAA	; 170
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	0e 94 9c 09 	call	0x1338	; 0x1338 <main>
      d2:	0c 94 16 11 	jmp	0x222c	; 0x222c <_exit>

000000d6 <__bad_interrupt>:
      d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <UPDATE_ON_OFF_DURATION>:
	return l_ret;
}

static void UPDATE_ON_OFF_DURATION(void)
{
	u16_g_100_ms_cnt++;
      da:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
      de:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
      e2:	01 96       	adiw	r24, 0x01	; 1
      e4:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__data_end+0x1>
      e8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__data_end>
	/*the life time of the blink cycle is 1000ms*/
	if(u16_g_100_ms_cnt >= BLINK_ON_OFF_MAX_DURATION)
      ec:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
      f0:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
      f4:	0a 97       	sbiw	r24, 0x0a	; 10
      f6:	20 f0       	brcs	.+8      	; 0x100 <UPDATE_ON_OFF_DURATION+0x26>
	{
		/*start count from beginning*/
		u16_g_100_ms_cnt = 0;
      f8:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__data_end+0x1>
      fc:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__data_end>
     100:	08 95       	ret

00000102 <LEDS_SEQ_UPDATE>:
	}
}

static  void LEDS_SEQ_UPDATE(void)
{
	u16_g_100_ms_cnt = 0;
     102:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__data_end+0x1>
     106:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__data_end>
	u8_g_pressCnt++;
     10a:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     10e:	8f 5f       	subi	r24, 0xFF	; 255
     110:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <u8_g_pressCnt>
     114:	08 95       	ret

00000116 <BLINK_MODE_UPDATE>:
}
static void BLINK_MODE_UPDATE(void)
{
	u16_g_100_ms_cnt = 0;
     116:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__data_end+0x1>
     11a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__data_end>
	u8_g_blinkMode_update++;
     11e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     122:	8f 5f       	subi	r24, 0xFF	; 255
     124:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <u8_g_blinkMode_update>
     128:	08 95       	ret

0000012a <APP_init>:
static volatile uint8_t u8_g_on_off_index;
static volatile uint16_t u16_g_100_ms_cnt;


Std_ReturnType APP_init(void)
{
     12a:	cf 93       	push	r28
	Std_ReturnType l_ret = E_OK;
	GLOBAL_InterruptEnable();
     12c:	8f b7       	in	r24, 0x3f	; 63
     12e:	80 68       	ori	r24, 0x80	; 128
     130:	8f bf       	out	0x3f, r24	; 63
	l_ret  = LED_initialize(&s_led0);
     132:	81 e7       	ldi	r24, 0x71	; 113
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 1d 09 	call	0x123a	; 0x123a <LED_initialize>
     13a:	c8 2f       	mov	r28, r24
	l_ret |= LED_initialize(&s_led1);
     13c:	8e e6       	ldi	r24, 0x6E	; 110
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	0e 94 1d 09 	call	0x123a	; 0x123a <LED_initialize>
     144:	c8 2b       	or	r28, r24
	l_ret |= LED_initialize(&s_led2);
     146:	8b e6       	ldi	r24, 0x6B	; 107
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	0e 94 1d 09 	call	0x123a	; 0x123a <LED_initialize>
     14e:	c8 2b       	or	r28, r24
	l_ret |= LED_initialize(&s_led3);
     150:	88 e6       	ldi	r24, 0x68	; 104
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 1d 09 	call	0x123a	; 0x123a <LED_initialize>
     158:	c8 2b       	or	r28, r24
	l_ret |= BTN_init(&s_btn0);
     15a:	84 e6       	ldi	r24, 0x64	; 100
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	0e 94 01 09 	call	0x1202	; 0x1202 <BTN_init>
     162:	c8 2b       	or	r28, r24
	l_ret |= BTN_init(&s_btn1);
     164:	80 e6       	ldi	r24, 0x60	; 96
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 01 09 	call	0x1202	; 0x1202 <BTN_init>
     16c:	c8 2b       	or	r28, r24
	l_ret |= EXT_INTx_Init(&s_INT0);
     16e:	8e e7       	ldi	r24, 0x7E	; 126
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	0e 94 40 0b 	call	0x1680	; 0x1680 <EXT_INTx_Init>
     176:	c8 2b       	or	r28, r24
	l_ret |= EXT_INTx_Init(&s_INT1);
     178:	8c e7       	ldi	r24, 0x7C	; 124
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 40 0b 	call	0x1680	; 0x1680 <EXT_INTx_Init>
     180:	c8 2b       	or	r28, r24
	/*initiate the timer */
	  

	
	st_g_timer.call_back_function = UPDATE_ON_OFF_DURATION;
     182:	8d e6       	ldi	r24, 0x6D	; 109
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <st_g_timer+0x7>
     18a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <st_g_timer+0x6>
	l_ret |= TIMER_MANGER_init(&st_g_timer);
     18e:	84 e7       	ldi	r24, 0x74	; 116
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <TIMER_MANGER_init>
	//l_ret = TIMERx_init(&st_g_timer);
	return l_ret;
}
     196:	8c 2b       	or	r24, r28
     198:	cf 91       	pop	r28
     19a:	08 95       	ret

0000019c <APP_start_program>:

Std_ReturnType APP_start_program(void)
{
     19c:	cf 93       	push	r28
	Std_ReturnType l_ret = E_OK;
	l_ret = EXT_INTx_setCallBack(&LEDS_SEQ_UPDATE,INTERRUPT_EXTERNAL_INT0);
     19e:	60 e0       	ldi	r22, 0x00	; 0
     1a0:	81 e8       	ldi	r24, 0x81	; 129
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	0e 94 a6 0a 	call	0x154c	; 0x154c <EXT_INTx_setCallBack>
	l_ret = EXT_INTx_setCallBack(&BLINK_MODE_UPDATE,INTERRUPT_EXTERNAL_INT1);
     1a8:	61 e0       	ldi	r22, 0x01	; 1
     1aa:	8b e8       	ldi	r24, 0x8B	; 139
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 a6 0a 	call	0x154c	; 0x154c <EXT_INTx_setCallBack>
     1b2:	c8 2f       	mov	r28, r24
	/*set call-back function that increment the timer tick */
	//l_ret |= TIMERx_setCallBack(&UPDATE_ON_OFF_DURATION , Timer0);
	
		switch(u8_g_pressCnt)
     1b4:	e0 91 93 00 	lds	r30, 0x0093	; 0x800093 <u8_g_pressCnt>
     1b8:	8e 2f       	mov	r24, r30
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	fc 01       	movw	r30, r24
     1be:	31 97       	sbiw	r30, 0x01	; 1
     1c0:	e8 30       	cpi	r30, 0x08	; 8
     1c2:	f1 05       	cpc	r31, r1
     1c4:	10 f0       	brcs	.+4      	; 0x1ca <APP_start_program+0x2e>
     1c6:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <__stack+0x99d>
     1ca:	e6 5d       	subi	r30, 0xD6	; 214
     1cc:	ff 4f       	sbci	r31, 0xFF	; 255
     1ce:	0c 94 10 11 	jmp	0x2220	; 0x2220 <__tablejump2__>
		{
			case FIRST_STATE:
				/*start the timer with the first press, will fire an interrupt on compare match with 100ms */
				l_ret = TIMER_MANGER_start(F_CPU_1024,st_g_timer.timer_num);
     1d2:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <st_g_timer>
     1d6:	87 e0       	ldi	r24, 0x07	; 7
     1d8:	0e 94 91 09 	call	0x1322	; 0x1322 <TIMER_MANGER_start>
     1dc:	c8 2f       	mov	r28, r24
				//l_ret = TIMERx_start(F_CPU_1024,st_g_timer.timer_num);
				
				switch(u8_g_blinkMode_update)
     1de:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     1e2:	82 30       	cpi	r24, 0x02	; 2
     1e4:	09 f4       	brne	.+2      	; 0x1e8 <APP_start_program+0x4c>
     1e6:	66 c0       	rjmp	.+204    	; 0x2b4 <APP_start_program+0x118>
     1e8:	30 f4       	brcc	.+12     	; 0x1f6 <APP_start_program+0x5a>
     1ea:	88 23       	and	r24, r24
     1ec:	11 f1       	breq	.+68     	; 0x232 <APP_start_program+0x96>
     1ee:	81 30       	cpi	r24, 0x01	; 1
     1f0:	09 f4       	brne	.+2      	; 0x1f4 <APP_start_program+0x58>
     1f2:	3f c0       	rjmp	.+126    	; 0x272 <APP_start_program+0xd6>
     1f4:	f6 c7       	rjmp	.+4076   	; 0x11e2 <__stack+0x983>
     1f6:	83 30       	cpi	r24, 0x03	; 3
     1f8:	09 f4       	brne	.+2      	; 0x1fc <APP_start_program+0x60>
     1fa:	7d c0       	rjmp	.+250    	; 0x2f6 <APP_start_program+0x15a>
     1fc:	84 30       	cpi	r24, 0x04	; 4
     1fe:	09 f4       	brne	.+2      	; 0x202 <APP_start_program+0x66>
     200:	9b c0       	rjmp	.+310    	; 0x338 <APP_start_program+0x19c>
     202:	ef c7       	rjmp	.+4062   	; 0x11e2 <__stack+0x983>
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(FIRST_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_ONE_ON)
     204:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     208:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     20c:	89 2b       	or	r24, r25
     20e:	31 f4       	brne	.+12     	; 0x21c <APP_start_program+0x80>
							{
									/*blink led0 with the current mode*/
								    l_ret |= LED_turn_on(&s_led0);
     210:	81 e7       	ldi	r24, 0x71	; 113
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     218:	c8 2b       	or	r28, r24
     21a:	0b c0       	rjmp	.+22     	; 0x232 <APP_start_program+0x96>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_ONE_ON)
     21c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     220:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     224:	89 2b       	or	r24, r25
     226:	29 f0       	breq	.+10     	; 0x232 <APP_start_program+0x96>
							{		/*blink led0 with the current mode*/
									l_ret |= LED_turn_off(&s_led0);
     228:	81 e7       	ldi	r24, 0x71	; 113
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     230:	c8 2b       	or	r28, r24
				//l_ret = TIMERx_start(F_CPU_1024,st_g_timer.timer_num);
				
				switch(u8_g_blinkMode_update)
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(FIRST_STATE==u8_g_pressCnt))
     232:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     236:	81 11       	cpse	r24, r1
     238:	e1 c7       	rjmp	.+4034   	; 0x11fc <__stack+0x99d>
     23a:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     23e:	81 30       	cpi	r24, 0x01	; 1
     240:	09 f3       	breq	.-62     	; 0x204 <APP_start_program+0x68>
     242:	dc c7       	rjmp	.+4024   	; 0x11fc <__stack+0x99d>
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(FIRST_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_TWO_ON)
     244:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     248:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     24c:	02 97       	sbiw	r24, 0x02	; 2
     24e:	30 f4       	brcc	.+12     	; 0x25c <APP_start_program+0xc0>
							{
								/*blink led0 with the current mode*/
								l_ret |= LED_turn_on(&s_led0);
     250:	81 e7       	ldi	r24, 0x71	; 113
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     258:	c8 2b       	or	r28, r24
     25a:	0b c0       	rjmp	.+22     	; 0x272 <APP_start_program+0xd6>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_TWO_ON)
     25c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     260:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     264:	02 97       	sbiw	r24, 0x02	; 2
     266:	28 f0       	brcs	.+10     	; 0x272 <APP_start_program+0xd6>
							{		/*blink led0 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     268:	81 e7       	ldi	r24, 0x71	; 113
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     270:	c8 2b       	or	r28, r24
							}
						}
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(FIRST_STATE==u8_g_pressCnt))
     272:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     276:	81 30       	cpi	r24, 0x01	; 1
     278:	09 f0       	breq	.+2      	; 0x27c <APP_start_program+0xe0>
     27a:	c0 c7       	rjmp	.+3968   	; 0x11fc <__stack+0x99d>
     27c:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     280:	81 30       	cpi	r24, 0x01	; 1
     282:	01 f3       	breq	.-64     	; 0x244 <APP_start_program+0xa8>
     284:	bb c7       	rjmp	.+3958   	; 0x11fc <__stack+0x99d>
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(FIRST_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_THREE_ON)
     286:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     28a:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     28e:	03 97       	sbiw	r24, 0x03	; 3
     290:	30 f4       	brcc	.+12     	; 0x29e <APP_start_program+0x102>
							{
								/*blink led0 with the current mode*/
								l_ret |= LED_turn_on(&s_led0);
     292:	81 e7       	ldi	r24, 0x71	; 113
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     29a:	c8 2b       	or	r28, r24
     29c:	0b c0       	rjmp	.+22     	; 0x2b4 <APP_start_program+0x118>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_THREE_ON)
     29e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     2a2:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     2a6:	03 97       	sbiw	r24, 0x03	; 3
     2a8:	28 f0       	brcs	.+10     	; 0x2b4 <APP_start_program+0x118>
							{		/*blink led0 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     2aa:	81 e7       	ldi	r24, 0x71	; 113
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     2b2:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(FIRST_STATE==u8_g_pressCnt))
     2b4:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     2b8:	82 30       	cpi	r24, 0x02	; 2
     2ba:	09 f0       	breq	.+2      	; 0x2be <APP_start_program+0x122>
     2bc:	9f c7       	rjmp	.+3902   	; 0x11fc <__stack+0x99d>
     2be:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     2c2:	81 30       	cpi	r24, 0x01	; 1
     2c4:	01 f3       	breq	.-64     	; 0x286 <APP_start_program+0xea>
     2c6:	9a c7       	rjmp	.+3892   	; 0x11fc <__stack+0x99d>
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(FIRST_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FOUR_ON)
     2c8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     2cc:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     2d0:	05 97       	sbiw	r24, 0x05	; 5
     2d2:	30 f4       	brcc	.+12     	; 0x2e0 <APP_start_program+0x144>
							{
								/*blink led0 with the current mode*/
								l_ret |= LED_turn_on(&s_led0);
     2d4:	81 e7       	ldi	r24, 0x71	; 113
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     2dc:	c8 2b       	or	r28, r24
     2de:	0b c0       	rjmp	.+22     	; 0x2f6 <APP_start_program+0x15a>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FOUR_ON)
     2e0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     2e4:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     2e8:	05 97       	sbiw	r24, 0x05	; 5
     2ea:	28 f0       	brcs	.+10     	; 0x2f6 <APP_start_program+0x15a>
							{		/*blink led0 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     2ec:	81 e7       	ldi	r24, 0x71	; 113
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     2f4:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(FIRST_STATE==u8_g_pressCnt))
     2f6:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     2fa:	83 30       	cpi	r24, 0x03	; 3
     2fc:	09 f0       	breq	.+2      	; 0x300 <APP_start_program+0x164>
     2fe:	7e c7       	rjmp	.+3836   	; 0x11fc <__stack+0x99d>
     300:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     304:	81 30       	cpi	r24, 0x01	; 1
     306:	01 f3       	breq	.-64     	; 0x2c8 <APP_start_program+0x12c>
     308:	79 c7       	rjmp	.+3826   	; 0x11fc <__stack+0x99d>
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(FIRST_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FIVE_ON)
     30a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     30e:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     312:	08 97       	sbiw	r24, 0x08	; 8
     314:	30 f4       	brcc	.+12     	; 0x322 <APP_start_program+0x186>
							{
								/*blink led0 with the current mode*/
								l_ret |= LED_turn_on(&s_led0);
     316:	81 e7       	ldi	r24, 0x71	; 113
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     31e:	c8 2b       	or	r28, r24
     320:	0b c0       	rjmp	.+22     	; 0x338 <APP_start_program+0x19c>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FIVE_ON)
     322:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     326:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     32a:	08 97       	sbiw	r24, 0x08	; 8
     32c:	28 f0       	brcs	.+10     	; 0x338 <APP_start_program+0x19c>
							{		/*blink led0 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     32e:	81 e7       	ldi	r24, 0x71	; 113
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     336:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(FIRST_STATE==u8_g_pressCnt))
     338:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     33c:	84 30       	cpi	r24, 0x04	; 4
     33e:	21 f4       	brne	.+8      	; 0x348 <APP_start_program+0x1ac>
     340:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     344:	81 30       	cpi	r24, 0x01	; 1
     346:	09 f3       	breq	.-62     	; 0x30a <APP_start_program+0x16e>
							else
							{
								/*DO NOTHING*/
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
     348:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <u8_g_blinkMode_update>
						break;
     34c:	57 c7       	rjmp	.+3758   	; 0x11fc <__stack+0x99d>
				}
				break;	

			case SECOND_STATE:
			
				switch(u8_g_blinkMode_update)
     34e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     352:	82 30       	cpi	r24, 0x02	; 2
     354:	09 f4       	brne	.+2      	; 0x358 <APP_start_program+0x1bc>
     356:	84 c0       	rjmp	.+264    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
     358:	30 f4       	brcc	.+12     	; 0x366 <APP_start_program+0x1ca>
     35a:	88 23       	and	r24, r24
     35c:	61 f1       	breq	.+88     	; 0x3b6 <APP_start_program+0x21a>
     35e:	81 30       	cpi	r24, 0x01	; 1
     360:	09 f4       	brne	.+2      	; 0x364 <APP_start_program+0x1c8>
     362:	53 c0       	rjmp	.+166    	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     364:	40 c7       	rjmp	.+3712   	; 0x11e6 <__stack+0x987>
     366:	83 30       	cpi	r24, 0x03	; 3
     368:	09 f4       	brne	.+2      	; 0x36c <APP_start_program+0x1d0>
     36a:	a5 c0       	rjmp	.+330    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     36c:	84 30       	cpi	r24, 0x04	; 4
     36e:	09 f4       	brne	.+2      	; 0x372 <APP_start_program+0x1d6>
     370:	cd c0       	rjmp	.+410    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
     372:	39 c7       	rjmp	.+3698   	; 0x11e6 <__stack+0x987>
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(SECOND_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_ONE_ON)
     374:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     378:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     37c:	89 2b       	or	r24, r25
     37e:	59 f4       	brne	.+22     	; 0x396 <APP_start_program+0x1fa>
							{
									/*blink led0 with the current mode*/
								    l_ret |= LED_turn_on(&s_led0);
     380:	81 e7       	ldi	r24, 0x71	; 113
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     388:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_on(&s_led1);
     38a:	8e e6       	ldi	r24, 0x6E	; 110
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     392:	c8 2b       	or	r28, r24
     394:	10 c0       	rjmp	.+32     	; 0x3b6 <APP_start_program+0x21a>

									
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_ONE_ON)
     396:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     39a:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     39e:	89 2b       	or	r24, r25
     3a0:	51 f0       	breq	.+20     	; 0x3b6 <APP_start_program+0x21a>
							{		/*blink led0 with the current mode*/
									l_ret |= LED_turn_off(&s_led0);
     3a2:	81 e7       	ldi	r24, 0x71	; 113
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     3aa:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led1);
     3ac:	8e e6       	ldi	r24, 0x6E	; 110
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     3b4:	c8 2b       	or	r28, r24
			case SECOND_STATE:
			
				switch(u8_g_blinkMode_update)
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(SECOND_STATE==u8_g_pressCnt))
     3b6:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     3ba:	81 11       	cpse	r24, r1
     3bc:	1f c7       	rjmp	.+3646   	; 0x11fc <__stack+0x99d>
     3be:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     3c2:	82 30       	cpi	r24, 0x02	; 2
     3c4:	b9 f2       	breq	.-82     	; 0x374 <APP_start_program+0x1d8>
     3c6:	1a c7       	rjmp	.+3636   	; 0x11fc <__stack+0x99d>
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(SECOND_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_TWO_ON)
     3c8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     3cc:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     3d0:	02 97       	sbiw	r24, 0x02	; 2
     3d2:	58 f4       	brcc	.+22     	; 0x3ea <APP_start_program+0x24e>
							{
								/*blink led0 with the current mode*/
								 l_ret |= LED_turn_on(&s_led0);
     3d4:	81 e7       	ldi	r24, 0x71	; 113
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     3dc:	c8 2b       	or	r28, r24
								 l_ret |= LED_turn_on(&s_led1);
     3de:	8e e6       	ldi	r24, 0x6E	; 110
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     3e6:	c8 2b       	or	r28, r24
     3e8:	10 c0       	rjmp	.+32     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_TWO_ON)
     3ea:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     3ee:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     3f2:	02 97       	sbiw	r24, 0x02	; 2
     3f4:	50 f0       	brcs	.+20     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
							{	
								/*blink led0 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     3f6:	81 e7       	ldi	r24, 0x71	; 113
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     3fe:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     400:	8e e6       	ldi	r24, 0x6E	; 110
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     408:	c8 2b       	or	r28, r24
							}
						}
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(SECOND_STATE==u8_g_pressCnt))
     40a:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     40e:	81 30       	cpi	r24, 0x01	; 1
     410:	09 f0       	breq	.+2      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     412:	f4 c6       	rjmp	.+3560   	; 0x11fc <__stack+0x99d>
     414:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     418:	82 30       	cpi	r24, 0x02	; 2
     41a:	b1 f2       	breq	.-84     	; 0x3c8 <APP_start_program+0x22c>
     41c:	ef c6       	rjmp	.+3550   	; 0x11fc <__stack+0x99d>
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(SECOND_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_THREE_ON)
     41e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     422:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     426:	03 97       	sbiw	r24, 0x03	; 3
     428:	58 f4       	brcc	.+22     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
							{
								/*blink led0 with the current mode*/
								 l_ret |= LED_turn_on(&s_led0);
     42a:	81 e7       	ldi	r24, 0x71	; 113
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     432:	c8 2b       	or	r28, r24
								 l_ret |= LED_turn_on(&s_led1);
     434:	8e e6       	ldi	r24, 0x6E	; 110
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     43c:	c8 2b       	or	r28, r24
     43e:	10 c0       	rjmp	.+32     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_THREE_ON)
     440:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     444:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     448:	03 97       	sbiw	r24, 0x03	; 3
     44a:	50 f0       	brcs	.+20     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
							{	
								/*blink led0 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     44c:	81 e7       	ldi	r24, 0x71	; 113
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     454:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     456:	8e e6       	ldi	r24, 0x6E	; 110
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     45e:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(SECOND_STATE==u8_g_pressCnt))
     460:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     464:	82 30       	cpi	r24, 0x02	; 2
     466:	09 f0       	breq	.+2      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
     468:	c9 c6       	rjmp	.+3474   	; 0x11fc <__stack+0x99d>
     46a:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	b1 f2       	breq	.-84     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     472:	c4 c6       	rjmp	.+3464   	; 0x11fc <__stack+0x99d>
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(SECOND_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FOUR_ON)
     474:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     478:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     47c:	05 97       	sbiw	r24, 0x05	; 5
     47e:	58 f4       	brcc	.+22     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
							{
								/*blink led0 with the current mode*/
								 l_ret |= LED_turn_on(&s_led0);
     480:	81 e7       	ldi	r24, 0x71	; 113
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     488:	c8 2b       	or	r28, r24
								 l_ret |= LED_turn_on(&s_led1);
     48a:	8e e6       	ldi	r24, 0x6E	; 110
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     492:	c8 2b       	or	r28, r24
     494:	10 c0       	rjmp	.+32     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FOUR_ON)
     496:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     49a:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     49e:	05 97       	sbiw	r24, 0x05	; 5
     4a0:	50 f0       	brcs	.+20     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
							{	
								/*blink led0 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     4a2:	81 e7       	ldi	r24, 0x71	; 113
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     4aa:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     4ac:	8e e6       	ldi	r24, 0x6E	; 110
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     4b4:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(SECOND_STATE==u8_g_pressCnt))
     4b6:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     4ba:	83 30       	cpi	r24, 0x03	; 3
     4bc:	09 f0       	breq	.+2      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
     4be:	9e c6       	rjmp	.+3388   	; 0x11fc <__stack+0x99d>
     4c0:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     4c4:	82 30       	cpi	r24, 0x02	; 2
     4c6:	b1 f2       	breq	.-84     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
     4c8:	99 c6       	rjmp	.+3378   	; 0x11fc <__stack+0x99d>
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(SECOND_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FIVE_ON)
     4ca:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     4ce:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     4d2:	08 97       	sbiw	r24, 0x08	; 8
     4d4:	58 f4       	brcc	.+22     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
							{
								/*blink led0 with the current mode*/
								 l_ret |= LED_turn_on(&s_led0);
     4d6:	81 e7       	ldi	r24, 0x71	; 113
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     4de:	c8 2b       	or	r28, r24
								 l_ret |= LED_turn_on(&s_led1);
     4e0:	8e e6       	ldi	r24, 0x6E	; 110
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     4e8:	c8 2b       	or	r28, r24
     4ea:	10 c0       	rjmp	.+32     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FIVE_ON)
     4ec:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     4f0:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     4f4:	08 97       	sbiw	r24, 0x08	; 8
     4f6:	50 f0       	brcs	.+20     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
							{	
								/*blink led0 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     4f8:	81 e7       	ldi	r24, 0x71	; 113
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     500:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     502:	8e e6       	ldi	r24, 0x6E	; 110
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     50a:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(SECOND_STATE==u8_g_pressCnt))
     50c:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     510:	84 30       	cpi	r24, 0x04	; 4
     512:	21 f4       	brne	.+8      	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
     514:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     518:	82 30       	cpi	r24, 0x02	; 2
     51a:	b9 f2       	breq	.-82     	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
							else
							{
								/*DO NOTHING*/
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
     51c:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <u8_g_blinkMode_update>
						break;
     520:	6d c6       	rjmp	.+3290   	; 0x11fc <__stack+0x99d>
						break;
				}
				break;
				
			case THIRD_STATE:
				switch(u8_g_blinkMode_update)
     522:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     526:	82 30       	cpi	r24, 0x02	; 2
     528:	09 f4       	brne	.+2      	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
     52a:	a2 c0       	rjmp	.+324    	; 0x670 <__EEPROM_REGION_LENGTH__+0x270>
     52c:	30 f4       	brcc	.+12     	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
     52e:	88 23       	and	r24, r24
     530:	b1 f1       	breq	.+108    	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
     532:	81 30       	cpi	r24, 0x01	; 1
     534:	09 f4       	brne	.+2      	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
     536:	67 c0       	rjmp	.+206    	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
     538:	58 c6       	rjmp	.+3248   	; 0x11ea <__stack+0x98b>
     53a:	83 30       	cpi	r24, 0x03	; 3
     53c:	09 f4       	brne	.+2      	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
     53e:	cd c0       	rjmp	.+410    	; 0x6da <__EEPROM_REGION_LENGTH__+0x2da>
     540:	84 30       	cpi	r24, 0x04	; 4
     542:	09 f4       	brne	.+2      	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
     544:	ff c0       	rjmp	.+510    	; 0x744 <__EEPROM_REGION_LENGTH__+0x344>
     546:	51 c6       	rjmp	.+3234   	; 0x11ea <__stack+0x98b>
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(THIRD_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_ONE_ON)
     548:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     54c:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     550:	89 2b       	or	r24, r25
     552:	81 f4       	brne	.+32     	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
							{
									/*blink led0,led1,led2 with the current mode*/
								    l_ret |= LED_turn_on(&s_led0);
     554:	81 e7       	ldi	r24, 0x71	; 113
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     55c:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_on(&s_led1);
     55e:	8e e6       	ldi	r24, 0x6E	; 110
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     566:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_on(&s_led2);
     568:	8b e6       	ldi	r24, 0x6B	; 107
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     570:	c8 2b       	or	r28, r24
     572:	15 c0       	rjmp	.+42     	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_ONE_ON)
     574:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     578:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     57c:	89 2b       	or	r24, r25
     57e:	79 f0       	breq	.+30     	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
							{		
									/*blink led0,led1,led2 with the current mode*/
									l_ret |= LED_turn_off(&s_led0);
     580:	81 e7       	ldi	r24, 0x71	; 113
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     588:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led1);
     58a:	8e e6       	ldi	r24, 0x6E	; 110
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     592:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led2);
     594:	8b e6       	ldi	r24, 0x6B	; 107
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     59c:	c8 2b       	or	r28, r24
				
			case THIRD_STATE:
				switch(u8_g_blinkMode_update)
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(THIRD_STATE==u8_g_pressCnt))
     59e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     5a2:	81 11       	cpse	r24, r1
     5a4:	2b c6       	rjmp	.+3158   	; 0x11fc <__stack+0x99d>
     5a6:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     5aa:	83 30       	cpi	r24, 0x03	; 3
     5ac:	69 f2       	breq	.-102    	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
     5ae:	26 c6       	rjmp	.+3148   	; 0x11fc <__stack+0x99d>
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(THIRD_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_TWO_ON)
     5b0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     5b4:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     5b8:	02 97       	sbiw	r24, 0x02	; 2
     5ba:	80 f4       	brcc	.+32     	; 0x5dc <__EEPROM_REGION_LENGTH__+0x1dc>
							{
								/*blink led0,led1,led2 with the current mode*/
								l_ret |= LED_turn_on(&s_led0);
     5bc:	81 e7       	ldi	r24, 0x71	; 113
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     5c4:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led1);
     5c6:	8e e6       	ldi	r24, 0x6E	; 110
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     5ce:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     5d0:	8b e6       	ldi	r24, 0x6B	; 107
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     5d8:	c8 2b       	or	r28, r24
     5da:	15 c0       	rjmp	.+42     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_TWO_ON)
     5dc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     5e0:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     5e4:	02 97       	sbiw	r24, 0x02	; 2
     5e6:	78 f0       	brcs	.+30     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
							{								
								/*blink led0,led1,led2 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     5e8:	81 e7       	ldi	r24, 0x71	; 113
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     5f0:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     5f2:	8e e6       	ldi	r24, 0x6E	; 110
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     5fa:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     5fc:	8b e6       	ldi	r24, 0x6B	; 107
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     604:	c8 2b       	or	r28, r24
							}
						}
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(THIRD_STATE==u8_g_pressCnt))
     606:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     60a:	81 30       	cpi	r24, 0x01	; 1
     60c:	09 f0       	breq	.+2      	; 0x610 <__EEPROM_REGION_LENGTH__+0x210>
     60e:	f6 c5       	rjmp	.+3052   	; 0x11fc <__stack+0x99d>
     610:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     614:	83 30       	cpi	r24, 0x03	; 3
     616:	61 f2       	breq	.-104    	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
     618:	f1 c5       	rjmp	.+3042   	; 0x11fc <__stack+0x99d>
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(THIRD_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_THREE_ON)
     61a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     61e:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     622:	03 97       	sbiw	r24, 0x03	; 3
     624:	80 f4       	brcc	.+32     	; 0x646 <__EEPROM_REGION_LENGTH__+0x246>
							{
								/*blink led0,led1,led2 with the current mode*/
								l_ret |= LED_turn_on(&s_led0);
     626:	81 e7       	ldi	r24, 0x71	; 113
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     62e:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led1);
     630:	8e e6       	ldi	r24, 0x6E	; 110
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     638:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     63a:	8b e6       	ldi	r24, 0x6B	; 107
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     642:	c8 2b       	or	r28, r24
     644:	15 c0       	rjmp	.+42     	; 0x670 <__EEPROM_REGION_LENGTH__+0x270>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_THREE_ON)
     646:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     64a:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     64e:	03 97       	sbiw	r24, 0x03	; 3
     650:	78 f0       	brcs	.+30     	; 0x670 <__EEPROM_REGION_LENGTH__+0x270>
							{	
								/*blink led0,led1,led2 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     652:	81 e7       	ldi	r24, 0x71	; 113
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     65a:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     65c:	8e e6       	ldi	r24, 0x6E	; 110
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     664:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     666:	8b e6       	ldi	r24, 0x6B	; 107
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     66e:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(THIRD_STATE==u8_g_pressCnt))
     670:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	09 f0       	breq	.+2      	; 0x67a <__EEPROM_REGION_LENGTH__+0x27a>
     678:	c1 c5       	rjmp	.+2946   	; 0x11fc <__stack+0x99d>
     67a:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     67e:	83 30       	cpi	r24, 0x03	; 3
     680:	61 f2       	breq	.-104    	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
     682:	bc c5       	rjmp	.+2936   	; 0x11fc <__stack+0x99d>
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(THIRD_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FOUR_ON)
     684:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     688:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     68c:	05 97       	sbiw	r24, 0x05	; 5
     68e:	80 f4       	brcc	.+32     	; 0x6b0 <__EEPROM_REGION_LENGTH__+0x2b0>
							{
								/*blink led0,led1,led2 with the current mode*/
								l_ret |= LED_turn_on(&s_led0);
     690:	81 e7       	ldi	r24, 0x71	; 113
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     698:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led1);
     69a:	8e e6       	ldi	r24, 0x6E	; 110
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     6a2:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     6a4:	8b e6       	ldi	r24, 0x6B	; 107
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     6ac:	c8 2b       	or	r28, r24
     6ae:	15 c0       	rjmp	.+42     	; 0x6da <__EEPROM_REGION_LENGTH__+0x2da>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FOUR_ON)
     6b0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     6b4:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     6b8:	05 97       	sbiw	r24, 0x05	; 5
     6ba:	78 f0       	brcs	.+30     	; 0x6da <__EEPROM_REGION_LENGTH__+0x2da>
							{	
								/*blink led0,led1,led2 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     6bc:	81 e7       	ldi	r24, 0x71	; 113
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     6c4:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     6c6:	8e e6       	ldi	r24, 0x6E	; 110
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     6ce:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     6d0:	8b e6       	ldi	r24, 0x6B	; 107
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     6d8:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(THIRD_STATE==u8_g_pressCnt))
     6da:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     6de:	83 30       	cpi	r24, 0x03	; 3
     6e0:	09 f0       	breq	.+2      	; 0x6e4 <__EEPROM_REGION_LENGTH__+0x2e4>
     6e2:	8c c5       	rjmp	.+2840   	; 0x11fc <__stack+0x99d>
     6e4:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     6e8:	83 30       	cpi	r24, 0x03	; 3
     6ea:	61 f2       	breq	.-104    	; 0x684 <__EEPROM_REGION_LENGTH__+0x284>
     6ec:	87 c5       	rjmp	.+2830   	; 0x11fc <__stack+0x99d>
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(THIRD_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FIVE_ON)
     6ee:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     6f2:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     6f6:	08 97       	sbiw	r24, 0x08	; 8
     6f8:	80 f4       	brcc	.+32     	; 0x71a <__EEPROM_REGION_LENGTH__+0x31a>
							{
								/*blink led0,led1,led2 with the current mode*/
								l_ret |= LED_turn_on(&s_led0);
     6fa:	81 e7       	ldi	r24, 0x71	; 113
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     702:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led1);
     704:	8e e6       	ldi	r24, 0x6E	; 110
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     70c:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     70e:	8b e6       	ldi	r24, 0x6B	; 107
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     716:	c8 2b       	or	r28, r24
     718:	15 c0       	rjmp	.+42     	; 0x744 <__EEPROM_REGION_LENGTH__+0x344>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FIVE_ON)
     71a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     71e:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     722:	08 97       	sbiw	r24, 0x08	; 8
     724:	78 f0       	brcs	.+30     	; 0x744 <__EEPROM_REGION_LENGTH__+0x344>
							{	
								/*blink led0,led1,led2 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     726:	81 e7       	ldi	r24, 0x71	; 113
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     72e:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     730:	8e e6       	ldi	r24, 0x6E	; 110
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     738:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     73a:	8b e6       	ldi	r24, 0x6B	; 107
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     742:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(THIRD_STATE==u8_g_pressCnt))
     744:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     748:	84 30       	cpi	r24, 0x04	; 4
     74a:	21 f4       	brne	.+8      	; 0x754 <__EEPROM_REGION_LENGTH__+0x354>
     74c:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     750:	83 30       	cpi	r24, 0x03	; 3
     752:	69 f2       	breq	.-102    	; 0x6ee <__EEPROM_REGION_LENGTH__+0x2ee>
							else
							{
								/*DO NOTHING*/
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
     754:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <u8_g_blinkMode_update>
						break;
     758:	51 c5       	rjmp	.+2722   	; 0x11fc <__stack+0x99d>
						break;
				}
				break;
				
			case FOURTH_STATE:
				switch(u8_g_blinkMode_update)
     75a:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     75e:	82 30       	cpi	r24, 0x02	; 2
     760:	09 f4       	brne	.+2      	; 0x764 <__EEPROM_REGION_LENGTH__+0x364>
     762:	c1 c0       	rjmp	.+386    	; 0x8e6 <__stack+0x87>
     764:	38 f4       	brcc	.+14     	; 0x774 <__EEPROM_REGION_LENGTH__+0x374>
     766:	88 23       	and	r24, r24
     768:	09 f4       	brne	.+2      	; 0x76c <__EEPROM_REGION_LENGTH__+0x36c>
     76a:	40 c0       	rjmp	.+128    	; 0x7ec <__EEPROM_REGION_LENGTH__+0x3ec>
     76c:	81 30       	cpi	r24, 0x01	; 1
     76e:	09 f4       	brne	.+2      	; 0x772 <__EEPROM_REGION_LENGTH__+0x372>
     770:	7b c0       	rjmp	.+246    	; 0x868 <__stack+0x9>
     772:	3d c5       	rjmp	.+2682   	; 0x11ee <__stack+0x98f>
     774:	83 30       	cpi	r24, 0x03	; 3
     776:	09 f4       	brne	.+2      	; 0x77a <__EEPROM_REGION_LENGTH__+0x37a>
     778:	f5 c0       	rjmp	.+490    	; 0x964 <__stack+0x105>
     77a:	84 30       	cpi	r24, 0x04	; 4
     77c:	09 f4       	brne	.+2      	; 0x780 <__EEPROM_REGION_LENGTH__+0x380>
     77e:	31 c1       	rjmp	.+610    	; 0x9e2 <__stack+0x183>
     780:	36 c5       	rjmp	.+2668   	; 0x11ee <__stack+0x98f>
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(FOURTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_ONE_ON)
     782:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     786:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     78a:	89 2b       	or	r24, r25
     78c:	a9 f4       	brne	.+42     	; 0x7b8 <__EEPROM_REGION_LENGTH__+0x3b8>
							{
									/*blink led0,led1,led2,led4 with the current mode*/
									l_ret |= LED_turn_on(&s_led0);
     78e:	81 e7       	ldi	r24, 0x71	; 113
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     796:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_on(&s_led1);
     798:	8e e6       	ldi	r24, 0x6E	; 110
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     7a0:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_on(&s_led2);
     7a2:	8b e6       	ldi	r24, 0x6B	; 107
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     7aa:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_on(&s_led3);
     7ac:	88 e6       	ldi	r24, 0x68	; 104
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     7b4:	c8 2b       	or	r28, r24
     7b6:	1a c0       	rjmp	.+52     	; 0x7ec <__EEPROM_REGION_LENGTH__+0x3ec>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_ONE_ON)
     7b8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     7bc:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     7c0:	89 2b       	or	r24, r25
     7c2:	a1 f0       	breq	.+40     	; 0x7ec <__EEPROM_REGION_LENGTH__+0x3ec>
							{		
									/*blink led0,led1,led2,led4 with the current mode*/
									l_ret |= LED_turn_off(&s_led0);
     7c4:	81 e7       	ldi	r24, 0x71	; 113
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     7cc:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led1);
     7ce:	8e e6       	ldi	r24, 0x6E	; 110
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     7d6:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led2);
     7d8:	8b e6       	ldi	r24, 0x6B	; 107
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     7e0:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led3);
     7e2:	88 e6       	ldi	r24, 0x68	; 104
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     7ea:	c8 2b       	or	r28, r24
				
			case FOURTH_STATE:
				switch(u8_g_blinkMode_update)
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(FOURTH_STATE==u8_g_pressCnt))
     7ec:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     7f0:	81 11       	cpse	r24, r1
     7f2:	04 c5       	rjmp	.+2568   	; 0x11fc <__stack+0x99d>
     7f4:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     7f8:	84 30       	cpi	r24, 0x04	; 4
     7fa:	19 f2       	breq	.-122    	; 0x782 <__EEPROM_REGION_LENGTH__+0x382>
     7fc:	ff c4       	rjmp	.+2558   	; 0x11fc <__stack+0x99d>
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(FOURTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_TWO_ON)
     7fe:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     802:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     806:	02 97       	sbiw	r24, 0x02	; 2
     808:	a8 f4       	brcc	.+42     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
							{
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_on(&s_led0);
     80a:	81 e7       	ldi	r24, 0x71	; 113
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     812:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led1);
     814:	8e e6       	ldi	r24, 0x6E	; 110
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     81c:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     81e:	8b e6       	ldi	r24, 0x6B	; 107
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     826:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
     828:	88 e6       	ldi	r24, 0x68	; 104
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     830:	c8 2b       	or	r28, r24
     832:	1a c0       	rjmp	.+52     	; 0x868 <__stack+0x9>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_TWO_ON)
     834:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     838:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     83c:	02 97       	sbiw	r24, 0x02	; 2
     83e:	a0 f0       	brcs	.+40     	; 0x868 <__stack+0x9>
							{								
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     840:	81 e7       	ldi	r24, 0x71	; 113
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     848:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     84a:	8e e6       	ldi	r24, 0x6E	; 110
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     852:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     854:	8b e6       	ldi	r24, 0x6B	; 107
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     85c:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
     85e:	88 e6       	ldi	r24, 0x68	; 104
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     866:	c8 2b       	or	r28, r24
							}
						}
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(FOURTH_STATE==u8_g_pressCnt))
     868:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     86c:	81 30       	cpi	r24, 0x01	; 1
     86e:	09 f0       	breq	.+2      	; 0x872 <__stack+0x13>
     870:	c5 c4       	rjmp	.+2442   	; 0x11fc <__stack+0x99d>
     872:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     876:	84 30       	cpi	r24, 0x04	; 4
     878:	11 f2       	breq	.-124    	; 0x7fe <__EEPROM_REGION_LENGTH__+0x3fe>
     87a:	c0 c4       	rjmp	.+2432   	; 0x11fc <__stack+0x99d>
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(FOURTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_THREE_ON)
     87c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     880:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     884:	03 97       	sbiw	r24, 0x03	; 3
     886:	a8 f4       	brcc	.+42     	; 0x8b2 <__stack+0x53>
							{
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_on(&s_led0);
     888:	81 e7       	ldi	r24, 0x71	; 113
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     890:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led1);
     892:	8e e6       	ldi	r24, 0x6E	; 110
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     89a:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     89c:	8b e6       	ldi	r24, 0x6B	; 107
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     8a4:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
     8a6:	88 e6       	ldi	r24, 0x68	; 104
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     8ae:	c8 2b       	or	r28, r24
     8b0:	1a c0       	rjmp	.+52     	; 0x8e6 <__stack+0x87>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_THREE_ON)
     8b2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     8b6:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     8ba:	03 97       	sbiw	r24, 0x03	; 3
     8bc:	a0 f0       	brcs	.+40     	; 0x8e6 <__stack+0x87>
							{	
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     8be:	81 e7       	ldi	r24, 0x71	; 113
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     8c6:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     8c8:	8e e6       	ldi	r24, 0x6E	; 110
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     8d0:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     8d2:	8b e6       	ldi	r24, 0x6B	; 107
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     8da:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
     8dc:	88 e6       	ldi	r24, 0x68	; 104
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     8e4:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(FOURTH_STATE==u8_g_pressCnt))
     8e6:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     8ea:	82 30       	cpi	r24, 0x02	; 2
     8ec:	09 f0       	breq	.+2      	; 0x8f0 <__stack+0x91>
     8ee:	86 c4       	rjmp	.+2316   	; 0x11fc <__stack+0x99d>
     8f0:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     8f4:	84 30       	cpi	r24, 0x04	; 4
     8f6:	11 f2       	breq	.-124    	; 0x87c <__stack+0x1d>
     8f8:	81 c4       	rjmp	.+2306   	; 0x11fc <__stack+0x99d>
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(FOURTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FOUR_ON)
     8fa:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     8fe:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     902:	05 97       	sbiw	r24, 0x05	; 5
     904:	a8 f4       	brcc	.+42     	; 0x930 <__stack+0xd1>
							{
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_on(&s_led0);
     906:	81 e7       	ldi	r24, 0x71	; 113
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     90e:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led1);
     910:	8e e6       	ldi	r24, 0x6E	; 110
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     918:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     91a:	8b e6       	ldi	r24, 0x6B	; 107
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     922:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);		
     924:	88 e6       	ldi	r24, 0x68	; 104
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     92c:	c8 2b       	or	r28, r24
     92e:	1a c0       	rjmp	.+52     	; 0x964 <__stack+0x105>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FOUR_ON)
     930:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     934:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     938:	05 97       	sbiw	r24, 0x05	; 5
     93a:	a0 f0       	brcs	.+40     	; 0x964 <__stack+0x105>
							{	
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     93c:	81 e7       	ldi	r24, 0x71	; 113
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     944:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     946:	8e e6       	ldi	r24, 0x6E	; 110
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     94e:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     950:	8b e6       	ldi	r24, 0x6B	; 107
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     958:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
     95a:	88 e6       	ldi	r24, 0x68	; 104
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     962:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(FOURTH_STATE==u8_g_pressCnt))
     964:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     968:	83 30       	cpi	r24, 0x03	; 3
     96a:	09 f0       	breq	.+2      	; 0x96e <__stack+0x10f>
     96c:	47 c4       	rjmp	.+2190   	; 0x11fc <__stack+0x99d>
     96e:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     972:	84 30       	cpi	r24, 0x04	; 4
     974:	11 f2       	breq	.-124    	; 0x8fa <__stack+0x9b>
     976:	42 c4       	rjmp	.+2180   	; 0x11fc <__stack+0x99d>
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(FOURTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FIVE_ON)
     978:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     97c:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     980:	08 97       	sbiw	r24, 0x08	; 8
     982:	a8 f4       	brcc	.+42     	; 0x9ae <__stack+0x14f>
							{
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_on(&s_led0);
     984:	81 e7       	ldi	r24, 0x71	; 113
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     98c:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led1);
     98e:	8e e6       	ldi	r24, 0x6E	; 110
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     996:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     998:	8b e6       	ldi	r24, 0x6B	; 107
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     9a0:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
     9a2:	88 e6       	ldi	r24, 0x68	; 104
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     9aa:	c8 2b       	or	r28, r24
     9ac:	1a c0       	rjmp	.+52     	; 0x9e2 <__stack+0x183>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FIVE_ON)
     9ae:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     9b2:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     9b6:	08 97       	sbiw	r24, 0x08	; 8
     9b8:	a0 f0       	brcs	.+40     	; 0x9e2 <__stack+0x183>
							{	
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     9ba:	81 e7       	ldi	r24, 0x71	; 113
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     9c2:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     9c4:	8e e6       	ldi	r24, 0x6E	; 110
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     9cc:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     9ce:	8b e6       	ldi	r24, 0x6B	; 107
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     9d6:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
     9d8:	88 e6       	ldi	r24, 0x68	; 104
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     9e0:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(FOURTH_STATE==u8_g_pressCnt))
     9e2:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     9e6:	84 30       	cpi	r24, 0x04	; 4
     9e8:	21 f4       	brne	.+8      	; 0x9f2 <__stack+0x193>
     9ea:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     9ee:	84 30       	cpi	r24, 0x04	; 4
     9f0:	19 f2       	breq	.-122    	; 0x978 <__stack+0x119>
							else
							{
								/*DO NOTHING*/
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
     9f2:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <u8_g_blinkMode_update>
						break;
     9f6:	02 c4       	rjmp	.+2052   	; 0x11fc <__stack+0x99d>
						break;
				}
				break;
				
			case FIFTH_STATE:
				switch(u8_g_blinkMode_update)
     9f8:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     9fc:	82 30       	cpi	r24, 0x02	; 2
     9fe:	09 f4       	brne	.+2      	; 0xa02 <__stack+0x1a3>
     a00:	c1 c0       	rjmp	.+386    	; 0xb84 <__stack+0x325>
     a02:	38 f4       	brcc	.+14     	; 0xa12 <__stack+0x1b3>
     a04:	88 23       	and	r24, r24
     a06:	09 f4       	brne	.+2      	; 0xa0a <__stack+0x1ab>
     a08:	40 c0       	rjmp	.+128    	; 0xa8a <__stack+0x22b>
     a0a:	81 30       	cpi	r24, 0x01	; 1
     a0c:	09 f4       	brne	.+2      	; 0xa10 <__stack+0x1b1>
     a0e:	7b c0       	rjmp	.+246    	; 0xb06 <__stack+0x2a7>
     a10:	f0 c3       	rjmp	.+2016   	; 0x11f2 <__stack+0x993>
     a12:	83 30       	cpi	r24, 0x03	; 3
     a14:	09 f4       	brne	.+2      	; 0xa18 <__stack+0x1b9>
     a16:	f5 c0       	rjmp	.+490    	; 0xc02 <__stack+0x3a3>
     a18:	84 30       	cpi	r24, 0x04	; 4
     a1a:	09 f4       	brne	.+2      	; 0xa1e <__stack+0x1bf>
     a1c:	31 c1       	rjmp	.+610    	; 0xc80 <__stack+0x421>
     a1e:	e9 c3       	rjmp	.+2002   	; 0x11f2 <__stack+0x993>
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(FIFTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_ONE_ON)
     a20:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     a24:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     a28:	89 2b       	or	r24, r25
     a2a:	a9 f4       	brne	.+42     	; 0xa56 <__stack+0x1f7>
							{
									/*blink led1,led2,led4 with the current mode*/
									l_ret |= LED_turn_off(&s_led0);
     a2c:	81 e7       	ldi	r24, 0x71	; 113
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     a34:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_on(&s_led1);
     a36:	8e e6       	ldi	r24, 0x6E	; 110
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     a3e:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_on(&s_led2);
     a40:	8b e6       	ldi	r24, 0x6B	; 107
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     a48:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_on(&s_led3);
     a4a:	88 e6       	ldi	r24, 0x68	; 104
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     a52:	c8 2b       	or	r28, r24
     a54:	1a c0       	rjmp	.+52     	; 0xa8a <__stack+0x22b>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_ONE_ON)
     a56:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     a5a:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     a5e:	89 2b       	or	r24, r25
     a60:	a1 f0       	breq	.+40     	; 0xa8a <__stack+0x22b>
							{		
									/*blink led1,led2,led4 with the current mode*/
									l_ret |= LED_turn_off(&s_led0);
     a62:	81 e7       	ldi	r24, 0x71	; 113
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     a6a:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led1);
     a6c:	8e e6       	ldi	r24, 0x6E	; 110
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     a74:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led2);
     a76:	8b e6       	ldi	r24, 0x6B	; 107
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     a7e:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led3);
     a80:	88 e6       	ldi	r24, 0x68	; 104
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     a88:	c8 2b       	or	r28, r24
				
			case FIFTH_STATE:
				switch(u8_g_blinkMode_update)
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(FIFTH_STATE==u8_g_pressCnt))
     a8a:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     a8e:	81 11       	cpse	r24, r1
     a90:	b5 c3       	rjmp	.+1898   	; 0x11fc <__stack+0x99d>
     a92:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     a96:	85 30       	cpi	r24, 0x05	; 5
     a98:	19 f2       	breq	.-122    	; 0xa20 <__stack+0x1c1>
     a9a:	b0 c3       	rjmp	.+1888   	; 0x11fc <__stack+0x99d>
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(FIFTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_TWO_ON)
     a9c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     aa0:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     aa4:	02 97       	sbiw	r24, 0x02	; 2
     aa6:	a8 f4       	brcc	.+42     	; 0xad2 <__stack+0x273>
							{
								/*blink led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     aa8:	81 e7       	ldi	r24, 0x71	; 113
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     ab0:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led1);
     ab2:	8e e6       	ldi	r24, 0x6E	; 110
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     aba:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     abc:	8b e6       	ldi	r24, 0x6B	; 107
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     ac4:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
     ac6:	88 e6       	ldi	r24, 0x68	; 104
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     ace:	c8 2b       	or	r28, r24
     ad0:	1a c0       	rjmp	.+52     	; 0xb06 <__stack+0x2a7>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_TWO_ON)
     ad2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     ad6:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     ada:	02 97       	sbiw	r24, 0x02	; 2
     adc:	a0 f0       	brcs	.+40     	; 0xb06 <__stack+0x2a7>
							{								
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     ade:	81 e7       	ldi	r24, 0x71	; 113
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     ae6:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     ae8:	8e e6       	ldi	r24, 0x6E	; 110
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     af0:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     af2:	8b e6       	ldi	r24, 0x6B	; 107
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     afa:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
     afc:	88 e6       	ldi	r24, 0x68	; 104
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     b04:	c8 2b       	or	r28, r24
							}
						}
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(FIFTH_STATE==u8_g_pressCnt))
     b06:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     b0a:	81 30       	cpi	r24, 0x01	; 1
     b0c:	09 f0       	breq	.+2      	; 0xb10 <__stack+0x2b1>
     b0e:	76 c3       	rjmp	.+1772   	; 0x11fc <__stack+0x99d>
     b10:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     b14:	85 30       	cpi	r24, 0x05	; 5
     b16:	11 f2       	breq	.-124    	; 0xa9c <__stack+0x23d>
     b18:	71 c3       	rjmp	.+1762   	; 0x11fc <__stack+0x99d>
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(FIFTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_THREE_ON)
     b1a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     b1e:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     b22:	03 97       	sbiw	r24, 0x03	; 3
     b24:	a8 f4       	brcc	.+42     	; 0xb50 <__stack+0x2f1>
							{
								/*blink led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     b26:	81 e7       	ldi	r24, 0x71	; 113
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     b2e:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led1);
     b30:	8e e6       	ldi	r24, 0x6E	; 110
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     b38:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     b3a:	8b e6       	ldi	r24, 0x6B	; 107
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     b42:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
     b44:	88 e6       	ldi	r24, 0x68	; 104
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     b4c:	c8 2b       	or	r28, r24
     b4e:	1a c0       	rjmp	.+52     	; 0xb84 <__stack+0x325>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_THREE_ON)
     b50:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     b54:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     b58:	03 97       	sbiw	r24, 0x03	; 3
     b5a:	a0 f0       	brcs	.+40     	; 0xb84 <__stack+0x325>
							{	
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     b5c:	81 e7       	ldi	r24, 0x71	; 113
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     b64:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     b66:	8e e6       	ldi	r24, 0x6E	; 110
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     b6e:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     b70:	8b e6       	ldi	r24, 0x6B	; 107
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     b78:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
     b7a:	88 e6       	ldi	r24, 0x68	; 104
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     b82:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(FIFTH_STATE==u8_g_pressCnt))
     b84:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     b88:	82 30       	cpi	r24, 0x02	; 2
     b8a:	09 f0       	breq	.+2      	; 0xb8e <__stack+0x32f>
     b8c:	37 c3       	rjmp	.+1646   	; 0x11fc <__stack+0x99d>
     b8e:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     b92:	85 30       	cpi	r24, 0x05	; 5
     b94:	11 f2       	breq	.-124    	; 0xb1a <__stack+0x2bb>
     b96:	32 c3       	rjmp	.+1636   	; 0x11fc <__stack+0x99d>
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(FIFTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FOUR_ON)
     b98:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     b9c:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     ba0:	05 97       	sbiw	r24, 0x05	; 5
     ba2:	a8 f4       	brcc	.+42     	; 0xbce <__stack+0x36f>
							{
								/*blink led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     ba4:	81 e7       	ldi	r24, 0x71	; 113
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     bac:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led1);
     bae:	8e e6       	ldi	r24, 0x6E	; 110
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     bb6:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     bb8:	8b e6       	ldi	r24, 0x6B	; 107
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     bc0:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
     bc2:	88 e6       	ldi	r24, 0x68	; 104
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     bca:	c8 2b       	or	r28, r24
     bcc:	1a c0       	rjmp	.+52     	; 0xc02 <__stack+0x3a3>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FOUR_ON)
     bce:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     bd2:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     bd6:	05 97       	sbiw	r24, 0x05	; 5
     bd8:	a0 f0       	brcs	.+40     	; 0xc02 <__stack+0x3a3>
							{	
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     bda:	81 e7       	ldi	r24, 0x71	; 113
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     be2:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     be4:	8e e6       	ldi	r24, 0x6E	; 110
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     bec:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     bee:	8b e6       	ldi	r24, 0x6B	; 107
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     bf6:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
     bf8:	88 e6       	ldi	r24, 0x68	; 104
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     c00:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(FIFTH_STATE==u8_g_pressCnt))
     c02:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     c06:	83 30       	cpi	r24, 0x03	; 3
     c08:	09 f0       	breq	.+2      	; 0xc0c <__stack+0x3ad>
     c0a:	f8 c2       	rjmp	.+1520   	; 0x11fc <__stack+0x99d>
     c0c:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     c10:	85 30       	cpi	r24, 0x05	; 5
     c12:	11 f2       	breq	.-124    	; 0xb98 <__stack+0x339>
     c14:	f3 c2       	rjmp	.+1510   	; 0x11fc <__stack+0x99d>
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(FIFTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FIVE_ON)
     c16:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     c1a:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     c1e:	08 97       	sbiw	r24, 0x08	; 8
     c20:	a8 f4       	brcc	.+42     	; 0xc4c <__stack+0x3ed>
							{
								/*blink led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     c22:	81 e7       	ldi	r24, 0x71	; 113
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     c2a:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led1);
     c2c:	8e e6       	ldi	r24, 0x6E	; 110
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     c34:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     c36:	8b e6       	ldi	r24, 0x6B	; 107
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     c3e:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
     c40:	88 e6       	ldi	r24, 0x68	; 104
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     c48:	c8 2b       	or	r28, r24
     c4a:	1a c0       	rjmp	.+52     	; 0xc80 <__stack+0x421>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FIVE_ON)
     c4c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     c50:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     c54:	08 97       	sbiw	r24, 0x08	; 8
     c56:	a0 f0       	brcs	.+40     	; 0xc80 <__stack+0x421>
							{	
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     c58:	81 e7       	ldi	r24, 0x71	; 113
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     c60:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     c62:	8e e6       	ldi	r24, 0x6E	; 110
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     c6a:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     c6c:	8b e6       	ldi	r24, 0x6B	; 107
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     c74:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
     c76:	88 e6       	ldi	r24, 0x68	; 104
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     c7e:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(FIFTH_STATE==u8_g_pressCnt))
     c80:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     c84:	84 30       	cpi	r24, 0x04	; 4
     c86:	21 f4       	brne	.+8      	; 0xc90 <__stack+0x431>
     c88:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     c8c:	85 30       	cpi	r24, 0x05	; 5
     c8e:	19 f2       	breq	.-122    	; 0xc16 <__stack+0x3b7>
							else
							{
								/*DO NOTHING*/
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
     c90:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <u8_g_blinkMode_update>
						break;
     c94:	b3 c2       	rjmp	.+1382   	; 0x11fc <__stack+0x99d>
						break;
				}	
				break;
				
			case SIXTH_STATE:
				switch(u8_g_blinkMode_update)
     c96:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     c9a:	82 30       	cpi	r24, 0x02	; 2
     c9c:	09 f4       	brne	.+2      	; 0xca0 <__stack+0x441>
     c9e:	c1 c0       	rjmp	.+386    	; 0xe22 <__stack+0x5c3>
     ca0:	38 f4       	brcc	.+14     	; 0xcb0 <__stack+0x451>
     ca2:	88 23       	and	r24, r24
     ca4:	09 f4       	brne	.+2      	; 0xca8 <__stack+0x449>
     ca6:	40 c0       	rjmp	.+128    	; 0xd28 <__stack+0x4c9>
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	09 f4       	brne	.+2      	; 0xcae <__stack+0x44f>
     cac:	7b c0       	rjmp	.+246    	; 0xda4 <__stack+0x545>
     cae:	a3 c2       	rjmp	.+1350   	; 0x11f6 <__stack+0x997>
     cb0:	83 30       	cpi	r24, 0x03	; 3
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <__stack+0x457>
     cb4:	f5 c0       	rjmp	.+490    	; 0xea0 <__stack+0x641>
     cb6:	84 30       	cpi	r24, 0x04	; 4
     cb8:	09 f4       	brne	.+2      	; 0xcbc <__stack+0x45d>
     cba:	31 c1       	rjmp	.+610    	; 0xf1e <__stack+0x6bf>
     cbc:	9c c2       	rjmp	.+1336   	; 0x11f6 <__stack+0x997>
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(SIXTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_ONE_ON)
     cbe:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     cc2:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     cc6:	89 2b       	or	r24, r25
     cc8:	a9 f4       	brne	.+42     	; 0xcf4 <__stack+0x495>
							{
									/*blink led0,led1,led2,led3 with the current mode*/
									l_ret |= LED_turn_off(&s_led0);
     cca:	81 e7       	ldi	r24, 0x71	; 113
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     cd2:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led1);
     cd4:	8e e6       	ldi	r24, 0x6E	; 110
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     cdc:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_on(&s_led2);
     cde:	8b e6       	ldi	r24, 0x6B	; 107
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     ce6:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_on(&s_led3);
     ce8:	88 e6       	ldi	r24, 0x68	; 104
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     cf0:	c8 2b       	or	r28, r24
     cf2:	1a c0       	rjmp	.+52     	; 0xd28 <__stack+0x4c9>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_ONE_ON)
     cf4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     cf8:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     cfc:	89 2b       	or	r24, r25
     cfe:	a1 f0       	breq	.+40     	; 0xd28 <__stack+0x4c9>
							{		
									/*blink led1,led2,led4 with the current mode*/
									l_ret |= LED_turn_off(&s_led0);
     d00:	81 e7       	ldi	r24, 0x71	; 113
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     d08:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led1);
     d0a:	8e e6       	ldi	r24, 0x6E	; 110
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     d12:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led2);
     d14:	8b e6       	ldi	r24, 0x6B	; 107
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     d1c:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led3);
     d1e:	88 e6       	ldi	r24, 0x68	; 104
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     d26:	c8 2b       	or	r28, r24
				
			case SIXTH_STATE:
				switch(u8_g_blinkMode_update)
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(SIXTH_STATE==u8_g_pressCnt))
     d28:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     d2c:	81 11       	cpse	r24, r1
     d2e:	66 c2       	rjmp	.+1228   	; 0x11fc <__stack+0x99d>
     d30:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     d34:	86 30       	cpi	r24, 0x06	; 6
     d36:	19 f2       	breq	.-122    	; 0xcbe <__stack+0x45f>
     d38:	61 c2       	rjmp	.+1218   	; 0x11fc <__stack+0x99d>
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(SIXTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_TWO_ON)
     d3a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     d3e:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     d42:	02 97       	sbiw	r24, 0x02	; 2
     d44:	a8 f4       	brcc	.+42     	; 0xd70 <__stack+0x511>
							{
								/*blink led0,led1,led2,led3 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     d46:	81 e7       	ldi	r24, 0x71	; 113
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     d4e:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     d50:	8e e6       	ldi	r24, 0x6E	; 110
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     d58:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     d5a:	8b e6       	ldi	r24, 0x6B	; 107
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     d62:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
     d64:	88 e6       	ldi	r24, 0x68	; 104
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     d6c:	c8 2b       	or	r28, r24
     d6e:	1a c0       	rjmp	.+52     	; 0xda4 <__stack+0x545>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_TWO_ON)
     d70:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     d74:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     d78:	02 97       	sbiw	r24, 0x02	; 2
     d7a:	a0 f0       	brcs	.+40     	; 0xda4 <__stack+0x545>
							{								
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     d7c:	81 e7       	ldi	r24, 0x71	; 113
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     d84:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     d86:	8e e6       	ldi	r24, 0x6E	; 110
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     d8e:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     d90:	8b e6       	ldi	r24, 0x6B	; 107
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     d98:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
     d9a:	88 e6       	ldi	r24, 0x68	; 104
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     da2:	c8 2b       	or	r28, r24
							}
						}
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(SIXTH_STATE==u8_g_pressCnt))
     da4:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	09 f0       	breq	.+2      	; 0xdae <__stack+0x54f>
     dac:	27 c2       	rjmp	.+1102   	; 0x11fc <__stack+0x99d>
     dae:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     db2:	86 30       	cpi	r24, 0x06	; 6
     db4:	11 f2       	breq	.-124    	; 0xd3a <__stack+0x4db>
     db6:	22 c2       	rjmp	.+1092   	; 0x11fc <__stack+0x99d>
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(SIXTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_THREE_ON)
     db8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     dbc:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     dc0:	03 97       	sbiw	r24, 0x03	; 3
     dc2:	a8 f4       	brcc	.+42     	; 0xdee <__stack+0x58f>
							{
								/*blink led0,led1,led2,led3 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     dc4:	81 e7       	ldi	r24, 0x71	; 113
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     dcc:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     dce:	8e e6       	ldi	r24, 0x6E	; 110
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     dd6:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     dd8:	8b e6       	ldi	r24, 0x6B	; 107
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     de0:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
     de2:	88 e6       	ldi	r24, 0x68	; 104
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     dea:	c8 2b       	or	r28, r24
     dec:	1a c0       	rjmp	.+52     	; 0xe22 <__stack+0x5c3>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_THREE_ON)
     dee:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     df2:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     df6:	03 97       	sbiw	r24, 0x03	; 3
     df8:	a0 f0       	brcs	.+40     	; 0xe22 <__stack+0x5c3>
							{	
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     dfa:	81 e7       	ldi	r24, 0x71	; 113
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     e02:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     e04:	8e e6       	ldi	r24, 0x6E	; 110
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     e0c:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     e0e:	8b e6       	ldi	r24, 0x6B	; 107
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     e16:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
     e18:	88 e6       	ldi	r24, 0x68	; 104
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     e20:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(SIXTH_STATE==u8_g_pressCnt))
     e22:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     e26:	82 30       	cpi	r24, 0x02	; 2
     e28:	09 f0       	breq	.+2      	; 0xe2c <__stack+0x5cd>
     e2a:	e8 c1       	rjmp	.+976    	; 0x11fc <__stack+0x99d>
     e2c:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     e30:	86 30       	cpi	r24, 0x06	; 6
     e32:	11 f2       	breq	.-124    	; 0xdb8 <__stack+0x559>
     e34:	e3 c1       	rjmp	.+966    	; 0x11fc <__stack+0x99d>
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(SIXTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FOUR_ON)
     e36:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     e3a:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     e3e:	05 97       	sbiw	r24, 0x05	; 5
     e40:	a8 f4       	brcc	.+42     	; 0xe6c <__stack+0x60d>
							{
								/*blink led0,led1,led2,led3 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     e42:	81 e7       	ldi	r24, 0x71	; 113
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     e4a:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     e4c:	8e e6       	ldi	r24, 0x6E	; 110
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     e54:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     e56:	8b e6       	ldi	r24, 0x6B	; 107
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     e5e:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
     e60:	88 e6       	ldi	r24, 0x68	; 104
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     e68:	c8 2b       	or	r28, r24
     e6a:	1a c0       	rjmp	.+52     	; 0xea0 <__stack+0x641>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FOUR_ON)
     e6c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     e70:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     e74:	05 97       	sbiw	r24, 0x05	; 5
     e76:	a0 f0       	brcs	.+40     	; 0xea0 <__stack+0x641>
							{	
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     e78:	81 e7       	ldi	r24, 0x71	; 113
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     e80:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     e82:	8e e6       	ldi	r24, 0x6E	; 110
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     e8a:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     e8c:	8b e6       	ldi	r24, 0x6B	; 107
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     e94:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
     e96:	88 e6       	ldi	r24, 0x68	; 104
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     e9e:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(SIXTH_STATE==u8_g_pressCnt))
     ea0:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     ea4:	83 30       	cpi	r24, 0x03	; 3
     ea6:	09 f0       	breq	.+2      	; 0xeaa <__stack+0x64b>
     ea8:	a9 c1       	rjmp	.+850    	; 0x11fc <__stack+0x99d>
     eaa:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     eae:	86 30       	cpi	r24, 0x06	; 6
     eb0:	11 f2       	breq	.-124    	; 0xe36 <__stack+0x5d7>
     eb2:	a4 c1       	rjmp	.+840    	; 0x11fc <__stack+0x99d>
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(SIXTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FIVE_ON)
     eb4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     eb8:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     ebc:	08 97       	sbiw	r24, 0x08	; 8
     ebe:	a8 f4       	brcc	.+42     	; 0xeea <__stack+0x68b>
							{
								/*blink led0,led1,led2,led3 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     ec0:	81 e7       	ldi	r24, 0x71	; 113
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     ec8:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     eca:	8e e6       	ldi	r24, 0x6E	; 110
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     ed2:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led2);
     ed4:	8b e6       	ldi	r24, 0x6B	; 107
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     edc:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
     ede:	88 e6       	ldi	r24, 0x68	; 104
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     ee6:	c8 2b       	or	r28, r24
     ee8:	1a c0       	rjmp	.+52     	; 0xf1e <__stack+0x6bf>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FIVE_ON)
     eea:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     eee:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     ef2:	08 97       	sbiw	r24, 0x08	; 8
     ef4:	a0 f0       	brcs	.+40     	; 0xf1e <__stack+0x6bf>
							{	
								/*blink led0,led1,led2,led3 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     ef6:	81 e7       	ldi	r24, 0x71	; 113
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     efe:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     f00:	8e e6       	ldi	r24, 0x6E	; 110
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     f08:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     f0a:	8b e6       	ldi	r24, 0x6B	; 107
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     f12:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
     f14:	88 e6       	ldi	r24, 0x68	; 104
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     f1c:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(SIXTH_STATE==u8_g_pressCnt))
     f1e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     f22:	84 30       	cpi	r24, 0x04	; 4
     f24:	21 f4       	brne	.+8      	; 0xf2e <__stack+0x6cf>
     f26:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     f2a:	86 30       	cpi	r24, 0x06	; 6
     f2c:	19 f2       	breq	.-122    	; 0xeb4 <__stack+0x655>
							else
							{
								/*DO NOTHING*/
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
     f2e:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <u8_g_blinkMode_update>
						break;
     f32:	64 c1       	rjmp	.+712    	; 0x11fc <__stack+0x99d>
						l_ret = E_NOT_OK;
						break;
				}	
				break;
			case SEVENTH_STATE:
				switch(u8_g_blinkMode_update)
     f34:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     f38:	82 30       	cpi	r24, 0x02	; 2
     f3a:	09 f4       	brne	.+2      	; 0xf3e <__stack+0x6df>
     f3c:	c1 c0       	rjmp	.+386    	; 0x10c0 <__stack+0x861>
     f3e:	38 f4       	brcc	.+14     	; 0xf4e <__stack+0x6ef>
     f40:	88 23       	and	r24, r24
     f42:	09 f4       	brne	.+2      	; 0xf46 <__stack+0x6e7>
     f44:	40 c0       	rjmp	.+128    	; 0xfc6 <__stack+0x767>
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	09 f4       	brne	.+2      	; 0xf4c <__stack+0x6ed>
     f4a:	7b c0       	rjmp	.+246    	; 0x1042 <__stack+0x7e3>
     f4c:	56 c1       	rjmp	.+684    	; 0x11fa <__stack+0x99b>
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	09 f4       	brne	.+2      	; 0xf54 <__stack+0x6f5>
     f52:	f5 c0       	rjmp	.+490    	; 0x113e <__stack+0x8df>
     f54:	84 30       	cpi	r24, 0x04	; 4
     f56:	09 f4       	brne	.+2      	; 0xf5a <__stack+0x6fb>
     f58:	31 c1       	rjmp	.+610    	; 0x11bc <__stack+0x95d>
     f5a:	4f c1       	rjmp	.+670    	; 0x11fa <__stack+0x99b>
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(SEVENTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_ONE_ON)
     f5c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     f60:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     f64:	89 2b       	or	r24, r25
     f66:	a9 f4       	brne	.+42     	; 0xf92 <__stack+0x733>
							{
									/*blink led3 with the current mode*/
									l_ret |= LED_turn_off(&s_led0);
     f68:	81 e7       	ldi	r24, 0x71	; 113
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     f70:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led1);
     f72:	8e e6       	ldi	r24, 0x6E	; 110
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     f7a:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led2);
     f7c:	8b e6       	ldi	r24, 0x6B	; 107
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     f84:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_on(&s_led3);
     f86:	88 e6       	ldi	r24, 0x68	; 104
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
     f8e:	c8 2b       	or	r28, r24
     f90:	1a c0       	rjmp	.+52     	; 0xfc6 <__stack+0x767>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_ONE_ON)
     f92:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     f96:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     f9a:	89 2b       	or	r24, r25
     f9c:	a1 f0       	breq	.+40     	; 0xfc6 <__stack+0x767>
							{		
									/*blink led1,led2,led4 with the current mode*/
									l_ret |= LED_turn_off(&s_led0);
     f9e:	81 e7       	ldi	r24, 0x71	; 113
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     fa6:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led1);
     fa8:	8e e6       	ldi	r24, 0x6E	; 110
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     fb0:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led2);
     fb2:	8b e6       	ldi	r24, 0x6B	; 107
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     fba:	c8 2b       	or	r28, r24
									l_ret |= LED_turn_off(&s_led3);
     fbc:	88 e6       	ldi	r24, 0x68	; 104
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     fc4:	c8 2b       	or	r28, r24
				break;
			case SEVENTH_STATE:
				switch(u8_g_blinkMode_update)
				{
					case BLINK_ONE:
						while((BLINK_ONE==u8_g_blinkMode_update)&&(SEVENTH_STATE==u8_g_pressCnt))
     fc6:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
     fca:	81 11       	cpse	r24, r1
     fcc:	17 c1       	rjmp	.+558    	; 0x11fc <__stack+0x99d>
     fce:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
     fd2:	87 30       	cpi	r24, 0x07	; 7
     fd4:	19 f2       	breq	.-122    	; 0xf5c <__stack+0x6fd>
     fd6:	12 c1       	rjmp	.+548    	; 0x11fc <__stack+0x99d>
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(SEVENTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_TWO_ON)
     fd8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     fdc:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     fe0:	02 97       	sbiw	r24, 0x02	; 2
     fe2:	a8 f4       	brcc	.+42     	; 0x100e <__stack+0x7af>
							{
								/*blink led3 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
     fe4:	81 e7       	ldi	r24, 0x71	; 113
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     fec:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
     fee:	8e e6       	ldi	r24, 0x6E	; 110
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
     ff6:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
     ff8:	8b e6       	ldi	r24, 0x6B	; 107
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    1000:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
    1002:	88 e6       	ldi	r24, 0x68	; 104
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
    100a:	c8 2b       	or	r28, r24
    100c:	1a c0       	rjmp	.+52     	; 0x1042 <__stack+0x7e3>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_TWO_ON)
    100e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
    1012:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
    1016:	02 97       	sbiw	r24, 0x02	; 2
    1018:	a0 f0       	brcs	.+40     	; 0x1042 <__stack+0x7e3>
							{								
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
    101a:	81 e7       	ldi	r24, 0x71	; 113
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    1022:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
    1024:	8e e6       	ldi	r24, 0x6E	; 110
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    102c:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
    102e:	8b e6       	ldi	r24, 0x6B	; 107
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    1036:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
    1038:	88 e6       	ldi	r24, 0x68	; 104
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    1040:	c8 2b       	or	r28, r24
							}
						}
						
						break;
					case BLINK_TWO:
						while((BLINK_TWO==u8_g_blinkMode_update)&&(SEVENTH_STATE==u8_g_pressCnt))
    1042:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	09 f0       	breq	.+2      	; 0x104c <__stack+0x7ed>
    104a:	d8 c0       	rjmp	.+432    	; 0x11fc <__stack+0x99d>
    104c:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
    1050:	87 30       	cpi	r24, 0x07	; 7
    1052:	11 f2       	breq	.-124    	; 0xfd8 <__stack+0x779>
    1054:	d3 c0       	rjmp	.+422    	; 0x11fc <__stack+0x99d>
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(SEVENTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_THREE_ON)
    1056:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
    105a:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
    105e:	03 97       	sbiw	r24, 0x03	; 3
    1060:	a8 f4       	brcc	.+42     	; 0x108c <__stack+0x82d>
							{
								/*blink led3 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
    1062:	81 e7       	ldi	r24, 0x71	; 113
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    106a:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
    106c:	8e e6       	ldi	r24, 0x6E	; 110
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    1074:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
    1076:	8b e6       	ldi	r24, 0x6B	; 107
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    107e:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
    1080:	88 e6       	ldi	r24, 0x68	; 104
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
    1088:	c8 2b       	or	r28, r24
    108a:	1a c0       	rjmp	.+52     	; 0x10c0 <__stack+0x861>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_THREE_ON)
    108c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
    1090:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
    1094:	03 97       	sbiw	r24, 0x03	; 3
    1096:	a0 f0       	brcs	.+40     	; 0x10c0 <__stack+0x861>
							{	
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
    1098:	81 e7       	ldi	r24, 0x71	; 113
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    10a0:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
    10a2:	8e e6       	ldi	r24, 0x6E	; 110
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    10aa:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
    10ac:	8b e6       	ldi	r24, 0x6B	; 107
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    10b4:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
    10b6:	88 e6       	ldi	r24, 0x68	; 104
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    10be:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_THREE:
						while((BLINK_THREE==u8_g_blinkMode_update)&&(SEVENTH_STATE==u8_g_pressCnt))
    10c0:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
    10c4:	82 30       	cpi	r24, 0x02	; 2
    10c6:	09 f0       	breq	.+2      	; 0x10ca <__stack+0x86b>
    10c8:	99 c0       	rjmp	.+306    	; 0x11fc <__stack+0x99d>
    10ca:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
    10ce:	87 30       	cpi	r24, 0x07	; 7
    10d0:	11 f2       	breq	.-124    	; 0x1056 <__stack+0x7f7>
    10d2:	94 c0       	rjmp	.+296    	; 0x11fc <__stack+0x99d>
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(SEVENTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FOUR_ON)
    10d4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
    10d8:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
    10dc:	05 97       	sbiw	r24, 0x05	; 5
    10de:	a8 f4       	brcc	.+42     	; 0x110a <__stack+0x8ab>
							{
								/*blink led3 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
    10e0:	81 e7       	ldi	r24, 0x71	; 113
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    10e8:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
    10ea:	8e e6       	ldi	r24, 0x6E	; 110
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    10f2:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
    10f4:	8b e6       	ldi	r24, 0x6B	; 107
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    10fc:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
    10fe:	88 e6       	ldi	r24, 0x68	; 104
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
    1106:	c8 2b       	or	r28, r24
    1108:	1a c0       	rjmp	.+52     	; 0x113e <__stack+0x8df>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FOUR_ON)
    110a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
    110e:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
    1112:	05 97       	sbiw	r24, 0x05	; 5
    1114:	a0 f0       	brcs	.+40     	; 0x113e <__stack+0x8df>
							{	
								/*blink led0,led1,led2,led4 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
    1116:	81 e7       	ldi	r24, 0x71	; 113
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    111e:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
    1120:	8e e6       	ldi	r24, 0x6E	; 110
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    1128:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
    112a:	8b e6       	ldi	r24, 0x6B	; 107
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    1132:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
    1134:	88 e6       	ldi	r24, 0x68	; 104
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    113c:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FOUR:
						while((BLINK_FOUR==u8_g_blinkMode_update)&&(SEVENTH_STATE==u8_g_pressCnt))
    113e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
    1142:	83 30       	cpi	r24, 0x03	; 3
    1144:	09 f0       	breq	.+2      	; 0x1148 <__stack+0x8e9>
    1146:	5a c0       	rjmp	.+180    	; 0x11fc <__stack+0x99d>
    1148:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
    114c:	87 30       	cpi	r24, 0x07	; 7
    114e:	11 f2       	breq	.-124    	; 0x10d4 <__stack+0x875>
    1150:	55 c0       	rjmp	.+170    	; 0x11fc <__stack+0x99d>
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(SEVENTH_STATE==u8_g_pressCnt))
						{
							if(u16_g_100_ms_cnt<BLINK_MODE_FIVE_ON)
    1152:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
    1156:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
    115a:	08 97       	sbiw	r24, 0x08	; 8
    115c:	a8 f4       	brcc	.+42     	; 0x1188 <__stack+0x929>
							{
								/*blink led3 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
    115e:	81 e7       	ldi	r24, 0x71	; 113
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    1166:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
    1168:	8e e6       	ldi	r24, 0x6E	; 110
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    1170:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
    1172:	8b e6       	ldi	r24, 0x6B	; 107
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    117a:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_on(&s_led3);
    117c:	88 e6       	ldi	r24, 0x68	; 104
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	0e 94 46 09 	call	0x128c	; 0x128c <LED_turn_on>
    1184:	c8 2b       	or	r28, r24
    1186:	1a c0       	rjmp	.+52     	; 0x11bc <__stack+0x95d>
							}
							else if(u16_g_100_ms_cnt>=BLINK_MODE_FIVE_ON)
    1188:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
    118c:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
    1190:	08 97       	sbiw	r24, 0x08	; 8
    1192:	a0 f0       	brcs	.+40     	; 0x11bc <__stack+0x95d>
							{	
								/*blink led3 with the current mode*/
								l_ret |= LED_turn_off(&s_led0);
    1194:	81 e7       	ldi	r24, 0x71	; 113
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    119c:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led1);
    119e:	8e e6       	ldi	r24, 0x6E	; 110
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    11a6:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led2);
    11a8:	8b e6       	ldi	r24, 0x6B	; 107
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    11b0:	c8 2b       	or	r28, r24
								l_ret |= LED_turn_off(&s_led3);
    11b2:	88 e6       	ldi	r24, 0x68	; 104
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    11ba:	c8 2b       	or	r28, r24
								/*DO NOTHING*/
							}
						}
						break;
					case BLINK_FIVE:
						while((BLINK_FIVE==u8_g_blinkMode_update)&&(SEVENTH_STATE==u8_g_pressCnt))
    11bc:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <u8_g_blinkMode_update>
    11c0:	84 30       	cpi	r24, 0x04	; 4
    11c2:	21 f4       	brne	.+8      	; 0x11cc <__stack+0x96d>
    11c4:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_g_pressCnt>
    11c8:	87 30       	cpi	r24, 0x07	; 7
    11ca:	19 f2       	breq	.-122    	; 0x1152 <__stack+0x8f3>
							else
							{
								/*DO NOTHING*/
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
    11cc:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <u8_g_blinkMode_update>
						break;
    11d0:	15 c0       	rjmp	.+42     	; 0x11fc <__stack+0x99d>
						l_ret = E_NOT_OK;
						break;
				}
				break;
			case EIGHTH_STATE:
				l_ret |= LED_turn_off(&s_led3);
    11d2:	88 e6       	ldi	r24, 0x68	; 104
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LED_turn_off>
    11da:	c8 2b       	or	r28, r24
				u8_g_pressCnt = IDLE_STATE;
    11dc:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <u8_g_pressCnt>
				break;
    11e0:	0d c0       	rjmp	.+26     	; 0x11fc <__stack+0x99d>
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
						break;
					default: 
						l_ret = E_NOT_OK;
    11e2:	c0 e0       	ldi	r28, 0x00	; 0
    11e4:	0b c0       	rjmp	.+22     	; 0x11fc <__stack+0x99d>
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
						break;
					default: 
						l_ret = E_NOT_OK;
    11e6:	c0 e0       	ldi	r28, 0x00	; 0
    11e8:	09 c0       	rjmp	.+18     	; 0x11fc <__stack+0x99d>
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
						break;
					default: 
						l_ret = E_NOT_OK;
    11ea:	c0 e0       	ldi	r28, 0x00	; 0
    11ec:	07 c0       	rjmp	.+14     	; 0x11fc <__stack+0x99d>
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
						break;
					default: 
						l_ret = E_NOT_OK;
    11ee:	c0 e0       	ldi	r28, 0x00	; 0
    11f0:	05 c0       	rjmp	.+10     	; 0x11fc <__stack+0x99d>
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
						break;
					default: 
						l_ret = E_NOT_OK;
    11f2:	c0 e0       	ldi	r28, 0x00	; 0
    11f4:	03 c0       	rjmp	.+6      	; 0x11fc <__stack+0x99d>
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
						break;
					default: 
						l_ret = E_NOT_OK;
    11f6:	c0 e0       	ldi	r28, 0x00	; 0
    11f8:	01 c0       	rjmp	.+2      	; 0x11fc <__stack+0x99d>
							}
						}
						u8_g_blinkMode_update = BLINK_ONE;
						break;
					default: 
						l_ret = E_NOT_OK;
    11fa:	c0 e0       	ldi	r28, 0x00	; 0
				u8_g_pressCnt = IDLE_STATE;
				break;
		}
	
	return l_ret;
}
    11fc:	8c 2f       	mov	r24, r28
    11fe:	cf 91       	pop	r28
    1200:	08 95       	ret

00001202 <BTN_init>:
 *  Author: Mohamed Abdel-Wahab
 */ 
#include "button.h"

Std_ReturnType BTN_init(const button_t *btn_ptr)
{
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
	Std_ReturnType ret = E_OK;
	if(NULL == btn_ptr || (btn_ptr->button_pin.pin > PORT_PIN_MAX_NUMBER-1) || (btn_ptr->button_pin.port > PORT_MAX_NUMBER-1))
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	81 f0       	breq	.+32     	; 0x122a <BTN_init+0x28>
    120a:	fc 01       	movw	r30, r24
    120c:	21 81       	ldd	r18, Z+1	; 0x01
    120e:	28 30       	cpi	r18, 0x08	; 8
    1210:	70 f4       	brcc	.+28     	; 0x122e <BTN_init+0x2c>
    1212:	20 81       	ld	r18, Z
    1214:	24 30       	cpi	r18, 0x04	; 4
    1216:	68 f4       	brcc	.+26     	; 0x1232 <BTN_init+0x30>
    1218:	ec 01       	movw	r28, r24
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret = DIO_pin_direction_intialize(&(btn_ptr->button_pin),DIO_DIRECTION_INPUT);
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	0e 94 a1 09 	call	0x1342	; 0x1342 <DIO_pin_direction_intialize>
		ret = DIO_pin_write_logic(&(btn_ptr->button_pin),DIO_LOGIC_LOW);
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	ce 01       	movw	r24, r28
    1224:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <DIO_pin_write_logic>
    1228:	05 c0       	rjmp	.+10     	; 0x1234 <BTN_init+0x32>
Std_ReturnType BTN_init(const button_t *btn_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == btn_ptr || (btn_ptr->button_pin.pin > PORT_PIN_MAX_NUMBER-1) || (btn_ptr->button_pin.port > PORT_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	03 c0       	rjmp	.+6      	; 0x1234 <BTN_init+0x32>
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	01 c0       	rjmp	.+2      	; 0x1234 <BTN_init+0x32>
    1232:	80 e0       	ldi	r24, 0x00	; 0
	{
		ret = DIO_pin_direction_intialize(&(btn_ptr->button_pin),DIO_DIRECTION_INPUT);
		ret = DIO_pin_write_logic(&(btn_ptr->button_pin),DIO_LOGIC_LOW);
	}
	return ret;
}
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	08 95       	ret

0000123a <LED_initialize>:
 * Created: 4/5/2023 8:30:02 PM
 *  Author: Mohamed Abdel-Wahab
 */ 
#include "led.h"
Std_ReturnType LED_initialize(const led_t *led_ptr)
{
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
	Std_ReturnType ret = E_OK;
	if(NULL == led_ptr || (led_ptr->led_pin.pin > PORT_PIN_MAX_NUMBER-1) || (led_ptr->led_pin.port > PORT_MAX_NUMBER-1))
    123e:	00 97       	sbiw	r24, 0x00	; 0
    1240:	d9 f0       	breq	.+54     	; 0x1278 <LED_initialize+0x3e>
    1242:	fc 01       	movw	r30, r24
    1244:	21 81       	ldd	r18, Z+1	; 0x01
    1246:	28 30       	cpi	r18, 0x08	; 8
    1248:	c8 f4       	brcc	.+50     	; 0x127c <LED_initialize+0x42>
    124a:	20 81       	ld	r18, Z
    124c:	24 30       	cpi	r18, 0x04	; 4
    124e:	c0 f4       	brcc	.+48     	; 0x1280 <LED_initialize+0x46>
    1250:	ec 01       	movw	r28, r24
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret = DIO_pin_direction_intialize(&(led_ptr->led_pin),DIO_DIRECTION_OUTPUT);
    1252:	61 e0       	ldi	r22, 0x01	; 1
    1254:	0e 94 a1 09 	call	0x1342	; 0x1342 <DIO_pin_direction_intialize>
		switch(led_ptr->led_status)
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	88 23       	and	r24, r24
    125c:	19 f0       	breq	.+6      	; 0x1264 <LED_initialize+0x2a>
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	31 f0       	breq	.+12     	; 0x126e <LED_initialize+0x34>
    1262:	10 c0       	rjmp	.+32     	; 0x1284 <LED_initialize+0x4a>
		{
			case LED_OFF:
				ret = DIO_pin_write_logic(&(led_ptr->led_pin),DIO_LOGIC_LOW);
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	ce 01       	movw	r24, r28
    1268:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <DIO_pin_write_logic>
				break;
    126c:	0c c0       	rjmp	.+24     	; 0x1286 <LED_initialize+0x4c>
			case LED_ON:
				ret = DIO_pin_write_logic(&(led_ptr->led_pin),DIO_LOGIC_HIGH);
    126e:	61 e0       	ldi	r22, 0x01	; 1
    1270:	ce 01       	movw	r24, r28
    1272:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <DIO_pin_write_logic>
				break;
    1276:	07 c0       	rjmp	.+14     	; 0x1286 <LED_initialize+0x4c>
Std_ReturnType LED_initialize(const led_t *led_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == led_ptr || (led_ptr->led_pin.pin > PORT_PIN_MAX_NUMBER-1) || (led_ptr->led_pin.port > PORT_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	05 c0       	rjmp	.+10     	; 0x1286 <LED_initialize+0x4c>
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	03 c0       	rjmp	.+6      	; 0x1286 <LED_initialize+0x4c>
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	01 c0       	rjmp	.+2      	; 0x1286 <LED_initialize+0x4c>
				break;
			case LED_ON:
				ret = DIO_pin_write_logic(&(led_ptr->led_pin),DIO_LOGIC_HIGH);
				break;
			default:
				ret = E_NOT_OK;
    1284:	80 e0       	ldi	r24, 0x00	; 0
				break;
		}
	}
	return ret;
}
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	08 95       	ret

0000128c <LED_turn_on>:

Std_ReturnType LED_turn_on(const led_t *led_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == led_ptr || (led_ptr->led_pin.pin > PORT_PIN_MAX_NUMBER-1) || (led_ptr->led_pin.port > PORT_MAX_NUMBER-1))
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	59 f0       	breq	.+22     	; 0x12a6 <LED_turn_on+0x1a>
    1290:	fc 01       	movw	r30, r24
    1292:	21 81       	ldd	r18, Z+1	; 0x01
    1294:	28 30       	cpi	r18, 0x08	; 8
    1296:	48 f4       	brcc	.+18     	; 0x12aa <LED_turn_on+0x1e>
    1298:	20 81       	ld	r18, Z
    129a:	24 30       	cpi	r18, 0x04	; 4
    129c:	40 f4       	brcc	.+16     	; 0x12ae <LED_turn_on+0x22>
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret = DIO_pin_write_logic(&(led_ptr->led_pin),DIO_LOGIC_HIGH);
    129e:	61 e0       	ldi	r22, 0x01	; 1
    12a0:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <DIO_pin_write_logic>
    12a4:	08 95       	ret
Std_ReturnType LED_turn_on(const led_t *led_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == led_ptr || (led_ptr->led_pin.pin > PORT_PIN_MAX_NUMBER-1) || (led_ptr->led_pin.port > PORT_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	08 95       	ret
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	08 95       	ret
    12ae:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ret = DIO_pin_write_logic(&(led_ptr->led_pin),DIO_LOGIC_HIGH);
	}
	return ret;
}
    12b0:	08 95       	ret

000012b2 <LED_turn_off>:

Std_ReturnType LED_turn_off (const led_t *led_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == led_ptr || (led_ptr->led_pin.pin > PORT_PIN_MAX_NUMBER-1) || (led_ptr->led_pin.port > PORT_MAX_NUMBER-1))
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	59 f0       	breq	.+22     	; 0x12cc <LED_turn_off+0x1a>
    12b6:	fc 01       	movw	r30, r24
    12b8:	21 81       	ldd	r18, Z+1	; 0x01
    12ba:	28 30       	cpi	r18, 0x08	; 8
    12bc:	48 f4       	brcc	.+18     	; 0x12d0 <LED_turn_off+0x1e>
    12be:	20 81       	ld	r18, Z
    12c0:	24 30       	cpi	r18, 0x04	; 4
    12c2:	40 f4       	brcc	.+16     	; 0x12d4 <LED_turn_off+0x22>
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret = DIO_pin_write_logic(&(led_ptr->led_pin),DIO_LOGIC_LOW);
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <DIO_pin_write_logic>
    12ca:	08 95       	ret
Std_ReturnType LED_turn_off (const led_t *led_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == led_ptr || (led_ptr->led_pin.pin > PORT_PIN_MAX_NUMBER-1) || (led_ptr->led_pin.port > PORT_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	08 95       	ret
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	08 95       	ret
    12d4:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ret = DIO_pin_write_logic(&(led_ptr->led_pin),DIO_LOGIC_LOW);
	}
	return ret;
}
    12d6:	08 95       	ret

000012d8 <TIMER_MANGER_init>:
 */ 
#include "timer_manger.h"

static Timer_Config_t st_g_Timer;
Std_ReturnType TIMER_MANGER_init(const TimerManger_config_t *stPtr_a_TimerConfig)
{
    12d8:	1f 93       	push	r17
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
	Std_ReturnType l_ret = E_OK;
	if( (stPtr_a_TimerConfig->timer_num >= INVALID_TIMER_TYPE) )
    12de:	fc 01       	movw	r30, r24
    12e0:	20 81       	ld	r18, Z
    12e2:	23 30       	cpi	r18, 0x03	; 3
    12e4:	c8 f4       	brcc	.+50     	; 0x1318 <TIMER_MANGER_init+0x40>
    12e6:	ec 01       	movw	r28, r24
	}
	else
	{
		/*initiate the timer */
		
		st_g_Timer.timer_type=stPtr_a_TimerConfig->timer_num;
    12e8:	e4 e9       	ldi	r30, 0x94	; 148
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	20 83       	st	Z, r18
		st_g_Timer.timer_mode=stPtr_a_TimerConfig->timer_mode;
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	82 83       	std	Z+2, r24	; 0x02
		st_g_Timer.timer_InitialValue=stPtr_a_TimerConfig->timer_InitialValue;
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	9b 81       	ldd	r25, Y+3	; 0x03
    12f6:	97 83       	std	Z+7, r25	; 0x07
    12f8:	86 83       	std	Z+6, r24	; 0x06
		st_g_Timer.timer_compare_MatchValue=stPtr_a_TimerConfig->timer_compare_MatchValue;
    12fa:	8c 81       	ldd	r24, Y+4	; 0x04
    12fc:	9d 81       	ldd	r25, Y+5	; 0x05
    12fe:	91 87       	std	Z+9, r25	; 0x09
    1300:	80 87       	std	Z+8, r24	; 0x08
		
		l_ret = TIMERx_init(&st_g_Timer);
    1302:	cf 01       	movw	r24, r30
    1304:	0e 94 be 10 	call	0x217c	; 0x217c <TIMERx_init>
    1308:	18 2f       	mov	r17, r24
		/*set call-back function  */
		l_ret |= TIMERx_setCallBack(stPtr_a_TimerConfig->call_back_function , stPtr_a_TimerConfig->timer_num);
    130a:	68 81       	ld	r22, Y
    130c:	8e 81       	ldd	r24, Y+6	; 0x06
    130e:	9f 81       	ldd	r25, Y+7	; 0x07
    1310:	0e 94 9c 10 	call	0x2138	; 0x2138 <TIMERx_setCallBack>
    1314:	81 2b       	or	r24, r17
    1316:	01 c0       	rjmp	.+2      	; 0x131a <TIMER_MANGER_init+0x42>
Std_ReturnType TIMER_MANGER_init(const TimerManger_config_t *stPtr_a_TimerConfig)
{
	Std_ReturnType l_ret = E_OK;
	if( (stPtr_a_TimerConfig->timer_num >= INVALID_TIMER_TYPE) )
	{
		l_ret = E_NOT_OK;
    1318:	80 e0       	ldi	r24, 0x00	; 0
		l_ret = TIMERx_init(&st_g_Timer);
		/*set call-back function  */
		l_ret |= TIMERx_setCallBack(stPtr_a_TimerConfig->call_back_function , stPtr_a_TimerConfig->timer_num);
	}
	return l_ret;
}
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	1f 91       	pop	r17
    1320:	08 95       	ret

00001322 <TIMER_MANGER_start>:

Std_ReturnType TIMER_MANGER_start(const TimerClock_t en_a_timer_clock,const TimerType_t en_a_timer_num)
{
	Std_ReturnType l_ret = E_OK;
	if( (en_a_timer_clock >= INVALID_TIMER_CLK)||(en_a_timer_num >= INVALID_TIMER_TYPE) )
    1322:	8a 30       	cpi	r24, 0x0A	; 10
    1324:	28 f4       	brcc	.+10     	; 0x1330 <TIMER_MANGER_start+0xe>
    1326:	63 30       	cpi	r22, 0x03	; 3
    1328:	28 f4       	brcc	.+10     	; 0x1334 <TIMER_MANGER_start+0x12>
		l_ret = E_NOT_OK;
	}
	else
	{
		/*Configure the TIMER Pres-scaler value for Timer-x clock*/
		l_ret = TIMERx_start(en_a_timer_clock,en_a_timer_num);
    132a:	0e 94 02 11 	call	0x2204	; 0x2204 <TIMERx_start>
    132e:	08 95       	ret
Std_ReturnType TIMER_MANGER_start(const TimerClock_t en_a_timer_clock,const TimerType_t en_a_timer_num)
{
	Std_ReturnType l_ret = E_OK;
	if( (en_a_timer_clock >= INVALID_TIMER_CLK)||(en_a_timer_num >= INVALID_TIMER_TYPE) )
	{
		l_ret = E_NOT_OK;
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	08 95       	ret
    1334:	80 e0       	ldi	r24, 0x00	; 0
	{
		/*Configure the TIMER Pres-scaler value for Timer-x clock*/
		l_ret = TIMERx_start(en_a_timer_clock,en_a_timer_num);
	}
	return l_ret;
}
    1336:	08 95       	ret

00001338 <main>:

int main(void)
{

#if  RUN_MAIN_PROGRAM==ENABLE_FEATURE
	 APP_init();
    1338:	0e 94 95 00 	call	0x12a	; 0x12a <APP_init>
#endif

	while (1)
	{
#if  RUN_MAIN_PROGRAM==ENABLE_FEATURE
	 APP_start_program();
    133c:	0e 94 ce 00 	call	0x19c	; 0x19c <APP_start_program>
    1340:	fd cf       	rjmp	.-6      	; 0x133c <main+0x4>

00001342 <DIO_pin_direction_intialize>:
static volatile uint8_t *port_registers[PORT_MAX_NUMBER] = {&PORTA, &PORTB, &PORTC, &PORTD};

Std_ReturnType DIO_pin_direction_intialize(const pin_config_t *pin_config_ptr,direction_t a_direction)
{
	Std_ReturnType ret = E_OK;
	if((NULL == pin_config_ptr) || (pin_config_ptr->pin > PORT_PIN_MAX_NUMBER-1) || (pin_config_ptr->port > PORT_MAX_NUMBER-1))
    1342:	00 97       	sbiw	r24, 0x00	; 0
    1344:	b1 f1       	breq	.+108    	; 0x13b2 <DIO_pin_direction_intialize+0x70>
    1346:	dc 01       	movw	r26, r24
    1348:	11 96       	adiw	r26, 0x01	; 1
    134a:	2c 91       	ld	r18, X
    134c:	11 97       	sbiw	r26, 0x01	; 1
    134e:	28 30       	cpi	r18, 0x08	; 8
    1350:	90 f5       	brcc	.+100    	; 0x13b6 <DIO_pin_direction_intialize+0x74>
    1352:	ec 91       	ld	r30, X
    1354:	e4 30       	cpi	r30, 0x04	; 4
    1356:	88 f5       	brcc	.+98     	; 0x13ba <DIO_pin_direction_intialize+0x78>
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(a_direction)
    1358:	66 23       	and	r22, r22
    135a:	b1 f0       	breq	.+44     	; 0x1388 <DIO_pin_direction_intialize+0x46>
    135c:	61 30       	cpi	r22, 0x01	; 1
    135e:	79 f5       	brne	.+94     	; 0x13be <DIO_pin_direction_intialize+0x7c>
		{
			case DIO_DIRECTION_OUTPUT:
				SET_BIT(*(ddr_registers[pin_config_ptr->port]),pin_config_ptr->pin);
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	ee 0f       	add	r30, r30
    1364:	ff 1f       	adc	r31, r31
    1366:	e8 57       	subi	r30, 0x78	; 120
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	01 90       	ld	r0, Z+
    136c:	f0 81       	ld	r31, Z
    136e:	e0 2d       	mov	r30, r0
    1370:	30 81       	ld	r19, Z
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_pin_direction_intialize+0x3a>
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	2a 95       	dec	r18
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <DIO_pin_direction_intialize+0x36>
    1380:	83 2b       	or	r24, r19
    1382:	80 83       	st	Z, r24
/* Reference to the Port Status Register (Write data)  */
static volatile uint8_t *port_registers[PORT_MAX_NUMBER] = {&PORTA, &PORTB, &PORTC, &PORTD};

Std_ReturnType DIO_pin_direction_intialize(const pin_config_t *pin_config_ptr,direction_t a_direction)
{
	Std_ReturnType ret = E_OK;
    1384:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(a_direction)
		{
			case DIO_DIRECTION_OUTPUT:
				SET_BIT(*(ddr_registers[pin_config_ptr->port]),pin_config_ptr->pin);
				break;
    1386:	08 95       	ret
			case DIO_DIRECTION_INPUT:
				CLEAR_BIT(*(ddr_registers[pin_config_ptr->port]),pin_config_ptr->pin);
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	ee 0f       	add	r30, r30
    138c:	ff 1f       	adc	r31, r31
    138e:	e8 57       	subi	r30, 0x78	; 120
    1390:	ff 4f       	sbci	r31, 0xFF	; 255
    1392:	01 90       	ld	r0, Z+
    1394:	f0 81       	ld	r31, Z
    1396:	e0 2d       	mov	r30, r0
    1398:	30 81       	ld	r19, Z
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <DIO_pin_direction_intialize+0x62>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	2a 95       	dec	r18
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <DIO_pin_direction_intialize+0x5e>
    13a8:	80 95       	com	r24
    13aa:	83 23       	and	r24, r19
    13ac:	80 83       	st	Z, r24
/* Reference to the Port Status Register (Write data)  */
static volatile uint8_t *port_registers[PORT_MAX_NUMBER] = {&PORTA, &PORTB, &PORTC, &PORTD};

Std_ReturnType DIO_pin_direction_intialize(const pin_config_t *pin_config_ptr,direction_t a_direction)
{
	Std_ReturnType ret = E_OK;
    13ae:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_DIRECTION_OUTPUT:
				SET_BIT(*(ddr_registers[pin_config_ptr->port]),pin_config_ptr->pin);
				break;
			case DIO_DIRECTION_INPUT:
				CLEAR_BIT(*(ddr_registers[pin_config_ptr->port]),pin_config_ptr->pin);
				break;
    13b0:	08 95       	ret
Std_ReturnType DIO_pin_direction_intialize(const pin_config_t *pin_config_ptr,direction_t a_direction)
{
	Std_ReturnType ret = E_OK;
	if((NULL == pin_config_ptr) || (pin_config_ptr->pin > PORT_PIN_MAX_NUMBER-1) || (pin_config_ptr->port > PORT_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	08 95       	ret
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	08 95       	ret
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	08 95       	ret
				break;
			case DIO_DIRECTION_INPUT:
				CLEAR_BIT(*(ddr_registers[pin_config_ptr->port]),pin_config_ptr->pin);
				break;
			default:
				ret = E_NOT_OK;
    13be:	80 e0       	ldi	r24, 0x00	; 0
				break;				
		}
	}
	return ret;
}
    13c0:	08 95       	ret

000013c2 <DIO_pin_write_logic>:

Std_ReturnType DIO_pin_write_logic(const pin_config_t *pin_config_ptr, const logic_t a_logic)
{
	Std_ReturnType ret = E_OK;
	if((NULL == pin_config_ptr) || (pin_config_ptr->pin > PORT_PIN_MAX_NUMBER-1) || (pin_config_ptr->port > PORT_MAX_NUMBER-1))
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	b9 f1       	breq	.+110    	; 0x1434 <DIO_pin_write_logic+0x72>
    13c6:	dc 01       	movw	r26, r24
    13c8:	11 96       	adiw	r26, 0x01	; 1
    13ca:	2c 91       	ld	r18, X
    13cc:	11 97       	sbiw	r26, 0x01	; 1
    13ce:	28 30       	cpi	r18, 0x08	; 8
    13d0:	98 f5       	brcc	.+102    	; 0x1438 <DIO_pin_write_logic+0x76>
    13d2:	ec 91       	ld	r30, X
    13d4:	e4 30       	cpi	r30, 0x04	; 4
    13d6:	90 f5       	brcc	.+100    	; 0x143c <DIO_pin_write_logic+0x7a>
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(a_logic)
    13d8:	66 23       	and	r22, r22
    13da:	19 f0       	breq	.+6      	; 0x13e2 <DIO_pin_write_logic+0x20>
    13dc:	61 30       	cpi	r22, 0x01	; 1
    13de:	b1 f0       	breq	.+44     	; 0x140c <DIO_pin_write_logic+0x4a>
    13e0:	2f c0       	rjmp	.+94     	; 0x1440 <DIO_pin_write_logic+0x7e>
		{
			case DIO_LOGIC_LOW:
				CLEAR_BIT(*(port_registers[pin_config_ptr->port]),pin_config_ptr->pin);
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	ee 0f       	add	r30, r30
    13e6:	ff 1f       	adc	r31, r31
    13e8:	e0 58       	subi	r30, 0x80	; 128
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	01 90       	ld	r0, Z+
    13ee:	f0 81       	ld	r31, Z
    13f0:	e0 2d       	mov	r30, r0
    13f2:	30 81       	ld	r19, Z
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_pin_write_logic+0x3c>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	2a 95       	dec	r18
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_pin_write_logic+0x38>
    1402:	80 95       	com	r24
    1404:	83 23       	and	r24, r19
    1406:	80 83       	st	Z, r24
	return ret;
}

Std_ReturnType DIO_pin_write_logic(const pin_config_t *pin_config_ptr, const logic_t a_logic)
{
	Std_ReturnType ret = E_OK;
    1408:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(a_logic)
		{
			case DIO_LOGIC_LOW:
				CLEAR_BIT(*(port_registers[pin_config_ptr->port]),pin_config_ptr->pin);
				break;
    140a:	08 95       	ret
			case DIO_LOGIC_HIGH:
				SET_BIT(*(port_registers[pin_config_ptr->port]),pin_config_ptr->pin);
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	ee 0f       	add	r30, r30
    1410:	ff 1f       	adc	r31, r31
    1412:	e0 58       	subi	r30, 0x80	; 128
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	01 90       	ld	r0, Z+
    1418:	f0 81       	ld	r31, Z
    141a:	e0 2d       	mov	r30, r0
    141c:	30 81       	ld	r19, Z
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <DIO_pin_write_logic+0x66>
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	2a 95       	dec	r18
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <DIO_pin_write_logic+0x62>
    142c:	83 2b       	or	r24, r19
    142e:	80 83       	st	Z, r24
	return ret;
}

Std_ReturnType DIO_pin_write_logic(const pin_config_t *pin_config_ptr, const logic_t a_logic)
{
	Std_ReturnType ret = E_OK;
    1430:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_LOGIC_LOW:
				CLEAR_BIT(*(port_registers[pin_config_ptr->port]),pin_config_ptr->pin);
				break;
			case DIO_LOGIC_HIGH:
				SET_BIT(*(port_registers[pin_config_ptr->port]),pin_config_ptr->pin);
				break;
    1432:	08 95       	ret
Std_ReturnType DIO_pin_write_logic(const pin_config_t *pin_config_ptr, const logic_t a_logic)
{
	Std_ReturnType ret = E_OK;
	if((NULL == pin_config_ptr) || (pin_config_ptr->pin > PORT_PIN_MAX_NUMBER-1) || (pin_config_ptr->port > PORT_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	08 95       	ret
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	08 95       	ret
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	08 95       	ret
				break;
			case DIO_LOGIC_HIGH:
				SET_BIT(*(port_registers[pin_config_ptr->port]),pin_config_ptr->pin);
				break;
			default:
				ret = E_NOT_OK;
    1440:	80 e0       	ldi	r24, 0x00	; 0
				break;
		}
	}
	return ret;
}
    1442:	08 95       	ret

00001444 <__vector_1>:
static  void(*g_EXT_INT0_fptr)(void) = NULL;
static  void(*g_EXT_INT1_fptr)(void) = NULL;
static  void(*g_EXT_INT2_fptr)(void) = NULL;

ISR(INT0_vect)
{
    1444:	1f 92       	push	r1
    1446:	0f 92       	push	r0
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	0f 92       	push	r0
    144c:	11 24       	eor	r1, r1
    144e:	2f 93       	push	r18
    1450:	3f 93       	push	r19
    1452:	4f 93       	push	r20
    1454:	5f 93       	push	r21
    1456:	6f 93       	push	r22
    1458:	7f 93       	push	r23
    145a:	8f 93       	push	r24
    145c:	9f 93       	push	r25
    145e:	af 93       	push	r26
    1460:	bf 93       	push	r27
    1462:	ef 93       	push	r30
    1464:	ff 93       	push	r31
	/* The INT0 external interrupt occurred (must be cleared in software) */
	EXT_INT0_InterruptFlagClear();
    1466:	8a b7       	in	r24, 0x3a	; 58
    1468:	80 64       	ori	r24, 0x40	; 64
    146a:	8a bf       	out	0x3a, r24	; 58
	
	if(g_EXT_INT0_fptr)
    146c:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <g_EXT_INT0_fptr>
    1470:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <g_EXT_INT0_fptr+0x1>
    1474:	30 97       	sbiw	r30, 0x00	; 0
    1476:	09 f0       	breq	.+2      	; 0x147a <__vector_1+0x36>
	{
		/* Application Callback function gets called every time this ISR executes */
		(*g_EXT_INT0_fptr)();
    1478:	09 95       	icall
	}
	else{/*do nothing*/}
}
    147a:	ff 91       	pop	r31
    147c:	ef 91       	pop	r30
    147e:	bf 91       	pop	r27
    1480:	af 91       	pop	r26
    1482:	9f 91       	pop	r25
    1484:	8f 91       	pop	r24
    1486:	7f 91       	pop	r23
    1488:	6f 91       	pop	r22
    148a:	5f 91       	pop	r21
    148c:	4f 91       	pop	r20
    148e:	3f 91       	pop	r19
    1490:	2f 91       	pop	r18
    1492:	0f 90       	pop	r0
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	0f 90       	pop	r0
    1498:	1f 90       	pop	r1
    149a:	18 95       	reti

0000149c <__vector_2>:

ISR(INT1_vect)
{
    149c:	1f 92       	push	r1
    149e:	0f 92       	push	r0
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	0f 92       	push	r0
    14a4:	11 24       	eor	r1, r1
    14a6:	2f 93       	push	r18
    14a8:	3f 93       	push	r19
    14aa:	4f 93       	push	r20
    14ac:	5f 93       	push	r21
    14ae:	6f 93       	push	r22
    14b0:	7f 93       	push	r23
    14b2:	8f 93       	push	r24
    14b4:	9f 93       	push	r25
    14b6:	af 93       	push	r26
    14b8:	bf 93       	push	r27
    14ba:	ef 93       	push	r30
    14bc:	ff 93       	push	r31
	/* The INT1 external interrupt occurred (must be cleared in software) */
	EXT_INT1_InterruptFlagClear();
    14be:	8a b7       	in	r24, 0x3a	; 58
    14c0:	80 68       	ori	r24, 0x80	; 128
    14c2:	8a bf       	out	0x3a, r24	; 58
	if(g_EXT_INT1_fptr)
    14c4:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <g_EXT_INT1_fptr>
    14c8:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <g_EXT_INT1_fptr+0x1>
    14cc:	30 97       	sbiw	r30, 0x00	; 0
    14ce:	09 f0       	breq	.+2      	; 0x14d2 <__vector_2+0x36>
	{
		/* Application Callback function gets called every time this ISR executes */
		(*g_EXT_INT1_fptr)();
    14d0:	09 95       	icall
	}
	else{/*do nothing*/}
}
    14d2:	ff 91       	pop	r31
    14d4:	ef 91       	pop	r30
    14d6:	bf 91       	pop	r27
    14d8:	af 91       	pop	r26
    14da:	9f 91       	pop	r25
    14dc:	8f 91       	pop	r24
    14de:	7f 91       	pop	r23
    14e0:	6f 91       	pop	r22
    14e2:	5f 91       	pop	r21
    14e4:	4f 91       	pop	r20
    14e6:	3f 91       	pop	r19
    14e8:	2f 91       	pop	r18
    14ea:	0f 90       	pop	r0
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	0f 90       	pop	r0
    14f0:	1f 90       	pop	r1
    14f2:	18 95       	reti

000014f4 <__vector_3>:

ISR(INT2_vect)
{
    14f4:	1f 92       	push	r1
    14f6:	0f 92       	push	r0
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	0f 92       	push	r0
    14fc:	11 24       	eor	r1, r1
    14fe:	2f 93       	push	r18
    1500:	3f 93       	push	r19
    1502:	4f 93       	push	r20
    1504:	5f 93       	push	r21
    1506:	6f 93       	push	r22
    1508:	7f 93       	push	r23
    150a:	8f 93       	push	r24
    150c:	9f 93       	push	r25
    150e:	af 93       	push	r26
    1510:	bf 93       	push	r27
    1512:	ef 93       	push	r30
    1514:	ff 93       	push	r31
	/* The INT1 external interrupt occurred (must be cleared in software) */
	EXT_INT1_InterruptFlagClear();
    1516:	8a b7       	in	r24, 0x3a	; 58
    1518:	80 68       	ori	r24, 0x80	; 128
    151a:	8a bf       	out	0x3a, r24	; 58
	if(g_EXT_INT2_fptr)
    151c:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <g_EXT_INT2_fptr>
    1520:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <g_EXT_INT2_fptr+0x1>
    1524:	30 97       	sbiw	r30, 0x00	; 0
    1526:	09 f0       	breq	.+2      	; 0x152a <__vector_3+0x36>
	{
		/* Application Callback function gets called every time this ISR executes */
		(*g_EXT_INT2_fptr)();
    1528:	09 95       	icall
	}
	else{/*do nothing*/}
}
    152a:	ff 91       	pop	r31
    152c:	ef 91       	pop	r30
    152e:	bf 91       	pop	r27
    1530:	af 91       	pop	r26
    1532:	9f 91       	pop	r25
    1534:	8f 91       	pop	r24
    1536:	7f 91       	pop	r23
    1538:	6f 91       	pop	r22
    153a:	5f 91       	pop	r21
    153c:	4f 91       	pop	r20
    153e:	3f 91       	pop	r19
    1540:	2f 91       	pop	r18
    1542:	0f 90       	pop	r0
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	0f 90       	pop	r0
    1548:	1f 90       	pop	r1
    154a:	18 95       	reti

0000154c <EXT_INTx_setCallBack>:

Std_ReturnType EXT_INTx_setCallBack( void(*a_fptr)(void), const Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
	if((NULL == a_fptr) ||( a_interrupt_number > NUM_OF_EXT_INTx - 1))
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	d1 f0       	breq	.+52     	; 0x1584 <EXT_INTx_setCallBack+0x38>
    1550:	63 30       	cpi	r22, 0x03	; 3
    1552:	d0 f4       	brcc	.+52     	; 0x1588 <EXT_INTx_setCallBack+0x3c>
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(a_interrupt_number)
    1554:	61 30       	cpi	r22, 0x01	; 1
    1556:	51 f0       	breq	.+20     	; 0x156c <EXT_INTx_setCallBack+0x20>
    1558:	18 f0       	brcs	.+6      	; 0x1560 <EXT_INTx_setCallBack+0x14>
    155a:	62 30       	cpi	r22, 0x02	; 2
    155c:	69 f0       	breq	.+26     	; 0x1578 <EXT_INTx_setCallBack+0x2c>
    155e:	16 c0       	rjmp	.+44     	; 0x158c <EXT_INTx_setCallBack+0x40>
		{
			case INTERRUPT_EXTERNAL_INT0:
				g_EXT_INT0_fptr = a_fptr;
    1560:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <g_EXT_INT0_fptr+0x1>
    1564:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <g_EXT_INT0_fptr>
	else{/*do nothing*/}
}

Std_ReturnType EXT_INTx_setCallBack( void(*a_fptr)(void), const Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
    1568:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(a_interrupt_number)
		{
			case INTERRUPT_EXTERNAL_INT0:
				g_EXT_INT0_fptr = a_fptr;
				break;
    156a:	08 95       	ret
			case INTERRUPT_EXTERNAL_INT1:
				g_EXT_INT1_fptr = a_fptr;
    156c:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <g_EXT_INT1_fptr+0x1>
    1570:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <g_EXT_INT1_fptr>
	else{/*do nothing*/}
}

Std_ReturnType EXT_INTx_setCallBack( void(*a_fptr)(void), const Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
    1574:	81 e0       	ldi	r24, 0x01	; 1
			case INTERRUPT_EXTERNAL_INT0:
				g_EXT_INT0_fptr = a_fptr;
				break;
			case INTERRUPT_EXTERNAL_INT1:
				g_EXT_INT1_fptr = a_fptr;
				break;
    1576:	08 95       	ret
			case INTERRUPT_EXTERNAL_INT2:
				g_EXT_INT2_fptr = a_fptr;
    1578:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <g_EXT_INT2_fptr+0x1>
    157c:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <g_EXT_INT2_fptr>
	else{/*do nothing*/}
}

Std_ReturnType EXT_INTx_setCallBack( void(*a_fptr)(void), const Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
    1580:	81 e0       	ldi	r24, 0x01	; 1
			case INTERRUPT_EXTERNAL_INT1:
				g_EXT_INT1_fptr = a_fptr;
				break;
			case INTERRUPT_EXTERNAL_INT2:
				g_EXT_INT2_fptr = a_fptr;
				break;
    1582:	08 95       	ret
Std_ReturnType EXT_INTx_setCallBack( void(*a_fptr)(void), const Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
	if((NULL == a_fptr) ||( a_interrupt_number > NUM_OF_EXT_INTx - 1))
	{
		ret = E_NOT_OK;
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	08 95       	ret
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	08 95       	ret
				break;
			case INTERRUPT_EXTERNAL_INT2:
				g_EXT_INT2_fptr = a_fptr;
				break;
			default:
				ret = E_NOT_OK;
    158c:	80 e0       	ldi	r24, 0x00	; 0
				break;		
		}	
	}
	return ret;
}
    158e:	08 95       	ret

00001590 <EXT_INTx_setEdgeType>:

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
	if((a_interrupt_Id > NUM_OF_EXT_INTx - 1) || (a_edgeType > NOT_VALID_EDGE))
    1590:	63 30       	cpi	r22, 0x03	; 3
    1592:	08 f0       	brcs	.+2      	; 0x1596 <EXT_INTx_setEdgeType+0x6>
    1594:	69 c0       	rjmp	.+210    	; 0x1668 <EXT_INTx_setEdgeType+0xd8>
    1596:	85 30       	cpi	r24, 0x05	; 5
    1598:	08 f0       	brcs	.+2      	; 0x159c <EXT_INTx_setEdgeType+0xc>
    159a:	68 c0       	rjmp	.+208    	; 0x166c <EXT_INTx_setEdgeType+0xdc>
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(a_interrupt_Id)
    159c:	61 30       	cpi	r22, 0x01	; 1
    159e:	69 f1       	breq	.+90     	; 0x15fa <EXT_INTx_setEdgeType+0x6a>
    15a0:	20 f0       	brcs	.+8      	; 0x15aa <EXT_INTx_setEdgeType+0x1a>
    15a2:	62 30       	cpi	r22, 0x02	; 2
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <EXT_INTx_setEdgeType+0x18>
    15a6:	51 c0       	rjmp	.+162    	; 0x164a <EXT_INTx_setEdgeType+0xba>
    15a8:	63 c0       	rjmp	.+198    	; 0x1670 <EXT_INTx_setEdgeType+0xe0>
		{
			case INTERRUPT_EXTERNAL_INT0:
				switch(a_edgeType)
    15aa:	81 30       	cpi	r24, 0x01	; 1
    15ac:	71 f0       	breq	.+28     	; 0x15ca <EXT_INTx_setEdgeType+0x3a>
    15ae:	28 f0       	brcs	.+10     	; 0x15ba <EXT_INTx_setEdgeType+0x2a>
    15b0:	82 30       	cpi	r24, 0x02	; 2
    15b2:	99 f0       	breq	.+38     	; 0x15da <EXT_INTx_setEdgeType+0x4a>
    15b4:	83 30       	cpi	r24, 0x03	; 3
    15b6:	c9 f0       	breq	.+50     	; 0x15ea <EXT_INTx_setEdgeType+0x5a>
    15b8:	5d c0       	rjmp	.+186    	; 0x1674 <EXT_INTx_setEdgeType+0xe4>
				{
					case INTERRUPT_LOW_LEVEL:
						CLEAR_BIT(MCUCR,ISC00);
    15ba:	85 b7       	in	r24, 0x35	; 53
    15bc:	8e 7f       	andi	r24, 0xFE	; 254
    15be:	85 bf       	out	0x35, r24	; 53
						CLEAR_BIT(MCUCR,ISC01);
    15c0:	85 b7       	in	r24, 0x35	; 53
    15c2:	8d 7f       	andi	r24, 0xFD	; 253
    15c4:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
				switch(a_edgeType)
				{
					case INTERRUPT_LOW_LEVEL:
						CLEAR_BIT(MCUCR,ISC00);
						CLEAR_BIT(MCUCR,ISC01);
						break;
    15c8:	08 95       	ret
					case INTERRUPT_ANY_LOGICAL_CHANGE:
						SET_BIT(MCUCR,ISC00);
    15ca:	85 b7       	in	r24, 0x35	; 53
    15cc:	81 60       	ori	r24, 0x01	; 1
    15ce:	85 bf       	out	0x35, r24	; 53
						CLEAR_BIT(MCUCR,ISC01);
    15d0:	85 b7       	in	r24, 0x35	; 53
    15d2:	8d 7f       	andi	r24, 0xFD	; 253
    15d4:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
    15d6:	81 e0       	ldi	r24, 0x01	; 1
						CLEAR_BIT(MCUCR,ISC01);
						break;
					case INTERRUPT_ANY_LOGICAL_CHANGE:
						SET_BIT(MCUCR,ISC00);
						CLEAR_BIT(MCUCR,ISC01);
						break;
    15d8:	08 95       	ret
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCR,ISC00);
    15da:	85 b7       	in	r24, 0x35	; 53
    15dc:	8e 7f       	andi	r24, 0xFE	; 254
    15de:	85 bf       	out	0x35, r24	; 53
						SET_BIT(MCUCR,ISC01);
    15e0:	85 b7       	in	r24, 0x35	; 53
    15e2:	82 60       	ori	r24, 0x02	; 2
    15e4:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
    15e6:	81 e0       	ldi	r24, 0x01	; 1
						CLEAR_BIT(MCUCR,ISC01);
						break;
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCR,ISC00);
						SET_BIT(MCUCR,ISC01);
						break;
    15e8:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC00);
    15ea:	85 b7       	in	r24, 0x35	; 53
    15ec:	81 60       	ori	r24, 0x01	; 1
    15ee:	85 bf       	out	0x35, r24	; 53
						SET_BIT(MCUCR,ISC01);
    15f0:	85 b7       	in	r24, 0x35	; 53
    15f2:	82 60       	ori	r24, 0x02	; 2
    15f4:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
    15f6:	81 e0       	ldi	r24, 0x01	; 1
						SET_BIT(MCUCR,ISC01);
						break;
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC00);
						SET_BIT(MCUCR,ISC01);
						break;
    15f8:	08 95       	ret
				}
				break;
			
			case INTERRUPT_EXTERNAL_INT1:
			
				switch(a_edgeType)
    15fa:	81 30       	cpi	r24, 0x01	; 1
    15fc:	71 f0       	breq	.+28     	; 0x161a <EXT_INTx_setEdgeType+0x8a>
    15fe:	28 f0       	brcs	.+10     	; 0x160a <EXT_INTx_setEdgeType+0x7a>
    1600:	82 30       	cpi	r24, 0x02	; 2
    1602:	99 f0       	breq	.+38     	; 0x162a <EXT_INTx_setEdgeType+0x9a>
    1604:	83 30       	cpi	r24, 0x03	; 3
    1606:	c9 f0       	breq	.+50     	; 0x163a <EXT_INTx_setEdgeType+0xaa>
    1608:	37 c0       	rjmp	.+110    	; 0x1678 <EXT_INTx_setEdgeType+0xe8>
				{
					case INTERRUPT_LOW_LEVEL:
						CLEAR_BIT(MCUCR,ISC10);
    160a:	85 b7       	in	r24, 0x35	; 53
    160c:	8b 7f       	andi	r24, 0xFB	; 251
    160e:	85 bf       	out	0x35, r24	; 53
						CLEAR_BIT(MCUCR,ISC11);
    1610:	85 b7       	in	r24, 0x35	; 53
    1612:	87 7f       	andi	r24, 0xF7	; 247
    1614:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
    1616:	81 e0       	ldi	r24, 0x01	; 1
				switch(a_edgeType)
				{
					case INTERRUPT_LOW_LEVEL:
						CLEAR_BIT(MCUCR,ISC10);
						CLEAR_BIT(MCUCR,ISC11);
						break;
    1618:	08 95       	ret
					case INTERRUPT_ANY_LOGICAL_CHANGE:
						SET_BIT(MCUCR,ISC10);
    161a:	85 b7       	in	r24, 0x35	; 53
    161c:	84 60       	ori	r24, 0x04	; 4
    161e:	85 bf       	out	0x35, r24	; 53
						CLEAR_BIT(MCUCR,ISC11);
    1620:	85 b7       	in	r24, 0x35	; 53
    1622:	87 7f       	andi	r24, 0xF7	; 247
    1624:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
    1626:	81 e0       	ldi	r24, 0x01	; 1
						CLEAR_BIT(MCUCR,ISC11);
						break;
					case INTERRUPT_ANY_LOGICAL_CHANGE:
						SET_BIT(MCUCR,ISC10);
						CLEAR_BIT(MCUCR,ISC11);
						break;
    1628:	08 95       	ret
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCR,ISC10);
    162a:	85 b7       	in	r24, 0x35	; 53
    162c:	8b 7f       	andi	r24, 0xFB	; 251
    162e:	85 bf       	out	0x35, r24	; 53
						SET_BIT(MCUCR,ISC11);
    1630:	85 b7       	in	r24, 0x35	; 53
    1632:	88 60       	ori	r24, 0x08	; 8
    1634:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
    1636:	81 e0       	ldi	r24, 0x01	; 1
						CLEAR_BIT(MCUCR,ISC11);
						break;
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCR,ISC10);
						SET_BIT(MCUCR,ISC11);
						break;
    1638:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC10);
    163a:	85 b7       	in	r24, 0x35	; 53
    163c:	84 60       	ori	r24, 0x04	; 4
    163e:	85 bf       	out	0x35, r24	; 53
						SET_BIT(MCUCR,ISC11);
    1640:	85 b7       	in	r24, 0x35	; 53
    1642:	88 60       	ori	r24, 0x08	; 8
    1644:	85 bf       	out	0x35, r24	; 53
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
    1646:	81 e0       	ldi	r24, 0x01	; 1
						SET_BIT(MCUCR,ISC11);
						break;
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC10);
						SET_BIT(MCUCR,ISC11);
						break;
    1648:	08 95       	ret
				}
				break;
			
			case INTERRUPT_EXTERNAL_INT2:
			
				switch(a_edgeType)
    164a:	82 30       	cpi	r24, 0x02	; 2
    164c:	19 f0       	breq	.+6      	; 0x1654 <EXT_INTx_setEdgeType+0xc4>
    164e:	83 30       	cpi	r24, 0x03	; 3
    1650:	31 f0       	breq	.+12     	; 0x165e <EXT_INTx_setEdgeType+0xce>
    1652:	14 c0       	rjmp	.+40     	; 0x167c <EXT_INTx_setEdgeType+0xec>
				{
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCSR,ISC2);
    1654:	84 b7       	in	r24, 0x34	; 52
    1656:	8f 7b       	andi	r24, 0xBF	; 191
    1658:	84 bf       	out	0x34, r24	; 52
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
    165a:	81 e0       	ldi	r24, 0x01	; 1
			
				switch(a_edgeType)
				{
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCSR,ISC2);
						break;
    165c:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCSR,ISC2);
    165e:	84 b7       	in	r24, 0x34	; 52
    1660:	80 64       	ori	r24, 0x40	; 64
    1662:	84 bf       	out	0x34, r24	; 52
	return ret;
}

Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
    1664:	81 e0       	ldi	r24, 0x01	; 1
					case INTERRUPT_FALLING_EDGE:
						CLEAR_BIT(MCUCSR,ISC2);
						break;
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCSR,ISC2);
						break;
    1666:	08 95       	ret
Std_ReturnType EXT_INTx_setEdgeType(Interrupt_Edge_type_t a_edgeType ,  Interrupt_ID_t a_interrupt_Id)
{
	Std_ReturnType ret = E_OK;
	if((a_interrupt_Id > NUM_OF_EXT_INTx - 1) || (a_edgeType > NOT_VALID_EDGE))
	{
		ret = E_NOT_OK;
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	08 95       	ret
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	08 95       	ret
						break;
				}
				break;
			
			default:
				ret = E_NOT_OK;
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC00);
						SET_BIT(MCUCR,ISC01);
						break;
					default:
						ret = E_NOT_OK;
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	08 95       	ret
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCR,ISC10);
						SET_BIT(MCUCR,ISC11);
						break;
					default:
						ret = E_NOT_OK;
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	08 95       	ret
						break;
					case INTERRUPT_RISING_EDGE:
						SET_BIT(MCUCSR,ISC2);
						break;
					default:
						ret = E_NOT_OK;
    167c:	80 e0       	ldi	r24, 0x00	; 0
				ret = E_NOT_OK;
				break;
		}
	}
	return ret;
}
    167e:	08 95       	ret

00001680 <EXT_INTx_Init>:

Std_ReturnType EXT_INTx_Init(const Interrupt_Config_t *Interrupt_Config_Ptr )
{
    1680:	1f 93       	push	r17
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	00 d0       	rcall	.+0      	; 0x1688 <EXT_INTx_Init+0x8>
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_OK;
	if((NULL == Interrupt_Config_Ptr) || (Interrupt_Config_Ptr->source_id > NUM_OF_EXT_INTx - 1))
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	09 f4       	brne	.+2      	; 0x1692 <EXT_INTx_Init+0x12>
    1690:	57 c0       	rjmp	.+174    	; 0x1740 <EXT_INTx_Init+0xc0>
    1692:	fc 01       	movw	r30, r24
    1694:	21 81       	ldd	r18, Z+1	; 0x01
    1696:	23 30       	cpi	r18, 0x03	; 3
    1698:	08 f0       	brcs	.+2      	; 0x169c <EXT_INTx_Init+0x1c>
    169a:	54 c0       	rjmp	.+168    	; 0x1744 <EXT_INTx_Init+0xc4>
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(Interrupt_Config_Ptr->source_id)
    169c:	21 30       	cpi	r18, 0x01	; 1
    169e:	e9 f0       	breq	.+58     	; 0x16da <EXT_INTx_Init+0x5a>
    16a0:	18 f0       	brcs	.+6      	; 0x16a8 <EXT_INTx_Init+0x28>
    16a2:	22 30       	cpi	r18, 0x02	; 2
    16a4:	91 f1       	breq	.+100    	; 0x170a <EXT_INTx_Init+0x8a>
    16a6:	4a c0       	rjmp	.+148    	; 0x173c <EXT_INTx_Init+0xbc>
		{
			case INTERRUPT_EXTERNAL_INT0:
			
				/* Disable the External interrupt */
				EXT_INT0_InterruptDisable();
    16a8:	2b b7       	in	r18, 0x3b	; 59
    16aa:	2f 7b       	andi	r18, 0xBF	; 191
    16ac:	2b bf       	out	0x3b, r18	; 59
				/* Clear Interrupt Flag : External interrupt did not occur */
				EXT_INT0_InterruptFlagClear();
    16ae:	2a b7       	in	r18, 0x3a	; 58
    16b0:	20 64       	ori	r18, 0x40	; 64
    16b2:	2a bf       	out	0x3a, r18	; 58
				/* Configure External interrupt edge */
				ret = EXT_INTx_setEdgeType(Interrupt_Config_Ptr->edge,INTERRUPT_EXTERNAL_INT0);
    16b4:	60 e0       	ldi	r22, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	0e 94 c8 0a 	call	0x1590	; 0x1590 <EXT_INTx_setEdgeType>
    16bc:	18 2f       	mov	r17, r24
				/* Configure External interrupt I/O pin */
				pin_config_t INT0_PIN={.pin=PIN2,.port=PORTD_INDEX};
    16be:	83 e0       	ldi	r24, 0x03	; 3
    16c0:	89 83       	std	Y+1, r24	; 0x01
    16c2:	82 e0       	ldi	r24, 0x02	; 2
    16c4:	8a 83       	std	Y+2, r24	; 0x02
				ret |= DIO_pin_direction_intialize(&INT0_PIN,DIO_DIRECTION_INPUT);
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	ce 01       	movw	r24, r28
    16ca:	01 96       	adiw	r24, 0x01	; 1
    16cc:	0e 94 a1 09 	call	0x1342	; 0x1342 <DIO_pin_direction_intialize>
    16d0:	81 2b       	or	r24, r17
				/* Enable the External interrupt */
				EXT_INT0_InterruptEnable();
    16d2:	9b b7       	in	r25, 0x3b	; 59
    16d4:	90 64       	ori	r25, 0x40	; 64
    16d6:	9b bf       	out	0x3b, r25	; 59
				break;
    16d8:	36 c0       	rjmp	.+108    	; 0x1746 <EXT_INTx_Init+0xc6>
				
			case INTERRUPT_EXTERNAL_INT1:
			
				/* Disable the External interrupt */
				EXT_INT1_InterruptDisable();
    16da:	2b b7       	in	r18, 0x3b	; 59
    16dc:	2f 77       	andi	r18, 0x7F	; 127
    16de:	2b bf       	out	0x3b, r18	; 59
				/* Clear Interrupt Flag : External interrupt did not occur */
				EXT_INT1_InterruptFlagClear();
    16e0:	2a b7       	in	r18, 0x3a	; 58
    16e2:	20 68       	ori	r18, 0x80	; 128
    16e4:	2a bf       	out	0x3a, r18	; 58
				/* Configure External interrupt edge */
				ret = EXT_INTx_setEdgeType(Interrupt_Config_Ptr->edge,INTERRUPT_EXTERNAL_INT1);
    16e6:	61 e0       	ldi	r22, 0x01	; 1
    16e8:	80 81       	ld	r24, Z
    16ea:	0e 94 c8 0a 	call	0x1590	; 0x1590 <EXT_INTx_setEdgeType>
    16ee:	18 2f       	mov	r17, r24
				/* Configure External interrupt I/O pin */
				pin_config_t INT1_PIN={.pin=PIN3,.port=PORTD_INDEX};
    16f0:	83 e0       	ldi	r24, 0x03	; 3
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	8a 83       	std	Y+2, r24	; 0x02
				ret |= DIO_pin_direction_intialize(&INT1_PIN,DIO_DIRECTION_INPUT);
    16f6:	60 e0       	ldi	r22, 0x00	; 0
    16f8:	ce 01       	movw	r24, r28
    16fa:	01 96       	adiw	r24, 0x01	; 1
    16fc:	0e 94 a1 09 	call	0x1342	; 0x1342 <DIO_pin_direction_intialize>
    1700:	81 2b       	or	r24, r17
				/* Enable the External interrupt */
				EXT_INT1_InterruptEnable();
    1702:	9b b7       	in	r25, 0x3b	; 59
    1704:	90 68       	ori	r25, 0x80	; 128
    1706:	9b bf       	out	0x3b, r25	; 59
				break;
    1708:	1e c0       	rjmp	.+60     	; 0x1746 <EXT_INTx_Init+0xc6>
				
				
			case INTERRUPT_EXTERNAL_INT2:
			
				/* Disable the External interrupt */
				EXT_INT2_InterruptDisable();
    170a:	2b b7       	in	r18, 0x3b	; 59
    170c:	2f 7d       	andi	r18, 0xDF	; 223
    170e:	2b bf       	out	0x3b, r18	; 59
				/* Clear Interrupt Flag : External interrupt did not occur */
				EXT_INT2_InterruptFlagClear();
    1710:	2a b7       	in	r18, 0x3a	; 58
    1712:	20 62       	ori	r18, 0x20	; 32
    1714:	2a bf       	out	0x3a, r18	; 58
				/* Configure External interrupt edge */
				ret = EXT_INTx_setEdgeType(Interrupt_Config_Ptr->edge,INTERRUPT_EXTERNAL_INT2);
    1716:	62 e0       	ldi	r22, 0x02	; 2
    1718:	80 81       	ld	r24, Z
    171a:	0e 94 c8 0a 	call	0x1590	; 0x1590 <EXT_INTx_setEdgeType>
    171e:	18 2f       	mov	r17, r24
				/* Configure External interrupt I/O pin */
				pin_config_t INT2_PIN={.pin=PIN2,.port=PORTB};
    1720:	88 b3       	in	r24, 0x18	; 24
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	82 e0       	ldi	r24, 0x02	; 2
    1726:	8a 83       	std	Y+2, r24	; 0x02
				ret |= DIO_pin_direction_intialize(&INT2_PIN,DIO_DIRECTION_INPUT);
    1728:	60 e0       	ldi	r22, 0x00	; 0
    172a:	ce 01       	movw	r24, r28
    172c:	01 96       	adiw	r24, 0x01	; 1
    172e:	0e 94 a1 09 	call	0x1342	; 0x1342 <DIO_pin_direction_intialize>
    1732:	81 2b       	or	r24, r17
				/* Enable the External interrupt */
				EXT_INT1_InterruptEnable();
    1734:	9b b7       	in	r25, 0x3b	; 59
    1736:	90 68       	ori	r25, 0x80	; 128
    1738:	9b bf       	out	0x3b, r25	; 59
				break;
    173a:	05 c0       	rjmp	.+10     	; 0x1746 <EXT_INTx_Init+0xc6>
				
			default:
				ret = E_NOT_OK;
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	03 c0       	rjmp	.+6      	; 0x1746 <EXT_INTx_Init+0xc6>
Std_ReturnType EXT_INTx_Init(const Interrupt_Config_t *Interrupt_Config_Ptr )
{
	Std_ReturnType ret = E_OK;
	if((NULL == Interrupt_Config_Ptr) || (Interrupt_Config_Ptr->source_id > NUM_OF_EXT_INTx - 1))
	{
		ret = E_NOT_OK;
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	01 c0       	rjmp	.+2      	; 0x1746 <EXT_INTx_Init+0xc6>
    1744:	80 e0       	ldi	r24, 0x00	; 0
				ret = E_NOT_OK;
				break;
		}
	}
	return ret;
}
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	1f 91       	pop	r17
    1750:	08 95       	ret

00001752 <TIMERx_selectClk>:
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
	if( (en_a_timer_type >= INVALID_TIMER_TYPE) || (en_a_timer_clk >= INVALID_TIMER_CLK) )
    1752:	83 30       	cpi	r24, 0x03	; 3
    1754:	08 f0       	brcs	.+2      	; 0x1758 <TIMERx_selectClk+0x6>
    1756:	34 c1       	rjmp	.+616    	; 0x19c0 <TIMERx_selectClk+0x26e>
    1758:	6a 30       	cpi	r22, 0x0A	; 10
    175a:	08 f0       	brcs	.+2      	; 0x175e <TIMERx_selectClk+0xc>
    175c:	33 c1       	rjmp	.+614    	; 0x19c4 <TIMERx_selectClk+0x272>
	{
		l_ret = E_NOT_OK;
	}
	else
	{
		switch(en_a_timer_type)
    175e:	81 30       	cpi	r24, 0x01	; 1
    1760:	09 f4       	brne	.+2      	; 0x1764 <TIMERx_selectClk+0x12>
    1762:	68 c0       	rjmp	.+208    	; 0x1834 <TIMERx_selectClk+0xe2>
    1764:	20 f0       	brcs	.+8      	; 0x176e <TIMERx_selectClk+0x1c>
    1766:	82 30       	cpi	r24, 0x02	; 2
    1768:	09 f4       	brne	.+2      	; 0x176c <TIMERx_selectClk+0x1a>
    176a:	c7 c0       	rjmp	.+398    	; 0x18fa <TIMERx_selectClk+0x1a8>
    176c:	2d c1       	rjmp	.+602    	; 0x19c8 <TIMERx_selectClk+0x276>
		{
			case Timer0:
				switch(en_a_timer_clk)
    176e:	86 2f       	mov	r24, r22
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	8a 30       	cpi	r24, 0x0A	; 10
    1774:	91 05       	cpc	r25, r1
    1776:	08 f0       	brcs	.+2      	; 0x177a <TIMERx_selectClk+0x28>
    1778:	29 c1       	rjmp	.+594    	; 0x19cc <TIMERx_selectClk+0x27a>
    177a:	fc 01       	movw	r30, r24
    177c:	ee 5c       	subi	r30, 0xCE	; 206
    177e:	ff 4f       	sbci	r31, 0xFF	; 255
    1780:	0c 94 10 11 	jmp	0x2220	; 0x2220 <__tablejump2__>
				{
					case NO_CLOCK:
						CLEAR_BIT(TCCR0,CS00);
    1784:	83 b7       	in	r24, 0x33	; 51
    1786:	8e 7f       	andi	r24, 0xFE	; 254
    1788:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS01);
    178a:	83 b7       	in	r24, 0x33	; 51
    178c:	8d 7f       	andi	r24, 0xFD	; 253
    178e:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS02);
    1790:	83 b7       	in	r24, 0x33	; 51
    1792:	8b 7f       	andi	r24, 0xFB	; 251
    1794:	83 bf       	out	0x33, r24	; 51
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    1796:	81 e0       	ldi	r24, 0x01	; 1
				{
					case NO_CLOCK:
						CLEAR_BIT(TCCR0,CS00);
						CLEAR_BIT(TCCR0,CS01);
						CLEAR_BIT(TCCR0,CS02);
						break;
    1798:	08 95       	ret
					case F_CPU_CLOCK:
						SET_BIT(TCCR0,CS00);
    179a:	83 b7       	in	r24, 0x33	; 51
    179c:	81 60       	ori	r24, 0x01	; 1
    179e:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS01);
    17a0:	83 b7       	in	r24, 0x33	; 51
    17a2:	8d 7f       	andi	r24, 0xFD	; 253
    17a4:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS02);
    17a6:	83 b7       	in	r24, 0x33	; 51
    17a8:	8b 7f       	andi	r24, 0xFB	; 251
    17aa:	83 bf       	out	0x33, r24	; 51
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_CLOCK:
						SET_BIT(TCCR0,CS00);
						CLEAR_BIT(TCCR0,CS01);
						CLEAR_BIT(TCCR0,CS02);
						break;
    17ae:	08 95       	ret
					case F_CPU_8:
						CLEAR_BIT(TCCR0,CS00);
    17b0:	83 b7       	in	r24, 0x33	; 51
    17b2:	8e 7f       	andi	r24, 0xFE	; 254
    17b4:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS01);
    17b6:	83 b7       	in	r24, 0x33	; 51
    17b8:	82 60       	ori	r24, 0x02	; 2
    17ba:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS02);
    17bc:	83 b7       	in	r24, 0x33	; 51
    17be:	8b 7f       	andi	r24, 0xFB	; 251
    17c0:	83 bf       	out	0x33, r24	; 51
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    17c2:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_8:
						CLEAR_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						CLEAR_BIT(TCCR0,CS02);
						break;
    17c4:	08 95       	ret
					case F_CPU_64:
						SET_BIT(TCCR0,CS00);
    17c6:	83 b7       	in	r24, 0x33	; 51
    17c8:	81 60       	ori	r24, 0x01	; 1
    17ca:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS01);
    17cc:	83 b7       	in	r24, 0x33	; 51
    17ce:	82 60       	ori	r24, 0x02	; 2
    17d0:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS02);
    17d2:	83 b7       	in	r24, 0x33	; 51
    17d4:	8b 7f       	andi	r24, 0xFB	; 251
    17d6:	83 bf       	out	0x33, r24	; 51
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    17d8:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_64:
						SET_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						CLEAR_BIT(TCCR0,CS02);
						break;
    17da:	08 95       	ret
					case F_CPU_256:
						CLEAR_BIT(TCCR0,CS00);
    17dc:	83 b7       	in	r24, 0x33	; 51
    17de:	8e 7f       	andi	r24, 0xFE	; 254
    17e0:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS01);
    17e2:	83 b7       	in	r24, 0x33	; 51
    17e4:	8d 7f       	andi	r24, 0xFD	; 253
    17e6:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS02);
    17e8:	83 b7       	in	r24, 0x33	; 51
    17ea:	84 60       	ori	r24, 0x04	; 4
    17ec:	83 bf       	out	0x33, r24	; 51
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_256:
						CLEAR_BIT(TCCR0,CS00);
						CLEAR_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);
						break;
    17f0:	08 95       	ret
					case F_CPU_1024:
						SET_BIT(TCCR0,CS00);
    17f2:	83 b7       	in	r24, 0x33	; 51
    17f4:	81 60       	ori	r24, 0x01	; 1
    17f6:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS01);
    17f8:	83 b7       	in	r24, 0x33	; 51
    17fa:	8d 7f       	andi	r24, 0xFD	; 253
    17fc:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS02);	
    17fe:	83 b7       	in	r24, 0x33	; 51
    1800:	84 60       	ori	r24, 0x04	; 4
    1802:	83 bf       	out	0x33, r24	; 51
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    1804:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_1024:
						SET_BIT(TCCR0,CS00);
						CLEAR_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);	
						break;
    1806:	08 95       	ret
					case TIMER_EXTERNAL_CLK_FALLING_EDGE:
						CLEAR_BIT(TCCR0,CS00);
    1808:	83 b7       	in	r24, 0x33	; 51
    180a:	8e 7f       	andi	r24, 0xFE	; 254
    180c:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS01);
    180e:	83 b7       	in	r24, 0x33	; 51
    1810:	82 60       	ori	r24, 0x02	; 2
    1812:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS02);
    1814:	83 b7       	in	r24, 0x33	; 51
    1816:	84 60       	ori	r24, 0x04	; 4
    1818:	83 bf       	out	0x33, r24	; 51
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    181a:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case TIMER_EXTERNAL_CLK_FALLING_EDGE:
						CLEAR_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);
						break;
    181c:	08 95       	ret
					case TIMER_EXTERNAL_CLK_RISING_EDGE:
						SET_BIT(TCCR0,CS00);
    181e:	83 b7       	in	r24, 0x33	; 51
    1820:	81 60       	ori	r24, 0x01	; 1
    1822:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS01);
    1824:	83 b7       	in	r24, 0x33	; 51
    1826:	82 60       	ori	r24, 0x02	; 2
    1828:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS02);
    182a:	83 b7       	in	r24, 0x33	; 51
    182c:	84 60       	ori	r24, 0x04	; 4
    182e:	83 bf       	out	0x33, r24	; 51
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    1830:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case TIMER_EXTERNAL_CLK_RISING_EDGE:
						SET_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);
						break;
    1832:	08 95       	ret
						break;
				}
				break;
				
			case Timer1:
				switch(en_a_timer_clk)
    1834:	86 2f       	mov	r24, r22
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	8a 30       	cpi	r24, 0x0A	; 10
    183a:	91 05       	cpc	r25, r1
    183c:	08 f0       	brcs	.+2      	; 0x1840 <TIMERx_selectClk+0xee>
    183e:	c8 c0       	rjmp	.+400    	; 0x19d0 <TIMERx_selectClk+0x27e>
    1840:	fc 01       	movw	r30, r24
    1842:	e4 5c       	subi	r30, 0xC4	; 196
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	0c 94 10 11 	jmp	0x2220	; 0x2220 <__tablejump2__>
				{
					case NO_CLOCK:
						CLEAR_BIT(TCCR1B,CS10);
    184a:	8e b5       	in	r24, 0x2e	; 46
    184c:	8e 7f       	andi	r24, 0xFE	; 254
    184e:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS11);
    1850:	8e b5       	in	r24, 0x2e	; 46
    1852:	8d 7f       	andi	r24, 0xFD	; 253
    1854:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS12);
    1856:	8e b5       	in	r24, 0x2e	; 46
    1858:	8b 7f       	andi	r24, 0xFB	; 251
    185a:	8e bd       	out	0x2e, r24	; 46
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    185c:	81 e0       	ldi	r24, 0x01	; 1
				{
					case NO_CLOCK:
						CLEAR_BIT(TCCR1B,CS10);
						CLEAR_BIT(TCCR1B,CS11);
						CLEAR_BIT(TCCR1B,CS12);
						break;
    185e:	08 95       	ret
					case F_CPU_CLOCK:
						SET_BIT(TCCR1B,CS10);
    1860:	8e b5       	in	r24, 0x2e	; 46
    1862:	81 60       	ori	r24, 0x01	; 1
    1864:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS11);
    1866:	8e b5       	in	r24, 0x2e	; 46
    1868:	8d 7f       	andi	r24, 0xFD	; 253
    186a:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS12);
    186c:	8e b5       	in	r24, 0x2e	; 46
    186e:	8b 7f       	andi	r24, 0xFB	; 251
    1870:	8e bd       	out	0x2e, r24	; 46
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    1872:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_CLOCK:
						SET_BIT(TCCR1B,CS10);
						CLEAR_BIT(TCCR1B,CS11);
						CLEAR_BIT(TCCR1B,CS12);
						break;
    1874:	08 95       	ret
					case F_CPU_8:
						CLEAR_BIT(TCCR1B,CS10);
    1876:	8e b5       	in	r24, 0x2e	; 46
    1878:	8e 7f       	andi	r24, 0xFE	; 254
    187a:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS11);
    187c:	8e b5       	in	r24, 0x2e	; 46
    187e:	82 60       	ori	r24, 0x02	; 2
    1880:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS12);
    1882:	8e b5       	in	r24, 0x2e	; 46
    1884:	8b 7f       	andi	r24, 0xFB	; 251
    1886:	8e bd       	out	0x2e, r24	; 46
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    1888:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_8:
						CLEAR_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						CLEAR_BIT(TCCR1B,CS12);
						break;
    188a:	08 95       	ret
					case F_CPU_64:
						SET_BIT(TCCR1B,CS10);
    188c:	8e b5       	in	r24, 0x2e	; 46
    188e:	81 60       	ori	r24, 0x01	; 1
    1890:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS11);
    1892:	8e b5       	in	r24, 0x2e	; 46
    1894:	82 60       	ori	r24, 0x02	; 2
    1896:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS12);
    1898:	8e b5       	in	r24, 0x2e	; 46
    189a:	8b 7f       	andi	r24, 0xFB	; 251
    189c:	8e bd       	out	0x2e, r24	; 46
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    189e:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_64:
						SET_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						CLEAR_BIT(TCCR1B,CS12);
						break;
    18a0:	08 95       	ret
					case F_CPU_256:
						CLEAR_BIT(TCCR1B,CS10);
    18a2:	8e b5       	in	r24, 0x2e	; 46
    18a4:	8e 7f       	andi	r24, 0xFE	; 254
    18a6:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS11);
    18a8:	8e b5       	in	r24, 0x2e	; 46
    18aa:	8d 7f       	andi	r24, 0xFD	; 253
    18ac:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS12);
    18ae:	8e b5       	in	r24, 0x2e	; 46
    18b0:	84 60       	ori	r24, 0x04	; 4
    18b2:	8e bd       	out	0x2e, r24	; 46
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    18b4:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_256:
						CLEAR_BIT(TCCR1B,CS10);
						CLEAR_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);
						break;
    18b6:	08 95       	ret
					case F_CPU_1024:
						SET_BIT(TCCR1B,CS10);
    18b8:	8e b5       	in	r24, 0x2e	; 46
    18ba:	81 60       	ori	r24, 0x01	; 1
    18bc:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS11);
    18be:	8e b5       	in	r24, 0x2e	; 46
    18c0:	8d 7f       	andi	r24, 0xFD	; 253
    18c2:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS12);	
    18c4:	8e b5       	in	r24, 0x2e	; 46
    18c6:	84 60       	ori	r24, 0x04	; 4
    18c8:	8e bd       	out	0x2e, r24	; 46
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_1024:
						SET_BIT(TCCR1B,CS10);
						CLEAR_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);	
						break;
    18cc:	08 95       	ret
					case TIMER_EXTERNAL_CLK_FALLING_EDGE:
						CLEAR_BIT(TCCR1B,CS10);
    18ce:	8e b5       	in	r24, 0x2e	; 46
    18d0:	8e 7f       	andi	r24, 0xFE	; 254
    18d2:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS11);
    18d4:	8e b5       	in	r24, 0x2e	; 46
    18d6:	82 60       	ori	r24, 0x02	; 2
    18d8:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS12);
    18da:	8e b5       	in	r24, 0x2e	; 46
    18dc:	84 60       	ori	r24, 0x04	; 4
    18de:	8e bd       	out	0x2e, r24	; 46
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case TIMER_EXTERNAL_CLK_FALLING_EDGE:
						CLEAR_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);
						break;
    18e2:	08 95       	ret
					case TIMER_EXTERNAL_CLK_RISING_EDGE:
						SET_BIT(TCCR1B,CS10);
    18e4:	8e b5       	in	r24, 0x2e	; 46
    18e6:	81 60       	ori	r24, 0x01	; 1
    18e8:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS11);
    18ea:	8e b5       	in	r24, 0x2e	; 46
    18ec:	82 60       	ori	r24, 0x02	; 2
    18ee:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS12);
    18f0:	8e b5       	in	r24, 0x2e	; 46
    18f2:	84 60       	ori	r24, 0x04	; 4
    18f4:	8e bd       	out	0x2e, r24	; 46
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case TIMER_EXTERNAL_CLK_RISING_EDGE:
						SET_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);
						break;
    18f8:	08 95       	ret
						break;
				}			
				break;
				
			case Timer2:
				switch(en_a_timer_clk)
    18fa:	86 2f       	mov	r24, r22
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	88 30       	cpi	r24, 0x08	; 8
    1900:	91 05       	cpc	r25, r1
    1902:	08 f0       	brcs	.+2      	; 0x1906 <TIMERx_selectClk+0x1b4>
    1904:	67 c0       	rjmp	.+206    	; 0x19d4 <TIMERx_selectClk+0x282>
    1906:	fc 01       	movw	r30, r24
    1908:	ea 5b       	subi	r30, 0xBA	; 186
    190a:	ff 4f       	sbci	r31, 0xFF	; 255
    190c:	0c 94 10 11 	jmp	0x2220	; 0x2220 <__tablejump2__>
				{
					case NO_CLOCK:
						CLEAR_BIT(TCCR2,CS20);
    1910:	85 b5       	in	r24, 0x25	; 37
    1912:	8e 7f       	andi	r24, 0xFE	; 254
    1914:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS21);
    1916:	85 b5       	in	r24, 0x25	; 37
    1918:	8d 7f       	andi	r24, 0xFD	; 253
    191a:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS22);
    191c:	85 b5       	in	r24, 0x25	; 37
    191e:	8b 7f       	andi	r24, 0xFB	; 251
    1920:	85 bd       	out	0x25, r24	; 37
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    1922:	81 e0       	ldi	r24, 0x01	; 1
				{
					case NO_CLOCK:
						CLEAR_BIT(TCCR2,CS20);
						CLEAR_BIT(TCCR2,CS21);
						CLEAR_BIT(TCCR2,CS22);
						break;
    1924:	08 95       	ret
					case F_CPU_CLOCK:
						SET_BIT(TCCR2,CS20);
    1926:	85 b5       	in	r24, 0x25	; 37
    1928:	81 60       	ori	r24, 0x01	; 1
    192a:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS21);
    192c:	85 b5       	in	r24, 0x25	; 37
    192e:	8d 7f       	andi	r24, 0xFD	; 253
    1930:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS22);
    1932:	85 b5       	in	r24, 0x25	; 37
    1934:	8b 7f       	andi	r24, 0xFB	; 251
    1936:	85 bd       	out	0x25, r24	; 37
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    1938:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_CLOCK:
						SET_BIT(TCCR2,CS20);
						CLEAR_BIT(TCCR2,CS21);
						CLEAR_BIT(TCCR2,CS22);
						break;
    193a:	08 95       	ret
					case F_CPU_8:
						CLEAR_BIT(TCCR2,CS20);
    193c:	85 b5       	in	r24, 0x25	; 37
    193e:	8e 7f       	andi	r24, 0xFE	; 254
    1940:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS21);
    1942:	85 b5       	in	r24, 0x25	; 37
    1944:	82 60       	ori	r24, 0x02	; 2
    1946:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS22);
    1948:	85 b5       	in	r24, 0x25	; 37
    194a:	8b 7f       	andi	r24, 0xFB	; 251
    194c:	85 bd       	out	0x25, r24	; 37
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    194e:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_8:
						CLEAR_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						CLEAR_BIT(TCCR2,CS22);
						break;
    1950:	08 95       	ret
					case F_CPU_32:
						SET_BIT(TCCR2,CS20);
    1952:	85 b5       	in	r24, 0x25	; 37
    1954:	81 60       	ori	r24, 0x01	; 1
    1956:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS21);
    1958:	85 b5       	in	r24, 0x25	; 37
    195a:	82 60       	ori	r24, 0x02	; 2
    195c:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS22);
    195e:	85 b5       	in	r24, 0x25	; 37
    1960:	8b 7f       	andi	r24, 0xFB	; 251
    1962:	85 bd       	out	0x25, r24	; 37
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    1964:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_32:
						SET_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						CLEAR_BIT(TCCR2,CS22);
						break;
    1966:	08 95       	ret
					case F_CPU_64:
						CLEAR_BIT(TCCR2,CS20);
    1968:	85 b5       	in	r24, 0x25	; 37
    196a:	8e 7f       	andi	r24, 0xFE	; 254
    196c:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS21);
    196e:	85 b5       	in	r24, 0x25	; 37
    1970:	8d 7f       	andi	r24, 0xFD	; 253
    1972:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS22);
    1974:	85 b5       	in	r24, 0x25	; 37
    1976:	84 60       	ori	r24, 0x04	; 4
    1978:	85 bd       	out	0x25, r24	; 37
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    197a:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_64:
						CLEAR_BIT(TCCR2,CS20);
						CLEAR_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);
						break;
    197c:	08 95       	ret
					case F_CPU_128:
						SET_BIT(TCCR2,CS20);
    197e:	85 b5       	in	r24, 0x25	; 37
    1980:	81 60       	ori	r24, 0x01	; 1
    1982:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS21);
    1984:	85 b5       	in	r24, 0x25	; 37
    1986:	8d 7f       	andi	r24, 0xFD	; 253
    1988:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS22);
    198a:	85 b5       	in	r24, 0x25	; 37
    198c:	84 60       	ori	r24, 0x04	; 4
    198e:	85 bd       	out	0x25, r24	; 37
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    1990:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_128:
						SET_BIT(TCCR2,CS20);
						CLEAR_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);
						break;
    1992:	08 95       	ret
					case F_CPU_256:
						CLEAR_BIT(TCCR2,CS20);
    1994:	85 b5       	in	r24, 0x25	; 37
    1996:	8e 7f       	andi	r24, 0xFE	; 254
    1998:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS21);
    199a:	85 b5       	in	r24, 0x25	; 37
    199c:	82 60       	ori	r24, 0x02	; 2
    199e:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS22);
    19a0:	85 b5       	in	r24, 0x25	; 37
    19a2:	84 60       	ori	r24, 0x04	; 4
    19a4:	85 bd       	out	0x25, r24	; 37
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_256:
						CLEAR_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);
						break;
    19a8:	08 95       	ret
					case F_CPU_1024:
						SET_BIT(TCCR2,CS20);
    19aa:	85 b5       	in	r24, 0x25	; 37
    19ac:	81 60       	ori	r24, 0x01	; 1
    19ae:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS21);
    19b0:	85 b5       	in	r24, 0x25	; 37
    19b2:	82 60       	ori	r24, 0x02	; 2
    19b4:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS22);	
    19b6:	85 b5       	in	r24, 0x25	; 37
    19b8:	84 60       	ori	r24, 0x04	; 4
    19ba:	85 bd       	out	0x25, r24	; 37
	return l_ret;
}

static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
						break;
					case F_CPU_1024:
						SET_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);	
						break;
    19be:	08 95       	ret
static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk)
{
	Std_ReturnType l_ret = E_OK;
	if( (en_a_timer_type >= INVALID_TIMER_TYPE) || (en_a_timer_clk >= INVALID_TIMER_CLK) )
	{
		l_ret = E_NOT_OK;
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	08 95       	ret
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	08 95       	ret
						break;
				}
				break;
				
			default:
				l_ret |= E_NOT_OK;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	08 95       	ret
						SET_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);
						break;
					default:
						l_ret = E_NOT_OK;
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	08 95       	ret
						SET_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);
						break;
					default:
						l_ret = E_NOT_OK;
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	08 95       	ret
						SET_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);	
						break;
					default:
						l_ret = E_NOT_OK;
    19d4:	80 e0       	ldi	r24, 0x00	; 0
				l_ret |= E_NOT_OK;
				break;
		}
	}
	return l_ret;
}
    19d6:	08 95       	ret

000019d8 <TIMERx_setTimerMode>:


static Std_ReturnType TIMERx_setTimerMode(const Timer_Config_t *stPtr_a_Config)
{
	Std_ReturnType l_ret = E_OK;
	if( (stPtr_a_Config == NULL) || (stPtr_a_Config->timer_type >= INVALID_TIMER_TYPE) || (stPtr_a_Config->timer_mode >= INVALID_TIMER_MODE) ||
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	09 f4       	brne	.+2      	; 0x19de <TIMERx_setTimerMode+0x6>
    19dc:	7d c2       	rjmp	.+1274   	; 0x1ed8 <TIMERx_setTimerMode+0x500>
    19de:	fc 01       	movw	r30, r24
    19e0:	20 81       	ld	r18, Z
    19e2:	23 30       	cpi	r18, 0x03	; 3
    19e4:	08 f0       	brcs	.+2      	; 0x19e8 <TIMERx_setTimerMode+0x10>
    19e6:	7a c2       	rjmp	.+1268   	; 0x1edc <TIMERx_setTimerMode+0x504>
    19e8:	32 81       	ldd	r19, Z+2	; 0x02
    19ea:	34 30       	cpi	r19, 0x04	; 4
    19ec:	08 f0       	brcs	.+2      	; 0x19f0 <TIMERx_setTimerMode+0x18>
    19ee:	78 c2       	rjmp	.+1264   	; 0x1ee0 <TIMERx_setTimerMode+0x508>
	    (stPtr_a_Config->output_compare_mode >=CTC_INVALID_TIMER_OUTPUT_COMPARE_MODE ) )
    19f0:	43 81       	ldd	r20, Z+3	; 0x03


static Std_ReturnType TIMERx_setTimerMode(const Timer_Config_t *stPtr_a_Config)
{
	Std_ReturnType l_ret = E_OK;
	if( (stPtr_a_Config == NULL) || (stPtr_a_Config->timer_type >= INVALID_TIMER_TYPE) || (stPtr_a_Config->timer_mode >= INVALID_TIMER_MODE) ||
    19f2:	44 30       	cpi	r20, 0x04	; 4
    19f4:	08 f0       	brcs	.+2      	; 0x19f8 <TIMERx_setTimerMode+0x20>
    19f6:	76 c2       	rjmp	.+1260   	; 0x1ee4 <TIMERx_setTimerMode+0x50c>
	{
		l_ret = E_NOT_OK;
	}
	else
	{
		switch(stPtr_a_Config->timer_type)
    19f8:	21 30       	cpi	r18, 0x01	; 1
    19fa:	09 f4       	brne	.+2      	; 0x19fe <TIMERx_setTimerMode+0x26>
    19fc:	a6 c0       	rjmp	.+332    	; 0x1b4a <TIMERx_setTimerMode+0x172>
    19fe:	20 f0       	brcs	.+8      	; 0x1a08 <TIMERx_setTimerMode+0x30>
    1a00:	22 30       	cpi	r18, 0x02	; 2
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <TIMERx_setTimerMode+0x2e>
    1a04:	c8 c1       	rjmp	.+912    	; 0x1d96 <TIMERx_setTimerMode+0x3be>
    1a06:	70 c2       	rjmp	.+1248   	; 0x1ee8 <TIMERx_setTimerMode+0x510>
		{
			case Timer0:
				switch(stPtr_a_Config->timer_mode)
    1a08:	31 30       	cpi	r19, 0x01	; 1
    1a0a:	d9 f0       	breq	.+54     	; 0x1a42 <TIMERx_setTimerMode+0x6a>
    1a0c:	30 f0       	brcs	.+12     	; 0x1a1a <TIMERx_setTimerMode+0x42>
    1a0e:	32 30       	cpi	r19, 0x02	; 2
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <TIMERx_setTimerMode+0x3c>
    1a12:	65 c0       	rjmp	.+202    	; 0x1ade <TIMERx_setTimerMode+0x106>
    1a14:	33 30       	cpi	r19, 0x03	; 3
    1a16:	e1 f1       	breq	.+120    	; 0x1a90 <TIMERx_setTimerMode+0xb8>
    1a18:	69 c2       	rjmp	.+1234   	; 0x1eec <TIMERx_setTimerMode+0x514>
				{
					case TIMER_NORMAL_MODE:
						/*Make FOC0 to be Active as it is overflow mode(for non-PWM mode)*/
						SET_BIT(TCCR0,FOC0);
    1a1a:	83 b7       	in	r24, 0x33	; 51
    1a1c:	80 68       	ori	r24, 0x80	; 128
    1a1e:	83 bf       	out	0x33, r24	; 51
						/*Normal Overflow mode*/
						CLEAR_BIT(TCCR0,WGM00);
    1a20:	83 b7       	in	r24, 0x33	; 51
    1a22:	8f 7b       	andi	r24, 0xBF	; 191
    1a24:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,WGM01);
    1a26:	83 b7       	in	r24, 0x33	; 51
    1a28:	87 7f       	andi	r24, 0xF7	; 247
    1a2a:	83 bf       	out	0x33, r24	; 51
						/*Normal port operation, OC0 disconnected*/
						CLEAR_BIT(TCCR0,COM00);
    1a2c:	83 b7       	in	r24, 0x33	; 51
    1a2e:	8f 7e       	andi	r24, 0xEF	; 239
    1a30:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,COM01);
    1a32:	83 b7       	in	r24, 0x33	; 51
    1a34:	8f 7d       	andi	r24, 0xDF	; 223
    1a36:	83 bf       	out	0x33, r24	; 51
						/* Enable Timer0 overflow interrupt*/
						SET_BIT(TIMSK,TOIE0);
    1a38:	89 b7       	in	r24, 0x39	; 57
    1a3a:	81 60       	ori	r24, 0x01	; 1
    1a3c:	89 bf       	out	0x39, r24	; 57
}


static Std_ReturnType TIMERx_setTimerMode(const Timer_Config_t *stPtr_a_Config)
{
	Std_ReturnType l_ret = E_OK;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
						/*Normal port operation, OC0 disconnected*/
						CLEAR_BIT(TCCR0,COM00);
						CLEAR_BIT(TCCR0,COM01);
						/* Enable Timer0 overflow interrupt*/
						SET_BIT(TIMSK,TOIE0);
						break;
    1a40:	08 95       	ret
					case TIMER_PHASE_CORRECT_PWM_MODE:
						/*PWM Phase Correct*/
						SET_BIT(TCCR0,WGM00);
    1a42:	23 b7       	in	r18, 0x33	; 51
    1a44:	20 64       	ori	r18, 0x40	; 64
    1a46:	23 bf       	out	0x33, r18	; 51
						CLEAR_BIT(TCCR0,WGM01);
    1a48:	23 b7       	in	r18, 0x33	; 51
    1a4a:	27 7f       	andi	r18, 0xF7	; 247
    1a4c:	23 bf       	out	0x33, r18	; 51
						/*Compare Output Mode, Phase Correct PWM Mode*/
						switch(stPtr_a_Config->phase_correct_pwm_mode)
    1a4e:	fc 01       	movw	r30, r24
    1a50:	25 81       	ldd	r18, Z+5	; 0x05
    1a52:	22 30       	cpi	r18, 0x02	; 2
    1a54:	59 f0       	breq	.+22     	; 0x1a6c <TIMERx_setTimerMode+0x94>
    1a56:	23 30       	cpi	r18, 0x03	; 3
    1a58:	81 f0       	breq	.+32     	; 0x1a7a <TIMERx_setTimerMode+0xa2>
    1a5a:	21 11       	cpse	r18, r1
    1a5c:	14 c0       	rjmp	.+40     	; 0x1a86 <TIMERx_setTimerMode+0xae>
						{
							case PC_Output_Compare_Mode_DISCONNECTED:
								/* Normal port operation, OC0 disconnected.*/
								CLEAR_BIT(TCCR0,COM00);
    1a5e:	23 b7       	in	r18, 0x33	; 51
    1a60:	2f 7e       	andi	r18, 0xEF	; 239
    1a62:	23 bf       	out	0x33, r18	; 51
								CLEAR_BIT(TCCR0,COM01);
    1a64:	23 b7       	in	r18, 0x33	; 51
    1a66:	2f 7d       	andi	r18, 0xDF	; 223
    1a68:	23 bf       	out	0x33, r18	; 51
								break;
    1a6a:	0d c0       	rjmp	.+26     	; 0x1a86 <TIMERx_setTimerMode+0xae>
							case PC_Output_Compare_Mode_NON_INVERTED:
								/*Clear OC0 on compare match when up-counting Set OC0 on compare match when down counting*/
								CLEAR_BIT(TCCR0,COM00);
    1a6c:	23 b7       	in	r18, 0x33	; 51
    1a6e:	2f 7e       	andi	r18, 0xEF	; 239
    1a70:	23 bf       	out	0x33, r18	; 51
								SET_BIT(TCCR0,COM01);
    1a72:	23 b7       	in	r18, 0x33	; 51
    1a74:	20 62       	ori	r18, 0x20	; 32
    1a76:	23 bf       	out	0x33, r18	; 51
								break;
    1a78:	06 c0       	rjmp	.+12     	; 0x1a86 <TIMERx_setTimerMode+0xae>
							case PC_Output_Compare_Mode_INVERTED:
							/*Set OC0 on compare match when up-counting Clear OC0 on compare match when down counting*/
								SET_BIT(TCCR0,COM00);
    1a7a:	23 b7       	in	r18, 0x33	; 51
    1a7c:	20 61       	ori	r18, 0x10	; 16
    1a7e:	23 bf       	out	0x33, r18	; 51
								SET_BIT(TCCR0,COM01);
    1a80:	23 b7       	in	r18, 0x33	; 51
    1a82:	20 62       	ori	r18, 0x20	; 32
    1a84:	23 bf       	out	0x33, r18	; 51
							default: 
								l_ret |= E_NOT_OK;
								break;
						}
						 /*The Output Compare Register contains an 8-bit value that is continuously compared with the  counter value (TCNT0) */
						 OCR0 =(uint8_t) stPtr_a_Config->timer_compare_MatchValue & U8_BIT_REG_MASK;
    1a86:	fc 01       	movw	r30, r24
    1a88:	80 85       	ldd	r24, Z+8	; 0x08
    1a8a:	8c bf       	out	0x3c, r24	; 60
						break;
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	08 95       	ret
						
					case TIMER_FAST_PWM_MODE:
						/*Fast PWM*/
						SET_BIT(TCCR0,WGM00);
    1a90:	23 b7       	in	r18, 0x33	; 51
    1a92:	20 64       	ori	r18, 0x40	; 64
    1a94:	23 bf       	out	0x33, r18	; 51
						SET_BIT(TCCR0,WGM01);
    1a96:	23 b7       	in	r18, 0x33	; 51
    1a98:	28 60       	ori	r18, 0x08	; 8
    1a9a:	23 bf       	out	0x33, r18	; 51
						/*Compare Output Mode, Fast PWM Mode*/
						switch(stPtr_a_Config->fast_pwm_mode)
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	24 81       	ldd	r18, Z+4	; 0x04
    1aa0:	22 30       	cpi	r18, 0x02	; 2
    1aa2:	59 f0       	breq	.+22     	; 0x1aba <TIMERx_setTimerMode+0xe2>
    1aa4:	23 30       	cpi	r18, 0x03	; 3
    1aa6:	81 f0       	breq	.+32     	; 0x1ac8 <TIMERx_setTimerMode+0xf0>
    1aa8:	21 11       	cpse	r18, r1
    1aaa:	14 c0       	rjmp	.+40     	; 0x1ad4 <TIMERx_setTimerMode+0xfc>
						{
							case FAST_Output_Compare_Mode_DISCONNECTED:
								/* Normal port operation, OC0 disconnected.*/
								CLEAR_BIT(TCCR0,COM00);
    1aac:	23 b7       	in	r18, 0x33	; 51
    1aae:	2f 7e       	andi	r18, 0xEF	; 239
    1ab0:	23 bf       	out	0x33, r18	; 51
								CLEAR_BIT(TCCR0,COM01);
    1ab2:	23 b7       	in	r18, 0x33	; 51
    1ab4:	2f 7d       	andi	r18, 0xDF	; 223
    1ab6:	23 bf       	out	0x33, r18	; 51
								break;
    1ab8:	0d c0       	rjmp	.+26     	; 0x1ad4 <TIMERx_setTimerMode+0xfc>
							case FAST_Output_Compare_Mode_NON_INVERTED:
								/*Clear OC0 on compare match, set OC0 at BOTTOM*/
								CLEAR_BIT(TCCR0,COM00);
    1aba:	23 b7       	in	r18, 0x33	; 51
    1abc:	2f 7e       	andi	r18, 0xEF	; 239
    1abe:	23 bf       	out	0x33, r18	; 51
								SET_BIT(TCCR0,COM01);
    1ac0:	23 b7       	in	r18, 0x33	; 51
    1ac2:	20 62       	ori	r18, 0x20	; 32
    1ac4:	23 bf       	out	0x33, r18	; 51
								break;
    1ac6:	06 c0       	rjmp	.+12     	; 0x1ad4 <TIMERx_setTimerMode+0xfc>
							case FAST_Output_Compare_Mode_INVERTED:
							/*Set OC0 on compare match, clear OC0 at BOTTOM*/
								SET_BIT(TCCR0,COM00);
    1ac8:	23 b7       	in	r18, 0x33	; 51
    1aca:	20 61       	ori	r18, 0x10	; 16
    1acc:	23 bf       	out	0x33, r18	; 51
								SET_BIT(TCCR0,COM01);
    1ace:	23 b7       	in	r18, 0x33	; 51
    1ad0:	20 62       	ori	r18, 0x20	; 32
    1ad2:	23 bf       	out	0x33, r18	; 51
							default: 
								l_ret |= E_NOT_OK;
								break;
						}
						 /*The Output Compare Register contains an 8-bit value that is continuously compared with the  counter value (TCNT0) */
						 OCR0 = stPtr_a_Config->timer_compare_MatchValue & U8_BIT_REG_MASK;
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	80 85       	ldd	r24, Z+8	; 0x08
    1ad8:	8c bf       	out	0x3c, r24	; 60
						break;
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	08 95       	ret
						
					case TIMER_CTC_MODE:
						/*Make FOC0 to be Active as it is CTC mode(for non-PWM mode)*/
						SET_BIT(TCCR0,FOC0);
    1ade:	23 b7       	in	r18, 0x33	; 51
    1ae0:	20 68       	ori	r18, 0x80	; 128
    1ae2:	23 bf       	out	0x33, r18	; 51
						/*CTC Mode, non-PWM Mode*/
						CLEAR_BIT(TCCR0,WGM00);
    1ae4:	23 b7       	in	r18, 0x33	; 51
    1ae6:	2f 7b       	andi	r18, 0xBF	; 191
    1ae8:	23 bf       	out	0x33, r18	; 51
						SET_BIT(TCCR0,WGM01);
    1aea:	23 b7       	in	r18, 0x33	; 51
    1aec:	28 60       	ori	r18, 0x08	; 8
    1aee:	23 bf       	out	0x33, r18	; 51
						/*Compare Output Mode, non-PWM Mode*/
						switch(stPtr_a_Config->output_compare_mode)
    1af0:	fc 01       	movw	r30, r24
    1af2:	23 81       	ldd	r18, Z+3	; 0x03
    1af4:	21 30       	cpi	r18, 0x01	; 1
    1af6:	69 f0       	breq	.+26     	; 0x1b12 <TIMERx_setTimerMode+0x13a>
    1af8:	28 f0       	brcs	.+10     	; 0x1b04 <TIMERx_setTimerMode+0x12c>
    1afa:	22 30       	cpi	r18, 0x02	; 2
    1afc:	89 f0       	breq	.+34     	; 0x1b20 <TIMERx_setTimerMode+0x148>
    1afe:	23 30       	cpi	r18, 0x03	; 3
    1b00:	b1 f0       	breq	.+44     	; 0x1b2e <TIMERx_setTimerMode+0x156>
    1b02:	1b c0       	rjmp	.+54     	; 0x1b3a <TIMERx_setTimerMode+0x162>
						{
							case CTC_Output_Compare_Mode_DISCONNECTED:
								/* Normal port operation, OC0 disconnected.*/
								CLEAR_BIT(TCCR0,COM00);
    1b04:	23 b7       	in	r18, 0x33	; 51
    1b06:	2f 7e       	andi	r18, 0xEF	; 239
    1b08:	23 bf       	out	0x33, r18	; 51
								CLEAR_BIT(TCCR0,COM01);
    1b0a:	23 b7       	in	r18, 0x33	; 51
    1b0c:	2f 7d       	andi	r18, 0xDF	; 223
    1b0e:	23 bf       	out	0x33, r18	; 51
								break;
    1b10:	14 c0       	rjmp	.+40     	; 0x1b3a <TIMERx_setTimerMode+0x162>
							case CTC_Output_Compare_Mode_TOGGLE:
								/* Toggle OC0 on compare match*/
								SET_BIT(TCCR0,COM00);
    1b12:	23 b7       	in	r18, 0x33	; 51
    1b14:	20 61       	ori	r18, 0x10	; 16
    1b16:	23 bf       	out	0x33, r18	; 51
								CLEAR_BIT(TCCR0,COM01);
    1b18:	23 b7       	in	r18, 0x33	; 51
    1b1a:	2f 7d       	andi	r18, 0xDF	; 223
    1b1c:	23 bf       	out	0x33, r18	; 51
								break;
    1b1e:	0d c0       	rjmp	.+26     	; 0x1b3a <TIMERx_setTimerMode+0x162>
							case CTC_Output_Compare_Mode_CLEAR:
								/*Clear OC0 on compare match*/
								CLEAR_BIT(TCCR0,COM00);
    1b20:	23 b7       	in	r18, 0x33	; 51
    1b22:	2f 7e       	andi	r18, 0xEF	; 239
    1b24:	23 bf       	out	0x33, r18	; 51
								SET_BIT(TCCR0,COM01);
    1b26:	23 b7       	in	r18, 0x33	; 51
    1b28:	20 62       	ori	r18, 0x20	; 32
    1b2a:	23 bf       	out	0x33, r18	; 51
								break;
    1b2c:	06 c0       	rjmp	.+12     	; 0x1b3a <TIMERx_setTimerMode+0x162>
							case CTC_Output_Compare_SET:
							/*Set OC0 on compare match*/
								SET_BIT(TCCR0,COM00);
    1b2e:	23 b7       	in	r18, 0x33	; 51
    1b30:	20 61       	ori	r18, 0x10	; 16
    1b32:	23 bf       	out	0x33, r18	; 51
								SET_BIT(TCCR0,COM01);
    1b34:	23 b7       	in	r18, 0x33	; 51
    1b36:	20 62       	ori	r18, 0x20	; 32
    1b38:	23 bf       	out	0x33, r18	; 51
							default: 
								l_ret |= E_NOT_OK;
								break;
						}
					    /*The Output Compare Register contains an 8-bit value that is continuously compared with the  counter value (TCNT0) */
						OCR0 = stPtr_a_Config->timer_compare_MatchValue & U8_BIT_REG_MASK;	
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	80 85       	ldd	r24, Z+8	; 0x08
    1b3e:	8c bf       	out	0x3c, r24	; 60
						/* Enable Timer0 CTC mode interrupt*/
						SET_BIT(TIMSK,OCIE0);
    1b40:	89 b7       	in	r24, 0x39	; 57
    1b42:	82 60       	ori	r24, 0x02	; 2
    1b44:	89 bf       	out	0x39, r24	; 57
						break;
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	08 95       	ret
						break;
				}
				break;
				
			case Timer1:
				switch(stPtr_a_Config->timer_mode)
    1b4a:	31 30       	cpi	r19, 0x01	; 1
    1b4c:	59 f1       	breq	.+86     	; 0x1ba4 <TIMERx_setTimerMode+0x1cc>
    1b4e:	38 f0       	brcs	.+14     	; 0x1b5e <TIMERx_setTimerMode+0x186>
    1b50:	32 30       	cpi	r19, 0x02	; 2
    1b52:	09 f4       	brne	.+2      	; 0x1b56 <TIMERx_setTimerMode+0x17e>
    1b54:	c7 c0       	rjmp	.+398    	; 0x1ce4 <TIMERx_setTimerMode+0x30c>
    1b56:	33 30       	cpi	r19, 0x03	; 3
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <TIMERx_setTimerMode+0x184>
    1b5a:	74 c0       	rjmp	.+232    	; 0x1c44 <TIMERx_setTimerMode+0x26c>
    1b5c:	c9 c1       	rjmp	.+914    	; 0x1ef0 <TIMERx_setTimerMode+0x518>
				{
					case TIMER_NORMAL_MODE:
						/*Make FOC1A,FOC1B to be Active as it is overflow mode(for non-PWM mode)*/
						SET_BIT(TCCR1A,FOC1A);
    1b5e:	8f b5       	in	r24, 0x2f	; 47
    1b60:	88 60       	ori	r24, 0x08	; 8
    1b62:	8f bd       	out	0x2f, r24	; 47
						SET_BIT(TCCR1A,FOC1B);
    1b64:	8f b5       	in	r24, 0x2f	; 47
    1b66:	84 60       	ori	r24, 0x04	; 4
    1b68:	8f bd       	out	0x2f, r24	; 47
						/*Normal Overflow mode*/
						CLEAR_BIT(TCCR1A,WGM10);
    1b6a:	8f b5       	in	r24, 0x2f	; 47
    1b6c:	8e 7f       	andi	r24, 0xFE	; 254
    1b6e:	8f bd       	out	0x2f, r24	; 47
						CLEAR_BIT(TCCR1A,WGM11);
    1b70:	8f b5       	in	r24, 0x2f	; 47
    1b72:	8d 7f       	andi	r24, 0xFD	; 253
    1b74:	8f bd       	out	0x2f, r24	; 47
						CLEAR_BIT(TCCR1B,WGM12);
    1b76:	8e b5       	in	r24, 0x2e	; 46
    1b78:	87 7f       	andi	r24, 0xF7	; 247
    1b7a:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,WGM13);
    1b7c:	8e b5       	in	r24, 0x2e	; 46
    1b7e:	8f 7e       	andi	r24, 0xEF	; 239
    1b80:	8e bd       	out	0x2e, r24	; 46
						/*Normal port operation, OC1A/OC1B disconnected.*/
						CLEAR_BIT(TCCR1A,COM1A0);
    1b82:	8f b5       	in	r24, 0x2f	; 47
    1b84:	8f 7b       	andi	r24, 0xBF	; 191
    1b86:	8f bd       	out	0x2f, r24	; 47
						CLEAR_BIT(TCCR1A,COM1A1);
    1b88:	8f b5       	in	r24, 0x2f	; 47
    1b8a:	8f 77       	andi	r24, 0x7F	; 127
    1b8c:	8f bd       	out	0x2f, r24	; 47
						CLEAR_BIT(TCCR1A,COM1B0);
    1b8e:	8f b5       	in	r24, 0x2f	; 47
    1b90:	8f 7e       	andi	r24, 0xEF	; 239
    1b92:	8f bd       	out	0x2f, r24	; 47
						CLEAR_BIT(TCCR1A,COM1B1);
    1b94:	8f b5       	in	r24, 0x2f	; 47
    1b96:	8f 7d       	andi	r24, 0xDF	; 223
    1b98:	8f bd       	out	0x2f, r24	; 47
						/* Enable Timer0 overflow interrupt*/
						SET_BIT(TIMSK,TOIE1);
    1b9a:	89 b7       	in	r24, 0x39	; 57
    1b9c:	84 60       	ori	r24, 0x04	; 4
    1b9e:	89 bf       	out	0x39, r24	; 57
}


static Std_ReturnType TIMERx_setTimerMode(const Timer_Config_t *stPtr_a_Config)
{
	Std_ReturnType l_ret = E_OK;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
						CLEAR_BIT(TCCR1A,COM1A1);
						CLEAR_BIT(TCCR1A,COM1B0);
						CLEAR_BIT(TCCR1A,COM1B1);
						/* Enable Timer0 overflow interrupt*/
						SET_BIT(TIMSK,TOIE1);
						break;
    1ba2:	08 95       	ret
					case TIMER_PHASE_CORRECT_PWM_MODE:
						/*PWM Phase Correct 8-bit,top= 0x00FF ,Update of OCR1A at TOP,TOV1 Flag Set on BOTTOM*/
						SET_BIT(TCCR1A,WGM10);
    1ba4:	2f b5       	in	r18, 0x2f	; 47
    1ba6:	21 60       	ori	r18, 0x01	; 1
    1ba8:	2f bd       	out	0x2f, r18	; 47
						CLEAR_BIT(TCCR1A,WGM11);
    1baa:	2f b5       	in	r18, 0x2f	; 47
    1bac:	2d 7f       	andi	r18, 0xFD	; 253
    1bae:	2f bd       	out	0x2f, r18	; 47
						CLEAR_BIT(TCCR1B,WGM12);
    1bb0:	2e b5       	in	r18, 0x2e	; 46
    1bb2:	27 7f       	andi	r18, 0xF7	; 247
    1bb4:	2e bd       	out	0x2e, r18	; 46
						CLEAR_BIT(TCCR1B,WGM13);
    1bb6:	2e b5       	in	r18, 0x2e	; 46
    1bb8:	2f 7e       	andi	r18, 0xEF	; 239
    1bba:	2e bd       	out	0x2e, r18	; 46
						/*Compare Output Mode, Phase Correct PWM Mode*/
						switch(stPtr_a_Config->phase_correct_pwm_mode)
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	25 81       	ldd	r18, Z+5	; 0x05
    1bc0:	21 30       	cpi	r18, 0x01	; 1
    1bc2:	99 f0       	breq	.+38     	; 0x1bea <TIMERx_setTimerMode+0x212>
    1bc4:	28 f0       	brcs	.+10     	; 0x1bd0 <TIMERx_setTimerMode+0x1f8>
    1bc6:	22 30       	cpi	r18, 0x02	; 2
    1bc8:	e9 f0       	breq	.+58     	; 0x1c04 <TIMERx_setTimerMode+0x22c>
    1bca:	23 30       	cpi	r18, 0x03	; 3
    1bcc:	41 f1       	breq	.+80     	; 0x1c1e <TIMERx_setTimerMode+0x246>
    1bce:	33 c0       	rjmp	.+102    	; 0x1c36 <TIMERx_setTimerMode+0x25e>
						{
							case PC_Output_Compare_Mode_DISCONNECTED:
								/*Normal port operation, OC1A/OC1B disconnected.*/
								CLEAR_BIT(TCCR1A,COM1A0);
    1bd0:	2f b5       	in	r18, 0x2f	; 47
    1bd2:	2f 7b       	andi	r18, 0xBF	; 191
    1bd4:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1A1);
    1bd6:	2f b5       	in	r18, 0x2f	; 47
    1bd8:	2f 77       	andi	r18, 0x7F	; 127
    1bda:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1B0);
    1bdc:	2f b5       	in	r18, 0x2f	; 47
    1bde:	2f 7e       	andi	r18, 0xEF	; 239
    1be0:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1B1);
    1be2:	2f b5       	in	r18, 0x2f	; 47
    1be4:	2f 7d       	andi	r18, 0xDF	; 223
    1be6:	2f bd       	out	0x2f, r18	; 47
								break;
    1be8:	26 c0       	rjmp	.+76     	; 0x1c36 <TIMERx_setTimerMode+0x25e>
							case PC_Output_Compare_Mode_TOGGLE:
								/* Toggle OC1A on Compare Match, OC1B disconnected (normal port operation).
								 * For all other WGM13:0 settings, normal port operation, OC1A/OC1B disconnected
								 */
								SET_BIT(TCCR1A,COM1A0);
    1bea:	2f b5       	in	r18, 0x2f	; 47
    1bec:	20 64       	ori	r18, 0x40	; 64
    1bee:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1A1);
    1bf0:	2f b5       	in	r18, 0x2f	; 47
    1bf2:	2f 77       	andi	r18, 0x7F	; 127
    1bf4:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1B0);
    1bf6:	2f b5       	in	r18, 0x2f	; 47
    1bf8:	20 61       	ori	r18, 0x10	; 16
    1bfa:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1B1);
    1bfc:	2f b5       	in	r18, 0x2f	; 47
    1bfe:	2f 7d       	andi	r18, 0xDF	; 223
    1c00:	2f bd       	out	0x2f, r18	; 47
								break;
    1c02:	19 c0       	rjmp	.+50     	; 0x1c36 <TIMERx_setTimerMode+0x25e>
							case PC_Output_Compare_Mode_NON_INVERTED:
								/*Clear OC1A/OC1B on compare match when up-counting. Set OC1A/OC1B on compare
								* match when down counting. (non-inverting mode)
								*/
								CLEAR_BIT(TCCR1A,COM1A0);
    1c04:	2f b5       	in	r18, 0x2f	; 47
    1c06:	2f 7b       	andi	r18, 0xBF	; 191
    1c08:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1A1);
    1c0a:	2f b5       	in	r18, 0x2f	; 47
    1c0c:	20 68       	ori	r18, 0x80	; 128
    1c0e:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1B0);
    1c10:	2f b5       	in	r18, 0x2f	; 47
    1c12:	2f 7e       	andi	r18, 0xEF	; 239
    1c14:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1B1);
    1c16:	2f b5       	in	r18, 0x2f	; 47
    1c18:	20 62       	ori	r18, 0x20	; 32
    1c1a:	2f bd       	out	0x2f, r18	; 47
								break;
    1c1c:	0c c0       	rjmp	.+24     	; 0x1c36 <TIMERx_setTimerMode+0x25e>
							case PC_Output_Compare_Mode_INVERTED:
								/* Set OC1A/OC1B on compare match when up-counting. Clear OC1A/OC1B on compare
								* match when down counting,(inverting mode)
								*/
								SET_BIT(TCCR1A,COM1A0);
    1c1e:	2f b5       	in	r18, 0x2f	; 47
    1c20:	20 64       	ori	r18, 0x40	; 64
    1c22:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1A1);
    1c24:	2f b5       	in	r18, 0x2f	; 47
    1c26:	20 68       	ori	r18, 0x80	; 128
    1c28:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1B0);
    1c2a:	2f b5       	in	r18, 0x2f	; 47
    1c2c:	20 61       	ori	r18, 0x10	; 16
    1c2e:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1B1);
    1c30:	2f b5       	in	r18, 0x2f	; 47
    1c32:	20 62       	ori	r18, 0x20	; 32
    1c34:	2f bd       	out	0x2f, r18	; 47
								break;
						}
						/*The Output Compare Register contains an 16-bit value that is continuously compared with the  counter value (TCNT1) */
// 						OCR1AL = (uint8_t)stPtr_a_Config->timer_compare_MatchValue & U8_BIT_REG_MASK;
// 						OCR1AH = (uint8_t)(stPtr_a_Config->timer_compare_MatchValue >> U8_BIT_REG_MASK) & U8_BIT_REG_MASK;
						OCR1A = stPtr_a_Config->timer_compare_MatchValue;
    1c36:	fc 01       	movw	r30, r24
    1c38:	80 85       	ldd	r24, Z+8	; 0x08
    1c3a:	91 85       	ldd	r25, Z+9	; 0x09
    1c3c:	9b bd       	out	0x2b, r25	; 43
    1c3e:	8a bd       	out	0x2a, r24	; 42
						break;
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	08 95       	ret
						
					case TIMER_FAST_PWM_MODE:
						/*Fast PWM 8-bit,top= 0x00FF ,Update of OCR1A at BOTTOM,TOV1 Flag Set on TOP*/
						SET_BIT(TCCR1A,WGM10);
    1c44:	2f b5       	in	r18, 0x2f	; 47
    1c46:	21 60       	ori	r18, 0x01	; 1
    1c48:	2f bd       	out	0x2f, r18	; 47
						CLEAR_BIT(TCCR1A,WGM11);
    1c4a:	2f b5       	in	r18, 0x2f	; 47
    1c4c:	2d 7f       	andi	r18, 0xFD	; 253
    1c4e:	2f bd       	out	0x2f, r18	; 47
						SET_BIT(TCCR1B,WGM12);
    1c50:	2e b5       	in	r18, 0x2e	; 46
    1c52:	28 60       	ori	r18, 0x08	; 8
    1c54:	2e bd       	out	0x2e, r18	; 46
						CLEAR_BIT(TCCR1B,WGM13);
    1c56:	2e b5       	in	r18, 0x2e	; 46
    1c58:	2f 7e       	andi	r18, 0xEF	; 239
    1c5a:	2e bd       	out	0x2e, r18	; 46
						/*Compare Output Mode, Fast PWM Mode*/
						switch(stPtr_a_Config->fast_pwm_mode)
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	24 81       	ldd	r18, Z+4	; 0x04
    1c60:	21 30       	cpi	r18, 0x01	; 1
    1c62:	99 f0       	breq	.+38     	; 0x1c8a <TIMERx_setTimerMode+0x2b2>
    1c64:	28 f0       	brcs	.+10     	; 0x1c70 <TIMERx_setTimerMode+0x298>
    1c66:	22 30       	cpi	r18, 0x02	; 2
    1c68:	e9 f0       	breq	.+58     	; 0x1ca4 <TIMERx_setTimerMode+0x2cc>
    1c6a:	23 30       	cpi	r18, 0x03	; 3
    1c6c:	41 f1       	breq	.+80     	; 0x1cbe <TIMERx_setTimerMode+0x2e6>
    1c6e:	33 c0       	rjmp	.+102    	; 0x1cd6 <TIMERx_setTimerMode+0x2fe>
						{
							case FAST_Output_Compare_Mode_DISCONNECTED:
								/*Normal port operation, OC1A/OC1B disconnected.*/
								CLEAR_BIT(TCCR1A,COM1A0);
    1c70:	2f b5       	in	r18, 0x2f	; 47
    1c72:	2f 7b       	andi	r18, 0xBF	; 191
    1c74:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1A1);
    1c76:	2f b5       	in	r18, 0x2f	; 47
    1c78:	2f 77       	andi	r18, 0x7F	; 127
    1c7a:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1B0);
    1c7c:	2f b5       	in	r18, 0x2f	; 47
    1c7e:	2f 7e       	andi	r18, 0xEF	; 239
    1c80:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1B1);
    1c82:	2f b5       	in	r18, 0x2f	; 47
    1c84:	2f 7d       	andi	r18, 0xDF	; 223
    1c86:	2f bd       	out	0x2f, r18	; 47
								break;
    1c88:	26 c0       	rjmp	.+76     	; 0x1cd6 <TIMERx_setTimerMode+0x2fe>
							case FAST_Output_Compare_Mode_TOGGLE:
								/* Toggle OC1A on Compare Match, OC1B disconnected (normal port operation).
								 * For all other WGM13:0 settings, normal port operation, OC1A/OC1B disconnected
								 */
								SET_BIT(TCCR1A,COM1A0);
    1c8a:	2f b5       	in	r18, 0x2f	; 47
    1c8c:	20 64       	ori	r18, 0x40	; 64
    1c8e:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1A1);
    1c90:	2f b5       	in	r18, 0x2f	; 47
    1c92:	2f 77       	andi	r18, 0x7F	; 127
    1c94:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1B0);
    1c96:	2f b5       	in	r18, 0x2f	; 47
    1c98:	20 61       	ori	r18, 0x10	; 16
    1c9a:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1B1);
    1c9c:	2f b5       	in	r18, 0x2f	; 47
    1c9e:	2f 7d       	andi	r18, 0xDF	; 223
    1ca0:	2f bd       	out	0x2f, r18	; 47
								break;
    1ca2:	19 c0       	rjmp	.+50     	; 0x1cd6 <TIMERx_setTimerMode+0x2fe>
							case FAST_Output_Compare_Mode_NON_INVERTED:
								/*Clear OC1A/OC1B on compare match, setOC1A/OC1B at BOTTOM, (non-inverting mode)*/
								CLEAR_BIT(TCCR1A,COM1A0);
    1ca4:	2f b5       	in	r18, 0x2f	; 47
    1ca6:	2f 7b       	andi	r18, 0xBF	; 191
    1ca8:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1A1);
    1caa:	2f b5       	in	r18, 0x2f	; 47
    1cac:	20 68       	ori	r18, 0x80	; 128
    1cae:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1B0);
    1cb0:	2f b5       	in	r18, 0x2f	; 47
    1cb2:	2f 7e       	andi	r18, 0xEF	; 239
    1cb4:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1B1);
    1cb6:	2f b5       	in	r18, 0x2f	; 47
    1cb8:	20 62       	ori	r18, 0x20	; 32
    1cba:	2f bd       	out	0x2f, r18	; 47
								break;
    1cbc:	0c c0       	rjmp	.+24     	; 0x1cd6 <TIMERx_setTimerMode+0x2fe>
							case FAST_Output_Compare_Mode_INVERTED:
							/* Set OC1A/OC1B on compare match, clear OC1A/OC1B at BOTTOM,(inverting mode)*/
								SET_BIT(TCCR1A,COM1A0);
    1cbe:	2f b5       	in	r18, 0x2f	; 47
    1cc0:	20 64       	ori	r18, 0x40	; 64
    1cc2:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1A1);
    1cc4:	2f b5       	in	r18, 0x2f	; 47
    1cc6:	20 68       	ori	r18, 0x80	; 128
    1cc8:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1B0);
    1cca:	2f b5       	in	r18, 0x2f	; 47
    1ccc:	20 61       	ori	r18, 0x10	; 16
    1cce:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1B1);
    1cd0:	2f b5       	in	r18, 0x2f	; 47
    1cd2:	20 62       	ori	r18, 0x20	; 32
    1cd4:	2f bd       	out	0x2f, r18	; 47
								break;
						}
						/*The Output Compare Register contains an 16-bit value that is continuously compared with the  counter value (TCNT1) */
// 						OCR1AL = (uint8_t)stPtr_a_Config->timer_compare_MatchValue & U8_BIT_REG_MASK;
// 						OCR1AH = (uint8_t)(stPtr_a_Config->timer_compare_MatchValue >> U8_BIT_REG_MASK) & U8_BIT_REG_MASK;
						OCR1A = stPtr_a_Config->timer_compare_MatchValue;
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	80 85       	ldd	r24, Z+8	; 0x08
    1cda:	91 85       	ldd	r25, Z+9	; 0x09
    1cdc:	9b bd       	out	0x2b, r25	; 43
    1cde:	8a bd       	out	0x2a, r24	; 42
						break;
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	08 95       	ret
						
					case TIMER_CTC_MODE:
						/*Make FOC1A,FOC1B to be Active as it is overflow mode(for non-PWM mode)*/
						SET_BIT(TCCR1A,FOC1A);
    1ce4:	2f b5       	in	r18, 0x2f	; 47
    1ce6:	28 60       	ori	r18, 0x08	; 8
    1ce8:	2f bd       	out	0x2f, r18	; 47
						SET_BIT(TCCR1A,FOC1B);
    1cea:	2f b5       	in	r18, 0x2f	; 47
    1cec:	24 60       	ori	r18, 0x04	; 4
    1cee:	2f bd       	out	0x2f, r18	; 47
						/*CTC Mode, non-PWM Mode*/
						CLEAR_BIT(TCCR1A,WGM10);
    1cf0:	2f b5       	in	r18, 0x2f	; 47
    1cf2:	2e 7f       	andi	r18, 0xFE	; 254
    1cf4:	2f bd       	out	0x2f, r18	; 47
						CLEAR_BIT(TCCR1A,WGM11);
    1cf6:	2f b5       	in	r18, 0x2f	; 47
    1cf8:	2d 7f       	andi	r18, 0xFD	; 253
    1cfa:	2f bd       	out	0x2f, r18	; 47
						SET_BIT(TCCR1B,WGM12);
    1cfc:	2e b5       	in	r18, 0x2e	; 46
    1cfe:	28 60       	ori	r18, 0x08	; 8
    1d00:	2e bd       	out	0x2e, r18	; 46
						CLEAR_BIT(TCCR1B,WGM13);
    1d02:	2e b5       	in	r18, 0x2e	; 46
    1d04:	2f 7e       	andi	r18, 0xEF	; 239
    1d06:	2e bd       	out	0x2e, r18	; 46
						/*Compare Output Mode, non-PWM Mode*/
						switch(stPtr_a_Config->output_compare_mode)
    1d08:	fc 01       	movw	r30, r24
    1d0a:	23 81       	ldd	r18, Z+3	; 0x03
    1d0c:	21 30       	cpi	r18, 0x01	; 1
    1d0e:	99 f0       	breq	.+38     	; 0x1d36 <TIMERx_setTimerMode+0x35e>
    1d10:	28 f0       	brcs	.+10     	; 0x1d1c <TIMERx_setTimerMode+0x344>
    1d12:	22 30       	cpi	r18, 0x02	; 2
    1d14:	e9 f0       	breq	.+58     	; 0x1d50 <TIMERx_setTimerMode+0x378>
    1d16:	23 30       	cpi	r18, 0x03	; 3
    1d18:	41 f1       	breq	.+80     	; 0x1d6a <TIMERx_setTimerMode+0x392>
    1d1a:	33 c0       	rjmp	.+102    	; 0x1d82 <TIMERx_setTimerMode+0x3aa>
						{
							case CTC_Output_Compare_Mode_DISCONNECTED:
								/*Normal port operation, OC1A/OC1B disconnected.*/
								CLEAR_BIT(TCCR1A,COM1A0);
    1d1c:	2f b5       	in	r18, 0x2f	; 47
    1d1e:	2f 7b       	andi	r18, 0xBF	; 191
    1d20:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1A1);
    1d22:	2f b5       	in	r18, 0x2f	; 47
    1d24:	2f 77       	andi	r18, 0x7F	; 127
    1d26:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1B0);
    1d28:	2f b5       	in	r18, 0x2f	; 47
    1d2a:	2f 7e       	andi	r18, 0xEF	; 239
    1d2c:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1B1);
    1d2e:	2f b5       	in	r18, 0x2f	; 47
    1d30:	2f 7d       	andi	r18, 0xDF	; 223
    1d32:	2f bd       	out	0x2f, r18	; 47
								break;
    1d34:	26 c0       	rjmp	.+76     	; 0x1d82 <TIMERx_setTimerMode+0x3aa>
							case CTC_Output_Compare_Mode_TOGGLE:
								/* Toggle OC1A/OC1B on compare match*/
								SET_BIT(TCCR1A,COM1A0);
    1d36:	2f b5       	in	r18, 0x2f	; 47
    1d38:	20 64       	ori	r18, 0x40	; 64
    1d3a:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1A1);
    1d3c:	2f b5       	in	r18, 0x2f	; 47
    1d3e:	2f 77       	andi	r18, 0x7F	; 127
    1d40:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1B0);
    1d42:	2f b5       	in	r18, 0x2f	; 47
    1d44:	20 61       	ori	r18, 0x10	; 16
    1d46:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1B1);
    1d48:	2f b5       	in	r18, 0x2f	; 47
    1d4a:	2f 7d       	andi	r18, 0xDF	; 223
    1d4c:	2f bd       	out	0x2f, r18	; 47
								break;
    1d4e:	19 c0       	rjmp	.+50     	; 0x1d82 <TIMERx_setTimerMode+0x3aa>
							case CTC_Output_Compare_Mode_CLEAR:
								/*clear OC1A/OC1B on compare match (Set output to low level)*/
								CLEAR_BIT(TCCR1A,COM1A0);
    1d50:	2f b5       	in	r18, 0x2f	; 47
    1d52:	2f 7b       	andi	r18, 0xBF	; 191
    1d54:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1A1);
    1d56:	2f b5       	in	r18, 0x2f	; 47
    1d58:	20 68       	ori	r18, 0x80	; 128
    1d5a:	2f bd       	out	0x2f, r18	; 47
								CLEAR_BIT(TCCR1A,COM1B0);
    1d5c:	2f b5       	in	r18, 0x2f	; 47
    1d5e:	2f 7e       	andi	r18, 0xEF	; 239
    1d60:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1B1);
    1d62:	2f b5       	in	r18, 0x2f	; 47
    1d64:	20 62       	ori	r18, 0x20	; 32
    1d66:	2f bd       	out	0x2f, r18	; 47
								break;
    1d68:	0c c0       	rjmp	.+24     	; 0x1d82 <TIMERx_setTimerMode+0x3aa>
							case CTC_Output_Compare_SET:
							/* Set OC1A/OC1B on compare match (Set output to high level)*/
								SET_BIT(TCCR1A,COM1A0);
    1d6a:	2f b5       	in	r18, 0x2f	; 47
    1d6c:	20 64       	ori	r18, 0x40	; 64
    1d6e:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1A1);
    1d70:	2f b5       	in	r18, 0x2f	; 47
    1d72:	20 68       	ori	r18, 0x80	; 128
    1d74:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1B0);
    1d76:	2f b5       	in	r18, 0x2f	; 47
    1d78:	20 61       	ori	r18, 0x10	; 16
    1d7a:	2f bd       	out	0x2f, r18	; 47
								SET_BIT(TCCR1A,COM1B1);
    1d7c:	2f b5       	in	r18, 0x2f	; 47
    1d7e:	20 62       	ori	r18, 0x20	; 32
    1d80:	2f bd       	out	0x2f, r18	; 47
								break;
						}
					    /*The Output Compare Register contains an 16-bit value that is continuously compared with the  counter value (TCNT1) */
// 						OCR1AL = (uint8_t)stPtr_a_Config->timer_compare_MatchValue & U8_BIT_REG_MASK;
// 						OCR1AH = (uint8_t)(stPtr_a_Config->timer_compare_MatchValue >> U8_BIT_REG_MASK) & U8_BIT_REG_MASK;
						OCR1A = stPtr_a_Config->timer_compare_MatchValue;	
    1d82:	fc 01       	movw	r30, r24
    1d84:	80 85       	ldd	r24, Z+8	; 0x08
    1d86:	91 85       	ldd	r25, Z+9	; 0x09
    1d88:	9b bd       	out	0x2b, r25	; 43
    1d8a:	8a bd       	out	0x2a, r24	; 42
						/* Enable Timer1 CTC-A mode interrupt*/
						SET_BIT(TIMSK,OCIE1A);
    1d8c:	89 b7       	in	r24, 0x39	; 57
    1d8e:	80 61       	ori	r24, 0x10	; 16
    1d90:	89 bf       	out	0x39, r24	; 57
						break;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	08 95       	ret
				}
				
				break;
				
			case Timer2:
				switch(stPtr_a_Config->timer_mode)
    1d96:	31 30       	cpi	r19, 0x01	; 1
    1d98:	d9 f0       	breq	.+54     	; 0x1dd0 <TIMERx_setTimerMode+0x3f8>
    1d9a:	30 f0       	brcs	.+12     	; 0x1da8 <TIMERx_setTimerMode+0x3d0>
    1d9c:	32 30       	cpi	r19, 0x02	; 2
    1d9e:	09 f4       	brne	.+2      	; 0x1da2 <TIMERx_setTimerMode+0x3ca>
    1da0:	65 c0       	rjmp	.+202    	; 0x1e6c <TIMERx_setTimerMode+0x494>
    1da2:	33 30       	cpi	r19, 0x03	; 3
    1da4:	e1 f1       	breq	.+120    	; 0x1e1e <TIMERx_setTimerMode+0x446>
    1da6:	a6 c0       	rjmp	.+332    	; 0x1ef4 <TIMERx_setTimerMode+0x51c>
				{
					case TIMER_NORMAL_MODE:
						/*Make FOC2 to be Active as it is overflow mode(for non-PWM mode)*/
						SET_BIT(TCCR2,FOC2);
    1da8:	85 b5       	in	r24, 0x25	; 37
    1daa:	80 68       	ori	r24, 0x80	; 128
    1dac:	85 bd       	out	0x25, r24	; 37
						/*Normal Overflow mode*/
						CLEAR_BIT(TCCR2,WGM20);
    1dae:	85 b5       	in	r24, 0x25	; 37
    1db0:	8f 7b       	andi	r24, 0xBF	; 191
    1db2:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,WGM21);
    1db4:	85 b5       	in	r24, 0x25	; 37
    1db6:	87 7f       	andi	r24, 0xF7	; 247
    1db8:	85 bd       	out	0x25, r24	; 37
						/*Normal port operation, OC2 disconnected*/
						CLEAR_BIT(TCCR2,COM20);
    1dba:	85 b5       	in	r24, 0x25	; 37
    1dbc:	8f 7e       	andi	r24, 0xEF	; 239
    1dbe:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,COM21);
    1dc0:	85 b5       	in	r24, 0x25	; 37
    1dc2:	8f 7d       	andi	r24, 0xDF	; 223
    1dc4:	85 bd       	out	0x25, r24	; 37
						/* Enable Timer2 overflow interrupt*/
						SET_BIT(TIMSK,TOIE2);
    1dc6:	89 b7       	in	r24, 0x39	; 57
    1dc8:	80 64       	ori	r24, 0x40	; 64
    1dca:	89 bf       	out	0x39, r24	; 57
}


static Std_ReturnType TIMERx_setTimerMode(const Timer_Config_t *stPtr_a_Config)
{
	Std_ReturnType l_ret = E_OK;
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
						/*Normal port operation, OC2 disconnected*/
						CLEAR_BIT(TCCR2,COM20);
						CLEAR_BIT(TCCR2,COM21);
						/* Enable Timer2 overflow interrupt*/
						SET_BIT(TIMSK,TOIE2);
						break;
    1dce:	08 95       	ret
					case TIMER_PHASE_CORRECT_PWM_MODE:
						/*PWM Phase Correct*/
						SET_BIT(TCCR2,WGM20);
    1dd0:	25 b5       	in	r18, 0x25	; 37
    1dd2:	20 64       	ori	r18, 0x40	; 64
    1dd4:	25 bd       	out	0x25, r18	; 37
						CLEAR_BIT(TCCR2,WGM21);
    1dd6:	25 b5       	in	r18, 0x25	; 37
    1dd8:	27 7f       	andi	r18, 0xF7	; 247
    1dda:	25 bd       	out	0x25, r18	; 37
						/*Compare Output Mode, Phase Correct PWM Mode*/
						switch(stPtr_a_Config->phase_correct_pwm_mode)
    1ddc:	fc 01       	movw	r30, r24
    1dde:	25 81       	ldd	r18, Z+5	; 0x05
    1de0:	22 30       	cpi	r18, 0x02	; 2
    1de2:	59 f0       	breq	.+22     	; 0x1dfa <TIMERx_setTimerMode+0x422>
    1de4:	23 30       	cpi	r18, 0x03	; 3
    1de6:	81 f0       	breq	.+32     	; 0x1e08 <TIMERx_setTimerMode+0x430>
    1de8:	21 11       	cpse	r18, r1
    1dea:	14 c0       	rjmp	.+40     	; 0x1e14 <TIMERx_setTimerMode+0x43c>
						{
							case PC_Output_Compare_Mode_DISCONNECTED:
								/* Normal port operation, OC2 disconnected.*/
								CLEAR_BIT(TCCR2,COM20);
    1dec:	25 b5       	in	r18, 0x25	; 37
    1dee:	2f 7e       	andi	r18, 0xEF	; 239
    1df0:	25 bd       	out	0x25, r18	; 37
								CLEAR_BIT(TCCR2,COM21);
    1df2:	25 b5       	in	r18, 0x25	; 37
    1df4:	2f 7d       	andi	r18, 0xDF	; 223
    1df6:	25 bd       	out	0x25, r18	; 37
								break;
    1df8:	0d c0       	rjmp	.+26     	; 0x1e14 <TIMERx_setTimerMode+0x43c>
							case PC_Output_Compare_Mode_NON_INVERTED:
								/*Clear OC2 on compare match when up-counting Set OC2 on compare match when down counting*/
								CLEAR_BIT(TCCR2,COM20);
    1dfa:	25 b5       	in	r18, 0x25	; 37
    1dfc:	2f 7e       	andi	r18, 0xEF	; 239
    1dfe:	25 bd       	out	0x25, r18	; 37
								SET_BIT(TCCR2,COM21);
    1e00:	25 b5       	in	r18, 0x25	; 37
    1e02:	20 62       	ori	r18, 0x20	; 32
    1e04:	25 bd       	out	0x25, r18	; 37
								break;
    1e06:	06 c0       	rjmp	.+12     	; 0x1e14 <TIMERx_setTimerMode+0x43c>
							case PC_Output_Compare_Mode_INVERTED:
							/*Set OC2 on compare match when up-counting Clear OC2 on compare match when down counting*/
								SET_BIT(TCCR2,COM20);
    1e08:	25 b5       	in	r18, 0x25	; 37
    1e0a:	20 61       	ori	r18, 0x10	; 16
    1e0c:	25 bd       	out	0x25, r18	; 37
								SET_BIT(TCCR2,COM21);
    1e0e:	25 b5       	in	r18, 0x25	; 37
    1e10:	20 62       	ori	r18, 0x20	; 32
    1e12:	25 bd       	out	0x25, r18	; 37
							default: 
								l_ret |= E_NOT_OK;
								break;
						}
						/*The Output Compare Register contains an 8-bit value that is continuously compared with the  counter value (TCNT2) */
						OCR2 = (uint8_t)stPtr_a_Config->timer_compare_MatchValue & U8_BIT_REG_MASK;
    1e14:	fc 01       	movw	r30, r24
    1e16:	80 85       	ldd	r24, Z+8	; 0x08
    1e18:	83 bd       	out	0x23, r24	; 35
						break;
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	08 95       	ret
						
					case TIMER_FAST_PWM_MODE:
						/*Fast PWM*/
						SET_BIT(TCCR2,WGM20);
    1e1e:	25 b5       	in	r18, 0x25	; 37
    1e20:	20 64       	ori	r18, 0x40	; 64
    1e22:	25 bd       	out	0x25, r18	; 37
						SET_BIT(TCCR2,WGM21);
    1e24:	25 b5       	in	r18, 0x25	; 37
    1e26:	28 60       	ori	r18, 0x08	; 8
    1e28:	25 bd       	out	0x25, r18	; 37
						/*Compare Output Mode, Fast PWM Mode*/
						switch(stPtr_a_Config->fast_pwm_mode)
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	24 81       	ldd	r18, Z+4	; 0x04
    1e2e:	22 30       	cpi	r18, 0x02	; 2
    1e30:	59 f0       	breq	.+22     	; 0x1e48 <TIMERx_setTimerMode+0x470>
    1e32:	23 30       	cpi	r18, 0x03	; 3
    1e34:	81 f0       	breq	.+32     	; 0x1e56 <TIMERx_setTimerMode+0x47e>
    1e36:	21 11       	cpse	r18, r1
    1e38:	14 c0       	rjmp	.+40     	; 0x1e62 <TIMERx_setTimerMode+0x48a>
						{
							case FAST_Output_Compare_Mode_DISCONNECTED:
								/* Normal port operation, OC2 disconnected.*/
								CLEAR_BIT(TCCR2,COM20);
    1e3a:	25 b5       	in	r18, 0x25	; 37
    1e3c:	2f 7e       	andi	r18, 0xEF	; 239
    1e3e:	25 bd       	out	0x25, r18	; 37
								CLEAR_BIT(TCCR2,COM21);
    1e40:	25 b5       	in	r18, 0x25	; 37
    1e42:	2f 7d       	andi	r18, 0xDF	; 223
    1e44:	25 bd       	out	0x25, r18	; 37
								break;
    1e46:	0d c0       	rjmp	.+26     	; 0x1e62 <TIMERx_setTimerMode+0x48a>
							case FAST_Output_Compare_Mode_NON_INVERTED:
								/*Clear OC2 on compare match, set OC2 at BOTTOM*/
								CLEAR_BIT(TCCR2,COM20);
    1e48:	25 b5       	in	r18, 0x25	; 37
    1e4a:	2f 7e       	andi	r18, 0xEF	; 239
    1e4c:	25 bd       	out	0x25, r18	; 37
								SET_BIT(TCCR2,COM21);
    1e4e:	25 b5       	in	r18, 0x25	; 37
    1e50:	20 62       	ori	r18, 0x20	; 32
    1e52:	25 bd       	out	0x25, r18	; 37
								break;
    1e54:	06 c0       	rjmp	.+12     	; 0x1e62 <TIMERx_setTimerMode+0x48a>
							case FAST_Output_Compare_Mode_INVERTED:
							/*Set OC2 on compare match, clear OC2 at BOTTOM*/
								SET_BIT(TCCR2,COM20);
    1e56:	25 b5       	in	r18, 0x25	; 37
    1e58:	20 61       	ori	r18, 0x10	; 16
    1e5a:	25 bd       	out	0x25, r18	; 37
								SET_BIT(TCCR2,COM21);
    1e5c:	25 b5       	in	r18, 0x25	; 37
    1e5e:	20 62       	ori	r18, 0x20	; 32
    1e60:	25 bd       	out	0x25, r18	; 37
							default: 
								l_ret |= E_NOT_OK;
								break;
						}
						 /*The Output Compare Register contains an 8-bit value that is continuously compared with the  counter value (TCNT2) */
						 OCR2 =(uint8_t) stPtr_a_Config->timer_compare_MatchValue & U8_BIT_REG_MASK;
    1e62:	fc 01       	movw	r30, r24
    1e64:	80 85       	ldd	r24, Z+8	; 0x08
    1e66:	83 bd       	out	0x23, r24	; 35
						break;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	08 95       	ret
						
					case TIMER_CTC_MODE:
						/*Make FOC2 to be Active as it is CTC mode(for non-PWM mode)*/
						SET_BIT(TCCR2,FOC2);
    1e6c:	25 b5       	in	r18, 0x25	; 37
    1e6e:	20 68       	ori	r18, 0x80	; 128
    1e70:	25 bd       	out	0x25, r18	; 37
						/*CTC Mode, non-PWM Mode*/
						CLEAR_BIT(TCCR2,WGM20);
    1e72:	25 b5       	in	r18, 0x25	; 37
    1e74:	2f 7b       	andi	r18, 0xBF	; 191
    1e76:	25 bd       	out	0x25, r18	; 37
						SET_BIT(TCCR2,WGM21);
    1e78:	25 b5       	in	r18, 0x25	; 37
    1e7a:	28 60       	ori	r18, 0x08	; 8
    1e7c:	25 bd       	out	0x25, r18	; 37
						/*Compare Output Mode, non-PWM Mode*/
						switch(stPtr_a_Config->output_compare_mode)
    1e7e:	fc 01       	movw	r30, r24
    1e80:	23 81       	ldd	r18, Z+3	; 0x03
    1e82:	21 30       	cpi	r18, 0x01	; 1
    1e84:	69 f0       	breq	.+26     	; 0x1ea0 <TIMERx_setTimerMode+0x4c8>
    1e86:	28 f0       	brcs	.+10     	; 0x1e92 <TIMERx_setTimerMode+0x4ba>
    1e88:	22 30       	cpi	r18, 0x02	; 2
    1e8a:	89 f0       	breq	.+34     	; 0x1eae <TIMERx_setTimerMode+0x4d6>
    1e8c:	23 30       	cpi	r18, 0x03	; 3
    1e8e:	b1 f0       	breq	.+44     	; 0x1ebc <TIMERx_setTimerMode+0x4e4>
    1e90:	1b c0       	rjmp	.+54     	; 0x1ec8 <TIMERx_setTimerMode+0x4f0>
						{
							case CTC_Output_Compare_Mode_DISCONNECTED:
								/* Normal port operation, OC2 disconnected.*/
								CLEAR_BIT(TCCR2,COM20);
    1e92:	25 b5       	in	r18, 0x25	; 37
    1e94:	2f 7e       	andi	r18, 0xEF	; 239
    1e96:	25 bd       	out	0x25, r18	; 37
								CLEAR_BIT(TCCR2,COM21);
    1e98:	25 b5       	in	r18, 0x25	; 37
    1e9a:	2f 7d       	andi	r18, 0xDF	; 223
    1e9c:	25 bd       	out	0x25, r18	; 37
								break;
    1e9e:	14 c0       	rjmp	.+40     	; 0x1ec8 <TIMERx_setTimerMode+0x4f0>
							case CTC_Output_Compare_Mode_TOGGLE:
								/* Toggle OC2 on compare match*/
								SET_BIT(TCCR2,COM20);
    1ea0:	25 b5       	in	r18, 0x25	; 37
    1ea2:	20 61       	ori	r18, 0x10	; 16
    1ea4:	25 bd       	out	0x25, r18	; 37
								CLEAR_BIT(TCCR2,COM21);
    1ea6:	25 b5       	in	r18, 0x25	; 37
    1ea8:	2f 7d       	andi	r18, 0xDF	; 223
    1eaa:	25 bd       	out	0x25, r18	; 37
								break;
    1eac:	0d c0       	rjmp	.+26     	; 0x1ec8 <TIMERx_setTimerMode+0x4f0>
							case CTC_Output_Compare_Mode_CLEAR:
								/*Clear OC2 on compare match*/
								CLEAR_BIT(TCCR2,COM20);
    1eae:	25 b5       	in	r18, 0x25	; 37
    1eb0:	2f 7e       	andi	r18, 0xEF	; 239
    1eb2:	25 bd       	out	0x25, r18	; 37
								SET_BIT(TCCR2,COM21);
    1eb4:	25 b5       	in	r18, 0x25	; 37
    1eb6:	20 62       	ori	r18, 0x20	; 32
    1eb8:	25 bd       	out	0x25, r18	; 37
								break;
    1eba:	06 c0       	rjmp	.+12     	; 0x1ec8 <TIMERx_setTimerMode+0x4f0>
							case CTC_Output_Compare_SET:
							/*Set OC2 on compare match*/
								SET_BIT(TCCR2,COM20);
    1ebc:	25 b5       	in	r18, 0x25	; 37
    1ebe:	20 61       	ori	r18, 0x10	; 16
    1ec0:	25 bd       	out	0x25, r18	; 37
								SET_BIT(TCCR2,COM21);
    1ec2:	25 b5       	in	r18, 0x25	; 37
    1ec4:	20 62       	ori	r18, 0x20	; 32
    1ec6:	25 bd       	out	0x25, r18	; 37
							default: 
								l_ret |= E_NOT_OK;
								break;
						}
					     /*The Output Compare Register contains an 8-bit value that is continuously compared with the  counter value (TCNT2) */
					     OCR2 =(uint8_t) stPtr_a_Config->timer_compare_MatchValue & U8_BIT_REG_MASK;
    1ec8:	fc 01       	movw	r30, r24
    1eca:	80 85       	ldd	r24, Z+8	; 0x08
    1ecc:	83 bd       	out	0x23, r24	; 35
						/* Enable Timer0 CTC mode interrupt*/
						SET_BIT(TIMSK,OCIE2);
    1ece:	89 b7       	in	r24, 0x39	; 57
    1ed0:	80 68       	ori	r24, 0x80	; 128
    1ed2:	89 bf       	out	0x39, r24	; 57
						break;
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	08 95       	ret
{
	Std_ReturnType l_ret = E_OK;
	if( (stPtr_a_Config == NULL) || (stPtr_a_Config->timer_type >= INVALID_TIMER_TYPE) || (stPtr_a_Config->timer_mode >= INVALID_TIMER_MODE) ||
	    (stPtr_a_Config->output_compare_mode >=CTC_INVALID_TIMER_OUTPUT_COMPARE_MODE ) )
	{
		l_ret = E_NOT_OK;
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	08 95       	ret
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	08 95       	ret
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	08 95       	ret
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	08 95       	ret
				}
				
				break;
				
			default:
				l_ret = E_NOT_OK;
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	08 95       	ret
						OCR0 = stPtr_a_Config->timer_compare_MatchValue & U8_BIT_REG_MASK;	
						/* Enable Timer0 CTC mode interrupt*/
						SET_BIT(TIMSK,OCIE0);
						break;
					default:
						l_ret = E_NOT_OK;
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	08 95       	ret
						OCR1A = stPtr_a_Config->timer_compare_MatchValue;	
						/* Enable Timer1 CTC-A mode interrupt*/
						SET_BIT(TIMSK,OCIE1A);
						break;
					default:
						l_ret = E_NOT_OK;
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	08 95       	ret
					     OCR2 =(uint8_t) stPtr_a_Config->timer_compare_MatchValue & U8_BIT_REG_MASK;
						/* Enable Timer0 CTC mode interrupt*/
						SET_BIT(TIMSK,OCIE2);
						break;
					default:
						l_ret = E_NOT_OK;
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
				break;
		}
	}
	
	return l_ret;
}
    1ef6:	08 95       	ret

00001ef8 <__vector_11>:
static Std_ReturnType TIMERx_selectClk(const TimerType_t en_a_timer_type,const TimerClock_t en_a_timer_clk);
static Std_ReturnType TIMERx_setTimerMode(const Timer_Config_t *stPtr_a_Config);

/***********************Interrupt Service Routines for Timer0 *************************/
ISR(TIMER0_OVF_vect)
{
    1ef8:	1f 92       	push	r1
    1efa:	0f 92       	push	r0
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	0f 92       	push	r0
    1f00:	11 24       	eor	r1, r1
    1f02:	2f 93       	push	r18
    1f04:	3f 93       	push	r19
    1f06:	4f 93       	push	r20
    1f08:	5f 93       	push	r21
    1f0a:	6f 93       	push	r22
    1f0c:	7f 93       	push	r23
    1f0e:	8f 93       	push	r24
    1f10:	9f 93       	push	r25
    1f12:	af 93       	push	r26
    1f14:	bf 93       	push	r27
    1f16:	ef 93       	push	r30
    1f18:	ff 93       	push	r31
	if(g_Timer0_callBackPtr != NULL)
    1f1a:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <g_Timer0_callBackPtr>
    1f1e:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <g_Timer0_callBackPtr+0x1>
    1f22:	89 2b       	or	r24, r25
    1f24:	41 f0       	breq	.+16     	; 0x1f36 <__vector_11+0x3e>
	{
		/* The timer0 overflow  occurred (must be cleared in software) */
		 CLEAR_BIT(TIFR,TOV0);
    1f26:	88 b7       	in	r24, 0x38	; 56
    1f28:	8e 7f       	andi	r24, 0xFE	; 254
    1f2a:	88 bf       	out	0x38, r24	; 56
		/* Call the Call Back function in the upper layer after the timer overflow*/
		(*g_Timer0_callBackPtr)();
    1f2c:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <g_Timer0_callBackPtr>
    1f30:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <g_Timer0_callBackPtr+0x1>
    1f34:	09 95       	icall
	}
}
    1f36:	ff 91       	pop	r31
    1f38:	ef 91       	pop	r30
    1f3a:	bf 91       	pop	r27
    1f3c:	af 91       	pop	r26
    1f3e:	9f 91       	pop	r25
    1f40:	8f 91       	pop	r24
    1f42:	7f 91       	pop	r23
    1f44:	6f 91       	pop	r22
    1f46:	5f 91       	pop	r21
    1f48:	4f 91       	pop	r20
    1f4a:	3f 91       	pop	r19
    1f4c:	2f 91       	pop	r18
    1f4e:	0f 90       	pop	r0
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	0f 90       	pop	r0
    1f54:	1f 90       	pop	r1
    1f56:	18 95       	reti

00001f58 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    1f58:	1f 92       	push	r1
    1f5a:	0f 92       	push	r0
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	0f 92       	push	r0
    1f60:	11 24       	eor	r1, r1
    1f62:	2f 93       	push	r18
    1f64:	3f 93       	push	r19
    1f66:	4f 93       	push	r20
    1f68:	5f 93       	push	r21
    1f6a:	6f 93       	push	r22
    1f6c:	7f 93       	push	r23
    1f6e:	8f 93       	push	r24
    1f70:	9f 93       	push	r25
    1f72:	af 93       	push	r26
    1f74:	bf 93       	push	r27
    1f76:	ef 93       	push	r30
    1f78:	ff 93       	push	r31
	if(g_Timer0_callBackPtr != NULL)
    1f7a:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <g_Timer0_callBackPtr>
    1f7e:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <g_Timer0_callBackPtr+0x1>
    1f82:	89 2b       	or	r24, r25
    1f84:	41 f0       	breq	.+16     	; 0x1f96 <__vector_10+0x3e>
	{
		/* The timer0 compare match occurred (must be cleared in software) */
		CLEAR_BIT(TIFR,OCF0);
    1f86:	88 b7       	in	r24, 0x38	; 56
    1f88:	8d 7f       	andi	r24, 0xFD	; 253
    1f8a:	88 bf       	out	0x38, r24	; 56
		/* Call the Call Back function in the upper layer after the timer matches the compare value*/
		(*g_Timer0_callBackPtr)();
    1f8c:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <g_Timer0_callBackPtr>
    1f90:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <g_Timer0_callBackPtr+0x1>
    1f94:	09 95       	icall
	}
}
    1f96:	ff 91       	pop	r31
    1f98:	ef 91       	pop	r30
    1f9a:	bf 91       	pop	r27
    1f9c:	af 91       	pop	r26
    1f9e:	9f 91       	pop	r25
    1fa0:	8f 91       	pop	r24
    1fa2:	7f 91       	pop	r23
    1fa4:	6f 91       	pop	r22
    1fa6:	5f 91       	pop	r21
    1fa8:	4f 91       	pop	r20
    1faa:	3f 91       	pop	r19
    1fac:	2f 91       	pop	r18
    1fae:	0f 90       	pop	r0
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	0f 90       	pop	r0
    1fb4:	1f 90       	pop	r1
    1fb6:	18 95       	reti

00001fb8 <__vector_9>:
/***********************Interrupt Service Routines for Timer1 *************************/
ISR(TIMER1_OVF_vect)
{
    1fb8:	1f 92       	push	r1
    1fba:	0f 92       	push	r0
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	0f 92       	push	r0
    1fc0:	11 24       	eor	r1, r1
    1fc2:	2f 93       	push	r18
    1fc4:	3f 93       	push	r19
    1fc6:	4f 93       	push	r20
    1fc8:	5f 93       	push	r21
    1fca:	6f 93       	push	r22
    1fcc:	7f 93       	push	r23
    1fce:	8f 93       	push	r24
    1fd0:	9f 93       	push	r25
    1fd2:	af 93       	push	r26
    1fd4:	bf 93       	push	r27
    1fd6:	ef 93       	push	r30
    1fd8:	ff 93       	push	r31
	if(g_Timer1_callBackPtr != NULL)
    1fda:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <g_Timer1_callBackPtr>
    1fde:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <g_Timer1_callBackPtr+0x1>
    1fe2:	89 2b       	or	r24, r25
    1fe4:	41 f0       	breq	.+16     	; 0x1ff6 <__vector_9+0x3e>
	{
		/* The timer0 overflow  occurred (must be cleared in software) */
		CLEAR_BIT(TIFR,TOV1);
    1fe6:	88 b7       	in	r24, 0x38	; 56
    1fe8:	8b 7f       	andi	r24, 0xFB	; 251
    1fea:	88 bf       	out	0x38, r24	; 56
		/* Call the Call Back function in the upper layer after the timer overflow*/
		(*g_Timer1_callBackPtr)();
    1fec:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <g_Timer1_callBackPtr>
    1ff0:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <g_Timer1_callBackPtr+0x1>
    1ff4:	09 95       	icall
	}
}
    1ff6:	ff 91       	pop	r31
    1ff8:	ef 91       	pop	r30
    1ffa:	bf 91       	pop	r27
    1ffc:	af 91       	pop	r26
    1ffe:	9f 91       	pop	r25
    2000:	8f 91       	pop	r24
    2002:	7f 91       	pop	r23
    2004:	6f 91       	pop	r22
    2006:	5f 91       	pop	r21
    2008:	4f 91       	pop	r20
    200a:	3f 91       	pop	r19
    200c:	2f 91       	pop	r18
    200e:	0f 90       	pop	r0
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	0f 90       	pop	r0
    2014:	1f 90       	pop	r1
    2016:	18 95       	reti

00002018 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    2018:	1f 92       	push	r1
    201a:	0f 92       	push	r0
    201c:	0f b6       	in	r0, 0x3f	; 63
    201e:	0f 92       	push	r0
    2020:	11 24       	eor	r1, r1
    2022:	2f 93       	push	r18
    2024:	3f 93       	push	r19
    2026:	4f 93       	push	r20
    2028:	5f 93       	push	r21
    202a:	6f 93       	push	r22
    202c:	7f 93       	push	r23
    202e:	8f 93       	push	r24
    2030:	9f 93       	push	r25
    2032:	af 93       	push	r26
    2034:	bf 93       	push	r27
    2036:	ef 93       	push	r30
    2038:	ff 93       	push	r31
	if(g_Timer1_callBackPtr != NULL)
    203a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <g_Timer1_callBackPtr>
    203e:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <g_Timer1_callBackPtr+0x1>
    2042:	89 2b       	or	r24, r25
    2044:	41 f0       	breq	.+16     	; 0x2056 <__vector_7+0x3e>
	{
		/* The timer0 compare match occurred (must be cleared in software) */
		CLEAR_BIT(TIFR,OCF1A);
    2046:	88 b7       	in	r24, 0x38	; 56
    2048:	8f 7e       	andi	r24, 0xEF	; 239
    204a:	88 bf       	out	0x38, r24	; 56
		/* Call the Call Back function in the upper layer after the timer matches the compare value*/
		(*g_Timer1_callBackPtr)();
    204c:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <g_Timer1_callBackPtr>
    2050:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <g_Timer1_callBackPtr+0x1>
    2054:	09 95       	icall
	}
}
    2056:	ff 91       	pop	r31
    2058:	ef 91       	pop	r30
    205a:	bf 91       	pop	r27
    205c:	af 91       	pop	r26
    205e:	9f 91       	pop	r25
    2060:	8f 91       	pop	r24
    2062:	7f 91       	pop	r23
    2064:	6f 91       	pop	r22
    2066:	5f 91       	pop	r21
    2068:	4f 91       	pop	r20
    206a:	3f 91       	pop	r19
    206c:	2f 91       	pop	r18
    206e:	0f 90       	pop	r0
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	0f 90       	pop	r0
    2074:	1f 90       	pop	r1
    2076:	18 95       	reti

00002078 <__vector_5>:
/***********************Interrupt Service Routines for Timer2 *************************/
ISR(TIMER2_OVF_vect)
{
    2078:	1f 92       	push	r1
    207a:	0f 92       	push	r0
    207c:	0f b6       	in	r0, 0x3f	; 63
    207e:	0f 92       	push	r0
    2080:	11 24       	eor	r1, r1
    2082:	2f 93       	push	r18
    2084:	3f 93       	push	r19
    2086:	4f 93       	push	r20
    2088:	5f 93       	push	r21
    208a:	6f 93       	push	r22
    208c:	7f 93       	push	r23
    208e:	8f 93       	push	r24
    2090:	9f 93       	push	r25
    2092:	af 93       	push	r26
    2094:	bf 93       	push	r27
    2096:	ef 93       	push	r30
    2098:	ff 93       	push	r31
	if(g_Timer2_callBackPtr != NULL)
    209a:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <g_Timer2_callBackPtr>
    209e:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <g_Timer2_callBackPtr+0x1>
    20a2:	89 2b       	or	r24, r25
    20a4:	41 f0       	breq	.+16     	; 0x20b6 <__vector_5+0x3e>
	{
		/* The timer2 overflow  occurred (must be cleared in software) */
		CLEAR_BIT(TIFR,TOV2);
    20a6:	88 b7       	in	r24, 0x38	; 56
    20a8:	8f 7b       	andi	r24, 0xBF	; 191
    20aa:	88 bf       	out	0x38, r24	; 56
		/* Call the Call Back function in the upper layer after the timer overflow*/
		(*g_Timer2_callBackPtr)();
    20ac:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <g_Timer2_callBackPtr>
    20b0:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <g_Timer2_callBackPtr+0x1>
    20b4:	09 95       	icall
	}
}
    20b6:	ff 91       	pop	r31
    20b8:	ef 91       	pop	r30
    20ba:	bf 91       	pop	r27
    20bc:	af 91       	pop	r26
    20be:	9f 91       	pop	r25
    20c0:	8f 91       	pop	r24
    20c2:	7f 91       	pop	r23
    20c4:	6f 91       	pop	r22
    20c6:	5f 91       	pop	r21
    20c8:	4f 91       	pop	r20
    20ca:	3f 91       	pop	r19
    20cc:	2f 91       	pop	r18
    20ce:	0f 90       	pop	r0
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	0f 90       	pop	r0
    20d4:	1f 90       	pop	r1
    20d6:	18 95       	reti

000020d8 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    20d8:	1f 92       	push	r1
    20da:	0f 92       	push	r0
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	0f 92       	push	r0
    20e0:	11 24       	eor	r1, r1
    20e2:	2f 93       	push	r18
    20e4:	3f 93       	push	r19
    20e6:	4f 93       	push	r20
    20e8:	5f 93       	push	r21
    20ea:	6f 93       	push	r22
    20ec:	7f 93       	push	r23
    20ee:	8f 93       	push	r24
    20f0:	9f 93       	push	r25
    20f2:	af 93       	push	r26
    20f4:	bf 93       	push	r27
    20f6:	ef 93       	push	r30
    20f8:	ff 93       	push	r31
	if(g_Timer2_callBackPtr != NULL)
    20fa:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <g_Timer2_callBackPtr>
    20fe:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <g_Timer2_callBackPtr+0x1>
    2102:	89 2b       	or	r24, r25
    2104:	41 f0       	breq	.+16     	; 0x2116 <__vector_4+0x3e>
	{
		/* The timer2 compare match occurred (must be cleared in software) */
		CLEAR_BIT(TIFR,OCF2);
    2106:	88 b7       	in	r24, 0x38	; 56
    2108:	8f 77       	andi	r24, 0x7F	; 127
    210a:	88 bf       	out	0x38, r24	; 56
		/* Call the Call Back function in the upper layer after the timer matches the compare value*/
		(*g_Timer2_callBackPtr)();
    210c:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <g_Timer2_callBackPtr>
    2110:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <g_Timer2_callBackPtr+0x1>
    2114:	09 95       	icall
	}
}
    2116:	ff 91       	pop	r31
    2118:	ef 91       	pop	r30
    211a:	bf 91       	pop	r27
    211c:	af 91       	pop	r26
    211e:	9f 91       	pop	r25
    2120:	8f 91       	pop	r24
    2122:	7f 91       	pop	r23
    2124:	6f 91       	pop	r22
    2126:	5f 91       	pop	r21
    2128:	4f 91       	pop	r20
    212a:	3f 91       	pop	r19
    212c:	2f 91       	pop	r18
    212e:	0f 90       	pop	r0
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	0f 90       	pop	r0
    2134:	1f 90       	pop	r1
    2136:	18 95       	reti

00002138 <TIMERx_setCallBack>:
/*****************************************************************************************/
Std_ReturnType TIMERx_setCallBack( void(*a_fptr)(void), const TimerType_t en_a_timer_type )
{
	Std_ReturnType l_ret = E_OK;
	if( (en_a_timer_type >= INVALID_TIMER_TYPE) || (NULL==a_fptr) )
    2138:	63 30       	cpi	r22, 0x03	; 3
    213a:	d0 f4       	brcc	.+52     	; 0x2170 <TIMERx_setCallBack+0x38>
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	d1 f0       	breq	.+52     	; 0x2174 <TIMERx_setCallBack+0x3c>
	{
		l_ret = E_NOT_OK;
	}
	else
	{
		switch(en_a_timer_type)
    2140:	61 30       	cpi	r22, 0x01	; 1
    2142:	51 f0       	breq	.+20     	; 0x2158 <TIMERx_setCallBack+0x20>
    2144:	18 f0       	brcs	.+6      	; 0x214c <TIMERx_setCallBack+0x14>
    2146:	62 30       	cpi	r22, 0x02	; 2
    2148:	69 f0       	breq	.+26     	; 0x2164 <TIMERx_setCallBack+0x2c>
    214a:	16 c0       	rjmp	.+44     	; 0x2178 <TIMERx_setCallBack+0x40>
		{
			case Timer0:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				g_Timer0_callBackPtr = a_fptr;
    214c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <g_Timer0_callBackPtr+0x1>
    2150:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <g_Timer0_callBackPtr>
	}
}
/*****************************************************************************************/
Std_ReturnType TIMERx_setCallBack( void(*a_fptr)(void), const TimerType_t en_a_timer_type )
{
	Std_ReturnType l_ret = E_OK;
    2154:	81 e0       	ldi	r24, 0x01	; 1
		switch(en_a_timer_type)
		{
			case Timer0:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				g_Timer0_callBackPtr = a_fptr;
				break;
    2156:	08 95       	ret
			case Timer1:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				g_Timer1_callBackPtr = a_fptr;
    2158:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <g_Timer1_callBackPtr+0x1>
    215c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <g_Timer1_callBackPtr>
	}
}
/*****************************************************************************************/
Std_ReturnType TIMERx_setCallBack( void(*a_fptr)(void), const TimerType_t en_a_timer_type )
{
	Std_ReturnType l_ret = E_OK;
    2160:	81 e0       	ldi	r24, 0x01	; 1
				g_Timer0_callBackPtr = a_fptr;
				break;
			case Timer1:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				g_Timer1_callBackPtr = a_fptr;
				break;
    2162:	08 95       	ret
			case Timer2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				g_Timer2_callBackPtr = a_fptr;
    2164:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <g_Timer2_callBackPtr+0x1>
    2168:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <g_Timer2_callBackPtr>
	}
}
/*****************************************************************************************/
Std_ReturnType TIMERx_setCallBack( void(*a_fptr)(void), const TimerType_t en_a_timer_type )
{
	Std_ReturnType l_ret = E_OK;
    216c:	81 e0       	ldi	r24, 0x01	; 1
				g_Timer1_callBackPtr = a_fptr;
				break;
			case Timer2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				g_Timer2_callBackPtr = a_fptr;
				break;
    216e:	08 95       	ret
Std_ReturnType TIMERx_setCallBack( void(*a_fptr)(void), const TimerType_t en_a_timer_type )
{
	Std_ReturnType l_ret = E_OK;
	if( (en_a_timer_type >= INVALID_TIMER_TYPE) || (NULL==a_fptr) )
	{
		l_ret = E_NOT_OK;
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	08 95       	ret
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	08 95       	ret
			case Timer2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				g_Timer2_callBackPtr = a_fptr;
				break;
			default:
				l_ret = E_NOT_OK;
    2178:	80 e0       	ldi	r24, 0x00	; 0
				break;
		}
	}
	return l_ret;
}
    217a:	08 95       	ret

0000217c <TIMERx_init>:


Std_ReturnType TIMERx_init(const Timer_Config_t *stPtr_a_Config)
{
	Std_ReturnType l_ret = E_OK;
	if((stPtr_a_Config == NULL) || (stPtr_a_Config->timer_type >= INVALID_TIMER_TYPE) || (stPtr_a_Config->timer_mode >= INVALID_TIMER_MODE) ||
    217c:	00 97       	sbiw	r24, 0x00	; 0
    217e:	b1 f1       	breq	.+108    	; 0x21ec <TIMERx_init+0x70>
    2180:	fc 01       	movw	r30, r24
    2182:	20 81       	ld	r18, Z
    2184:	23 30       	cpi	r18, 0x03	; 3
    2186:	a0 f5       	brcc	.+104    	; 0x21f0 <TIMERx_init+0x74>
    2188:	32 81       	ldd	r19, Z+2	; 0x02
    218a:	34 30       	cpi	r19, 0x04	; 4
    218c:	98 f5       	brcc	.+102    	; 0x21f4 <TIMERx_init+0x78>
	(stPtr_a_Config->output_compare_mode >=CTC_INVALID_TIMER_OUTPUT_COMPARE_MODE ) || stPtr_a_Config->fast_pwm_mode >= FAST_INVALID_TIMER_FAST_PWM_MODE)
    218e:	33 81       	ldd	r19, Z+3	; 0x03


Std_ReturnType TIMERx_init(const Timer_Config_t *stPtr_a_Config)
{
	Std_ReturnType l_ret = E_OK;
	if((stPtr_a_Config == NULL) || (stPtr_a_Config->timer_type >= INVALID_TIMER_TYPE) || (stPtr_a_Config->timer_mode >= INVALID_TIMER_MODE) ||
    2190:	34 30       	cpi	r19, 0x04	; 4
    2192:	90 f5       	brcc	.+100    	; 0x21f8 <TIMERx_init+0x7c>
	(stPtr_a_Config->output_compare_mode >=CTC_INVALID_TIMER_OUTPUT_COMPARE_MODE ) || stPtr_a_Config->fast_pwm_mode >= FAST_INVALID_TIMER_FAST_PWM_MODE)
    2194:	34 81       	ldd	r19, Z+4	; 0x04
    2196:	34 30       	cpi	r19, 0x04	; 4
    2198:	88 f5       	brcc	.+98     	; 0x21fc <TIMERx_init+0x80>
	{
		l_ret = E_NOT_OK;
	}
	else
	{
		switch(stPtr_a_Config->timer_type)
    219a:	21 30       	cpi	r18, 0x01	; 1
    219c:	71 f0       	breq	.+28     	; 0x21ba <TIMERx_init+0x3e>
    219e:	18 f0       	brcs	.+6      	; 0x21a6 <TIMERx_init+0x2a>
    21a0:	22 30       	cpi	r18, 0x02	; 2
    21a2:	d1 f0       	breq	.+52     	; 0x21d8 <TIMERx_init+0x5c>
    21a4:	2d c0       	rjmp	.+90     	; 0x2200 <TIMERx_init+0x84>
		{
			case Timer0:
				/*Clear registers of Timer0 before processing any of them*/
				CLEAR_REG(TCNT0);
    21a6:	12 be       	out	0x32, r1	; 50
				CLEAR_REG(TCCR0);
    21a8:	13 be       	out	0x33, r1	; 51
				CLEAR_REG(OCR0);
    21aa:	1c be       	out	0x3c, r1	; 60
				/*Configure initial value in TCNT0 for Timer0 to start count from it*/
				TCNT0 = stPtr_a_Config->timer_InitialValue & U8_BIT_REG_MASK;
    21ac:	fc 01       	movw	r30, r24
    21ae:	26 81       	ldd	r18, Z+6	; 0x06
    21b0:	22 bf       	out	0x32, r18	; 50
				/*Configure the TIMER mode value and enable the interrupt for this mode*/
				l_ret |= TIMERx_setTimerMode(stPtr_a_Config);
    21b2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <TIMERx_setTimerMode>
    21b6:	81 60       	ori	r24, 0x01	; 1
				break;
    21b8:	08 95       	ret
			
			case Timer1:
				/*Clear registers of Timer1 before processing any of them*/
				CLEAR_REG(TCNT1L);
    21ba:	1c bc       	out	0x2c, r1	; 44
				CLEAR_REG(TCNT1H);
    21bc:	1d bc       	out	0x2d, r1	; 45
				CLEAR_REG(TCCR1A);
    21be:	1f bc       	out	0x2f, r1	; 47
				CLEAR_REG(TCCR1B);
    21c0:	1e bc       	out	0x2e, r1	; 46
				CLEAR_REG(OCR1AH);
    21c2:	1b bc       	out	0x2b, r1	; 43
				CLEAR_REG(OCR1AL);
    21c4:	1a bc       	out	0x2a, r1	; 42
				/*Configure initial value in TCNT1(high&low) for Timer0 to start count from it*/
// 				TCNT1L =(stPtr_a_Config->timer_InitialValue) & U8_BIT_REG_MASK;
// 				TCNT1H = (stPtr_a_Config->timer_InitialValue >> U8_BIT_REG_MASK) & U8_BIT_REG_MASK;
				TCNT1 = stPtr_a_Config->timer_InitialValue;
    21c6:	fc 01       	movw	r30, r24
    21c8:	26 81       	ldd	r18, Z+6	; 0x06
    21ca:	37 81       	ldd	r19, Z+7	; 0x07
    21cc:	3d bd       	out	0x2d, r19	; 45
    21ce:	2c bd       	out	0x2c, r18	; 44
				
				/*Configure the TIMER mode value and enable the interrupt for this mode*/
				l_ret |= TIMERx_setTimerMode(stPtr_a_Config);
    21d0:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <TIMERx_setTimerMode>
    21d4:	81 60       	ori	r24, 0x01	; 1
				break;
    21d6:	08 95       	ret
			
			case Timer2:
				/*Clear registers of Timer2 before processing any of them*/
				CLEAR_REG(TCNT2);
    21d8:	14 bc       	out	0x24, r1	; 36
				CLEAR_REG(TCCR2);
    21da:	15 bc       	out	0x25, r1	; 37
				CLEAR_REG(OCR2);
    21dc:	13 bc       	out	0x23, r1	; 35
				/*Configure initial value in TCNT for Timer2 to start count from it*/
				TCNT2 = stPtr_a_Config->timer_InitialValue & U8_BIT_REG_MASK;
    21de:	fc 01       	movw	r30, r24
    21e0:	26 81       	ldd	r18, Z+6	; 0x06
    21e2:	24 bd       	out	0x24, r18	; 36
				/*Configure the TIMER mode value and enable the interrupt for this mode*/
				l_ret |= TIMERx_setTimerMode(stPtr_a_Config);
    21e4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <TIMERx_setTimerMode>
    21e8:	81 60       	ori	r24, 0x01	; 1
				break;
    21ea:	08 95       	ret
{
	Std_ReturnType l_ret = E_OK;
	if((stPtr_a_Config == NULL) || (stPtr_a_Config->timer_type >= INVALID_TIMER_TYPE) || (stPtr_a_Config->timer_mode >= INVALID_TIMER_MODE) ||
	(stPtr_a_Config->output_compare_mode >=CTC_INVALID_TIMER_OUTPUT_COMPARE_MODE ) || stPtr_a_Config->fast_pwm_mode >= FAST_INVALID_TIMER_FAST_PWM_MODE)
	{
		l_ret = E_NOT_OK;
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	08 95       	ret
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	08 95       	ret
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	08 95       	ret
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	08 95       	ret
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	08 95       	ret
				/*Configure the TIMER mode value and enable the interrupt for this mode*/
				l_ret |= TIMERx_setTimerMode(stPtr_a_Config);
				break;
			
			default:
				l_ret |= E_NOT_OK;
    2200:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}
	return l_ret;
}
    2202:	08 95       	ret

00002204 <TIMERx_start>:
Std_ReturnType TIMERx_start(const TimerClock_t en_a_timer_clk,const TimerType_t en_a_timer_type)
{
	Std_ReturnType l_ret = E_OK;
	if((en_a_timer_clk >= INVALID_TIMER_CLK)||(en_a_timer_type >= INVALID_TIMER_TYPE))
    2204:	8a 30       	cpi	r24, 0x0A	; 10
    2206:	40 f4       	brcc	.+16     	; 0x2218 <TIMERx_start+0x14>
    2208:	63 30       	cpi	r22, 0x03	; 3
    220a:	40 f4       	brcc	.+16     	; 0x221c <TIMERx_start+0x18>
    220c:	96 2f       	mov	r25, r22
    220e:	68 2f       	mov	r22, r24
		l_ret = E_NOT_OK;
	}
	else
	{
		/*Configure the TIMER Pres-scaler value for Timer-x clock*/
		l_ret = TIMERx_selectClk(en_a_timer_type,en_a_timer_clk);
    2210:	89 2f       	mov	r24, r25
    2212:	0e 94 a9 0b 	call	0x1752	; 0x1752 <TIMERx_selectClk>
    2216:	08 95       	ret
Std_ReturnType TIMERx_start(const TimerClock_t en_a_timer_clk,const TimerType_t en_a_timer_type)
{
	Std_ReturnType l_ret = E_OK;
	if((en_a_timer_clk >= INVALID_TIMER_CLK)||(en_a_timer_type >= INVALID_TIMER_TYPE))
	{
		l_ret = E_NOT_OK;
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	08 95       	ret
    221c:	80 e0       	ldi	r24, 0x00	; 0
	{
		/*Configure the TIMER Pres-scaler value for Timer-x clock*/
		l_ret = TIMERx_selectClk(en_a_timer_type,en_a_timer_clk);
	}
	return l_ret;
}
    221e:	08 95       	ret

00002220 <__tablejump2__>:
    2220:	ee 0f       	add	r30, r30
    2222:	ff 1f       	adc	r31, r31
    2224:	05 90       	lpm	r0, Z+
    2226:	f4 91       	lpm	r31, Z
    2228:	e0 2d       	mov	r30, r0
    222a:	09 94       	ijmp

0000222c <_exit>:
    222c:	f8 94       	cli

0000222e <__stop_program>:
    222e:	ff cf       	rjmp	.-2      	; 0x222e <__stop_program>
